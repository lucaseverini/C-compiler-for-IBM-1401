/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. test.jj */
/*@egen*/options {
                                  
}

PARSER_BEGIN(Calculator)
import java.io.*;

public class Calculator/*@bgen(jjtree)*/implements CalculatorTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected static JJTCalculatorState jjtree = new JJTCalculatorState();

/*@egen*/
  public static void main(String[] args)
  {
    Reader sr = new StringReader(args[0]);
    Calculator calc = new Calculator(sr);

    try {
      SimpleNode node = calc.Expression();
      node.dump("");
    }
    catch (ParseException ex) {
      ex.printStackTrace();
    }
  }
}
PARSER_END(Calculator)

SKIP : {
  " "
}
TOKEN : {
  <DIGITS : (["0"-"9"])+> | <PLUS : "+">
}

SimpleNode Expression() : {/*@bgen(jjtree) Expression */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Expression */
  try {
/*@egen*/
  Operator()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {return jjtn000;}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Operator()       : {Token t;}
{
  Operand()
  (
    "+"/*@bgen(jjtree) #adld( 2) */
        {
          SimpleNode jjtn001 = new SimpleNode(JJTADLD);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/ Operand()/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  2);
          }
        }
/*@egen*/         
  )*
}

void Operand() : {/*@bgen(jjtree) Operand */
                  SimpleNode jjtn000 = new SimpleNode(JJTOPERAND);
                  boolean jjtc000 = true;
                  jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Operand */
  try {
/*@egen*/
  t=<DIGITS>/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}