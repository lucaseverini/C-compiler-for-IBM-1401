/*
	small_c.jjt

    Assignment #6 - CS153 - SJSU
	November-8-2014

	By Sean Papay, Matt Pleva, Luca Severini
*/

/* Main production. */
SimpleNode Start() : {}
{
	/* TODO - replace this with top-level program structure */
  Expression() ";"
  { return jjtThis; }
}

void BareType(): {}
{
	"char" | "int" | Identifier()
}

void Type(): {}
{
	BareType() "*"*
}

void VariableDeclaration() : {}
{
	"typedef" Type() Identifier ";"
	| (BareType() ("*"* Identifier() ("[" Number()? "]")? ("=" Expression())?) 
		("," "*"* Identifier() ("[" Number()? "]")? ("=" Expression())?)* ";")
}

void FunctionDeclaration() : {}
{
	Type() Identifier() "(" (FunctionDeclarationParameter() ("," FunctionDeclarationParameter())*)? ")" ";"
}

void FunctionDeclarationParameter(): {}
{
	(Type() | Identifier() | Type() Identifier()) ("[" Expression() "]")?
}

void FunctionDefinition() : {}
{
	Type()? Identifier() "(" (FunctionDefinitionParameter() ("," FunctionDefinitionParameter())*)? ")"
		"{" VariableDeclaration()* Expression()* "}"
}

void FunctionDeclarationParameter(): {}
{
	Type()? Identifier() ("[" Expression() "]")?
}

void Statement(): {}
{
	Expression()? ";"
	| ("{" VariableDeclaration()* Statement()* "}")
	| ("if" | "while") "(" Expression() ")" Statement()
	| "for" "(" Expression()? ";" Expression()? ";" Expression()? ")" Statement()
	| "do" Statement() "while" "(" Expression() ")" ";"
	| "switch" "(" Expression ")" "{" VariableDeclaration()* (("case" Expression() ":" | "default" ":")? Statement())* "}"
	| "break" ";"
	| "continue" ";"
	| "return" Expression()? ";"
	| Identifier() ":" Statement()
	| "goto" Identifier() ";"
}

/** Left-to-right*/
void Expression() : {}
{
	AssignmentExpression() ("," AssignmentExpression())*
}
/** Right-to-left */
void AssignmentExpression : {}
{
	TernaryExpression() (("+" | "-" | "*" | "/" | "%" | "<<" | ">>" | "&" | "^" | "|")? "=" TernaryExpression())*
}

void TernaryExpression: {}
{
	OrExpression() ("?" Expression() ":" TernaryExpression())?
}

/** left-to-right*/

void OrExpression(): {}
{
	AndExpression() ("||" AndExpression())*
}

void AndExpression(): {}
{
	BitOrExpression() ("&&" BitOrExpression())*
}

void BitOrExpression(): {}
{
	BitXorExpression() ("|" BitXorExpression())*
}

void BitXorExpression(): {}
{
	BitAndExpression() ("^" BitAndExpression())*
}

void BitAndExpression(): {}
{
	EqualityExpression() ("&" EqualityExpression())*
}

void EqualityExpression(): {}
{
	GreaterThanExpression (("==" | "!=") GreaterThanExpression())*
}

void GreaterThanExpression(): {}
{
	LessthanExpression (">" "="? LessThanExpression)*
}

void LessThanExpression(): {}
{
	BitshiftExpression ("<" "="? BitshiftExpression)*
}

void BitshiftExpression(): {}
{
	AdditiveExpression (("<<" | ">>") AdditiveExpression)*
}

void AdditiveExpression(): {}
{
	MultiplicativeExpression (("+" | "-") MultiplicativeExpression)*
}

void MultiplicativeExpression(): {}
{
	PrefixExpression (("*" | "/" | "%") PrefixExpression)*
}

void PrefixExpression(): {}
{
	("++" | "--" | "+" | "-" | "!" | "~" | "(" Type() ")" | "*" | "&" | "sizeof")? SuffixExpression()
}

void SuffixExpression(): {}
{
	AtomicExpression() ("++" | "--" | "(" Expression() ")" | "[" Expression() "]")?
}

void AtomicExpression(): {}
{
	Identifier()
	| Number()
	| StringLiteral()
	| CharacterConstant()
	| "(" Expression() ")"
}
