/* SmallCC.java */
/* Generated By:JavaCC: Do not edit this line. SmallCC.java */
package compiler;

import preprocessor.*;
import java.io.*;

public class SmallCC implements SmallCCConstants {
        public static void main(String args[]) throws Exception
                {
                        compile(args[0]);
                }

        public static void compile(String fileName) throws Exception
        {
                                                File file = new File(fileName);
                                                /*
							line continuations and newline encoding are hard to keep
							track of at tokenization time, so we'll handle them
							directly in the reader
						*/
            Reader sr = new FileReader(file) {
                                                        private int[] lookahead = {-1, -1};
                                                        public int read() throws IOException {
                                                                if (lookahead[0] >= 0) {
                                                                        int ch = lookahead[0];
                                                                        lookahead[0] = lookahead[1];
                                                                        lookahead[1] = -1;
                                                                        return ch;
                                                                }
                                                                int ch = super.read();
                                                                //possible line continuation
                                                                if (ch == '\u005c\u005c') {
                                                                        lookahead[0] = super.read();

                                                                        if (lookahead[0] == '\u005cr') {
                                                                                //the user is using windows, what a loser :P
                                                                                lookahead[1] = super.read();
                                                                                if (lookahead[1] != '\u005cn') {
                                                                                        //carriage return with no line feed, what's going on?
                                            // maybe we are printing a bold character or an underline
                                                                                        return ch;
                                                                                } else {
                                                                                        lookahead[0] = '\u005cn';
                                                                                }
                                                                        }
                                                                        if (lookahead[0] == '\u005cn') {
                                                                                lookahead[0] = lookahead[1] = -1;
                                                                                do {
                                                                                        ch = super.read();
                                                                                        if (ch < 0) return ch;
                                                                                } while(Character.isWhitespace((char) ch));
                                                                                return ch;
                                                                        }
                                                                } else if (ch == '\u005cr') {
                                                                        lookahead[0] = super.read();
                                                                        if (lookahead[0] == '\u005cn') {
                                                                                lookahead[0] = lookahead[1] = -1;
                                                                                return '\u005cn';
                                                                        }
                                                                }
                                                                return ch;
                                                        }

                                                        public int read(char[] cbuf, int offset, int length) throws IOException{
                                                                int read = 0;
                                                                while (read < length && offset + read < cbuf.length) {
                                                                        int ch = read();
                                                                        if (ch < 0) break;
                                                                        cbuf[offset + (read++)] = (char) ch;
                                                                }
                                                                if (read == 0 && read < length) return -1;
                                                                return read;
                                                        }
            };
            SmallCC parser = new SmallCC(sr);

            try {
                parser.Tokens();
            }
                catch (ParseException ex) {
                ex.printStackTrace();
            }
        }

/** Main production. */
  static final public 
void BareType() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case CHAR:{
      jj_consume_token(CHAR);
      break;
      }
    case INT:{
      jj_consume_token(INT);
      break;
      }
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Type() throws ParseException {
    BareType();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case STAR:{
        ;
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
      Star();
    }
  }

  static final public void VariableDeclaration() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case CHAR:
    case INT:{
      BareType();
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case STAR:{
        ;
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
      Star();
    }
    Identifier();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 60:{
      jj_consume_token(60);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NUMBER:{
        Number();
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        ;
      }
      jj_consume_token(61);
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case EQUALS:{
      Equals();
      Expression();
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 62:{
        ;
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        break label_3;
      }
      jj_consume_token(62);
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case STAR:{
          ;
          break;
          }
        default:
          jj_la1[8] = jj_gen;
          break label_4;
        }
        Star();
      }
      Identifier();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 60:{
        jj_consume_token(60);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case NUMBER:{
          Number();
          break;
          }
        default:
          jj_la1[9] = jj_gen;
          ;
        }
        jj_consume_token(61);
        break;
        }
      default:
        jj_la1[10] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EQUALS:{
        Equals();
        Expression();
        break;
        }
      default:
        jj_la1[11] = jj_gen;
        ;
      }
    }
    jj_consume_token(SEMI_COLON);
  }

  static final public void FunctionDeclaration() throws ParseException {
    Type();
    Identifier();
    jj_consume_token(L_PAREN);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case CHAR:
    case INT:
    case IDENTIFIER:{
      FunctionDeclarationParameter();
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 62:{
          ;
          break;
          }
        default:
          jj_la1[12] = jj_gen;
          break label_5;
        }
        jj_consume_token(62);
        FunctionDeclarationParameter();
      }
      break;
      }
    default:
      jj_la1[13] = jj_gen;
      ;
    }
    jj_consume_token(R_PAREN);
    jj_consume_token(SEMI_COLON);
  }

  static final public void FunctionDeclarationParameter() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case CHAR:
    case INT:{
      Type();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFIER:{
        Identifier();
        break;
        }
      default:
        jj_la1[14] = jj_gen;
        ;
      }
      break;
      }
    case IDENTIFIER:{
      Identifier();
      break;
      }
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 60:{
      jj_consume_token(60);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SIZEOF:
      case PLUS_PLUS:
      case MINUS_MINUS:
      case PLUS:
      case MINUS:
      case STAR:
      case BIT_AND:
      case BIT_NOT:
      case BOOLEAN_NOT:
      case L_PAREN:
      case IDENTIFIER:
      case NUMBER:
      case STRING_LIT:
      case CHARACTER_CONST:{
        Expression();
        break;
        }
      default:
        jj_la1[16] = jj_gen;
        ;
      }
      jj_consume_token(61);
      break;
      }
    default:
      jj_la1[17] = jj_gen;
      ;
    }
  }

  static final public void FunctionDefinition() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case CHAR:
    case INT:{
      Type();
      break;
      }
    default:
      jj_la1[18] = jj_gen;
      ;
    }
    Identifier();
    jj_consume_token(L_PAREN);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case CHAR:
    case INT:
    case IDENTIFIER:{
      FunctionDefinitionParameter();
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 62:{
          ;
          break;
          }
        default:
          jj_la1[19] = jj_gen;
          break label_6;
        }
        jj_consume_token(62);
        FunctionDefinitionParameter();
      }
      break;
      }
    default:
      jj_la1[20] = jj_gen;
      ;
    }
    jj_consume_token(R_PAREN);
    jj_consume_token(63);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BREAK:
      case CHAR:
      case CONTINUE:
      case DO:
      case FOR:
      case GOTO:
      case IF:
      case INT:
      case RETURN:
      case SIZEOF:
      case SWITCH:
      case WHILE:
      case SEMI_COLON:
      case PLUS_PLUS:
      case MINUS_MINUS:
      case PLUS:
      case MINUS:
      case STAR:
      case BIT_AND:
      case BIT_NOT:
      case BOOLEAN_NOT:
      case L_PAREN:
      case IDENTIFIER:
      case NUMBER:
      case STRING_LIT:
      case CHARACTER_CONST:
      case 63:{
        ;
        break;
        }
      default:
        jj_la1[21] = jj_gen;
        break label_7;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CHAR:
      case INT:
      case STAR:
      case IDENTIFIER:{
        VariableDeclaration();
        break;
        }
      case BREAK:
      case CONTINUE:
      case DO:
      case FOR:
      case GOTO:
      case IF:
      case RETURN:
      case SIZEOF:
      case SWITCH:
      case WHILE:
      case SEMI_COLON:
      case PLUS_PLUS:
      case MINUS_MINUS:
      case PLUS:
      case MINUS:
      case BIT_AND:
      case BIT_NOT:
      case BOOLEAN_NOT:
      case L_PAREN:
      case NUMBER:
      case STRING_LIT:
      case CHARACTER_CONST:
      case 63:{
        Statement();
        break;
        }
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(64);
  }

  static final public void FunctionDefinitionParameter() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case CHAR:
    case INT:{
      Type();
      break;
      }
    default:
      jj_la1[23] = jj_gen;
      ;
    }
    Identifier();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 60:{
      jj_consume_token(60);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SIZEOF:
      case PLUS_PLUS:
      case MINUS_MINUS:
      case PLUS:
      case MINUS:
      case STAR:
      case BIT_AND:
      case BIT_NOT:
      case BOOLEAN_NOT:
      case L_PAREN:
      case IDENTIFIER:
      case NUMBER:
      case STRING_LIT:
      case CHARACTER_CONST:{
        Expression();
        break;
        }
      default:
        jj_la1[24] = jj_gen;
        ;
      }
      jj_consume_token(61);
      break;
      }
    default:
      jj_la1[25] = jj_gen;
      ;
    }
  }

  static final public void Statement() throws ParseException {
    if (jj_2_2(2)) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SIZEOF:
      case PLUS_PLUS:
      case MINUS_MINUS:
      case PLUS:
      case MINUS:
      case STAR:
      case BIT_AND:
      case BIT_NOT:
      case BOOLEAN_NOT:
      case L_PAREN:
      case IDENTIFIER:
      case NUMBER:
      case STRING_LIT:
      case CHARACTER_CONST:{
        Expression();
        break;
        }
      default:
        jj_la1[26] = jj_gen;
        ;
      }
      jj_consume_token(SEMI_COLON);
System.out.println(" found statement");
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 63:{
        jj_consume_token(63);
        label_8:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case BREAK:
          case CHAR:
          case CONTINUE:
          case DO:
          case FOR:
          case GOTO:
          case IF:
          case INT:
          case RETURN:
          case SIZEOF:
          case SWITCH:
          case WHILE:
          case SEMI_COLON:
          case PLUS_PLUS:
          case MINUS_MINUS:
          case PLUS:
          case MINUS:
          case STAR:
          case BIT_AND:
          case BIT_NOT:
          case BOOLEAN_NOT:
          case L_PAREN:
          case IDENTIFIER:
          case NUMBER:
          case STRING_LIT:
          case CHARACTER_CONST:
          case 63:{
            ;
            break;
            }
          default:
            jj_la1[27] = jj_gen;
            break label_8;
          }
          if (jj_2_1(2)) {
            VariableDeclaration();
          } else {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case BREAK:
            case CONTINUE:
            case DO:
            case FOR:
            case GOTO:
            case IF:
            case RETURN:
            case SIZEOF:
            case SWITCH:
            case WHILE:
            case SEMI_COLON:
            case PLUS_PLUS:
            case MINUS_MINUS:
            case PLUS:
            case MINUS:
            case STAR:
            case BIT_AND:
            case BIT_NOT:
            case BOOLEAN_NOT:
            case L_PAREN:
            case IDENTIFIER:
            case NUMBER:
            case STRING_LIT:
            case CHARACTER_CONST:
            case 63:{
              Statement();
              break;
              }
            default:
              jj_la1[28] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
        jj_consume_token(64);
        break;
        }
      case IF:
      case WHILE:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IF:{
          jj_consume_token(IF);
          break;
          }
        case WHILE:{
          jj_consume_token(WHILE);
          break;
          }
        default:
          jj_la1[29] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(L_PAREN);
        Expression();
        jj_consume_token(R_PAREN);
        Statement();
System.out.println(" found if statement");
        break;
        }
      case FOR:{
        jj_consume_token(FOR);
        jj_consume_token(L_PAREN);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case SIZEOF:
        case PLUS_PLUS:
        case MINUS_MINUS:
        case PLUS:
        case MINUS:
        case STAR:
        case BIT_AND:
        case BIT_NOT:
        case BOOLEAN_NOT:
        case L_PAREN:
        case IDENTIFIER:
        case NUMBER:
        case STRING_LIT:
        case CHARACTER_CONST:{
          Expression();
          break;
          }
        default:
          jj_la1[30] = jj_gen;
          ;
        }
        jj_consume_token(SEMI_COLON);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case SIZEOF:
        case PLUS_PLUS:
        case MINUS_MINUS:
        case PLUS:
        case MINUS:
        case STAR:
        case BIT_AND:
        case BIT_NOT:
        case BOOLEAN_NOT:
        case L_PAREN:
        case IDENTIFIER:
        case NUMBER:
        case STRING_LIT:
        case CHARACTER_CONST:{
          Expression();
          break;
          }
        default:
          jj_la1[31] = jj_gen;
          ;
        }
        jj_consume_token(SEMI_COLON);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case SIZEOF:
        case PLUS_PLUS:
        case MINUS_MINUS:
        case PLUS:
        case MINUS:
        case STAR:
        case BIT_AND:
        case BIT_NOT:
        case BOOLEAN_NOT:
        case L_PAREN:
        case IDENTIFIER:
        case NUMBER:
        case STRING_LIT:
        case CHARACTER_CONST:{
          Expression();
          break;
          }
        default:
          jj_la1[32] = jj_gen;
          ;
        }
        jj_consume_token(R_PAREN);
        Statement();
System.out.println(" found for statement");
        break;
        }
      case DO:{
        jj_consume_token(DO);
        Statement();
        jj_consume_token(WHILE);
        jj_consume_token(L_PAREN);
        Expression();
        jj_consume_token(R_PAREN);
        jj_consume_token(SEMI_COLON);
System.out.println(" found do while statement");
        break;
        }
      case SWITCH:{
        jj_consume_token(SWITCH);
        jj_consume_token(L_PAREN);
        Expression();
        jj_consume_token(R_PAREN);
        jj_consume_token(63);
        label_9:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case CHAR:
          case INT:
          case STAR:
          case IDENTIFIER:{
            ;
            break;
            }
          default:
            jj_la1[33] = jj_gen;
            break label_9;
          }
          VariableDeclaration();
        }
        label_10:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case BREAK:
          case CASE:
          case CONTINUE:
          case _DEFAULT:
          case DO:
          case FOR:
          case GOTO:
          case IF:
          case RETURN:
          case SIZEOF:
          case SWITCH:
          case WHILE:
          case SEMI_COLON:
          case PLUS_PLUS:
          case MINUS_MINUS:
          case PLUS:
          case MINUS:
          case STAR:
          case BIT_AND:
          case BIT_NOT:
          case BOOLEAN_NOT:
          case L_PAREN:
          case IDENTIFIER:
          case NUMBER:
          case STRING_LIT:
          case CHARACTER_CONST:
          case 63:{
            ;
            break;
            }
          default:
            jj_la1[34] = jj_gen;
            break label_10;
          }
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case CASE:
          case _DEFAULT:{
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case CASE:{
              jj_consume_token(CASE);
              Expression();
              jj_consume_token(65);
              break;
              }
            case _DEFAULT:{
              jj_consume_token(_DEFAULT);
              jj_consume_token(65);
              break;
              }
            default:
              jj_la1[35] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
            }
          default:
            jj_la1[36] = jj_gen;
            ;
          }
          Statement();
        }
        jj_consume_token(64);
System.out.println(" found switch statement");
        break;
        }
      case BREAK:{
        jj_consume_token(BREAK);
        jj_consume_token(SEMI_COLON);
System.out.println(" found break statement");
        break;
        }
      case CONTINUE:{
        jj_consume_token(CONTINUE);
        jj_consume_token(SEMI_COLON);
System.out.println(" found continue statement");
        break;
        }
      case RETURN:{
        jj_consume_token(RETURN);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case SIZEOF:
        case PLUS_PLUS:
        case MINUS_MINUS:
        case PLUS:
        case MINUS:
        case STAR:
        case BIT_AND:
        case BIT_NOT:
        case BOOLEAN_NOT:
        case L_PAREN:
        case IDENTIFIER:
        case NUMBER:
        case STRING_LIT:
        case CHARACTER_CONST:{
          Expression();
          break;
          }
        default:
          jj_la1[37] = jj_gen;
          ;
        }
        jj_consume_token(SEMI_COLON);
System.out.println(" found return statement");
        break;
        }
      case IDENTIFIER:{
        Identifier();
        jj_consume_token(65);
        Statement();
System.out.println(" found label statement");
        break;
        }
      case GOTO:{
        jj_consume_token(GOTO);
        Identifier();
        jj_consume_token(SEMI_COLON);
System.out.println(" found goto statement");
        break;
        }
      default:
        jj_la1[38] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

/** Left-to-right*/
  static final public void Expression() throws ParseException {
    AssignmentExpression();
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 62:{
        ;
        break;
        }
      default:
        jj_la1[39] = jj_gen;
        break label_11;
      }
      jj_consume_token(62);
      AssignmentExpression();
    }
System.out.println(" found expression");
  }

/** Right-to-left */
  static final public void AssignmentExpression() throws ParseException {
    TernaryExpression();
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:
      case MINUS:
      case STAR:
      case DIVIDE:
      case MOD:
      case BIT_AND:
      case BIT_OR:
      case BIT_XOR:
      case LEFT_SHIFT:
      case RIGHT_SHIFT:
      case EQUALS:{
        ;
        break;
        }
      default:
        jj_la1[40] = jj_gen;
        break label_12;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:
      case MINUS:
      case STAR:
      case DIVIDE:
      case MOD:
      case BIT_AND:
      case BIT_OR:
      case BIT_XOR:
      case LEFT_SHIFT:
      case RIGHT_SHIFT:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PLUS:{
          Plus();
          break;
          }
        case MINUS:{
          Minus();
          break;
          }
        case STAR:{
          Star();
          break;
          }
        case DIVIDE:{
          Divide();
          break;
          }
        case MOD:{
          Mod();
          break;
          }
        case RIGHT_SHIFT:{
          Right_Shift();
          break;
          }
        case LEFT_SHIFT:{
          Left_Shift();
          break;
          }
        case BIT_AND:{
          Bit_And();
          break;
          }
        case BIT_XOR:{
          Bit_Xor();
          break;
          }
        case BIT_OR:{
          Bit_Or();
          break;
          }
        default:
          jj_la1[41] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      default:
        jj_la1[42] = jj_gen;
        ;
      }
      Equals();
      TernaryExpression();
    }
  }

  static final public void TernaryExpression() throws ParseException {
    OrExpression();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 66:{
      jj_consume_token(66);
      Expression();
      jj_consume_token(65);
      TernaryExpression();
      break;
      }
    default:
      jj_la1[43] = jj_gen;
      ;
    }
  }

/** left-to-right*/
  static final public 
void OrExpression() throws ParseException {
    AndExpression();
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BOOLEAN_OR:{
        ;
        break;
        }
      default:
        jj_la1[44] = jj_gen;
        break label_13;
      }
      Boolean_Or();
      AndExpression();
    }
  }

  static final public void AndExpression() throws ParseException {
    BitOrExpression();
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BOOLEAN_OR:{
        ;
        break;
        }
      default:
        jj_la1[45] = jj_gen;
        break label_14;
      }
      Boolean_Or();
      BitOrExpression();
    }
  }

  static final public void BitOrExpression() throws ParseException {
    BitXorExpression();
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BIT_OR:{
        ;
        break;
        }
      default:
        jj_la1[46] = jj_gen;
        break label_15;
      }
      Bit_Or();
      BitXorExpression();
    }
  }

  static final public void BitXorExpression() throws ParseException {
    BitAndExpression();
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BIT_XOR:{
        ;
        break;
        }
      default:
        jj_la1[47] = jj_gen;
        break label_16;
      }
      Bit_Xor();
      BitAndExpression();
    }
  }

  static final public void BitAndExpression() throws ParseException {
    EqualityExpression();
    label_17:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BIT_AND:{
        ;
        break;
        }
      default:
        jj_la1[48] = jj_gen;
        break label_17;
      }
      Bit_And();
      EqualityExpression();
    }
  }

  static final public void EqualityExpression() throws ParseException {
    GreaterThanExpression();
    label_18:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EQUALS_EQUALS:
      case NOT_EQUALS:{
        ;
        break;
        }
      default:
        jj_la1[49] = jj_gen;
        break label_18;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EQUALS_EQUALS:{
        Equals_Equals();
        break;
        }
      case NOT_EQUALS:{
        Not_Equals();
        break;
        }
      default:
        jj_la1[50] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      GreaterThanExpression();
    }
  }

  static final public void GreaterThanExpression() throws ParseException {
    LessThanExpression();
    label_19:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case GREATER_THAN:{
        ;
        break;
        }
      default:
        jj_la1[51] = jj_gen;
        break label_19;
      }
      Greater_Than();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EQUALS:{
        Equals();
        break;
        }
      default:
        jj_la1[52] = jj_gen;
        ;
      }
      LessThanExpression();
    }
  }

  static final public void LessThanExpression() throws ParseException {
    BitshiftExpression();
    label_20:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LESS_THAN:{
        ;
        break;
        }
      default:
        jj_la1[53] = jj_gen;
        break label_20;
      }
      Less_Than();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EQUALS:{
        Equals();
        break;
        }
      default:
        jj_la1[54] = jj_gen;
        ;
      }
      BitshiftExpression();
    }
  }

  static final public void BitshiftExpression() throws ParseException {
    AdditiveExpression();
    label_21:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LEFT_SHIFT:
      case RIGHT_SHIFT:{
        ;
        break;
        }
      default:
        jj_la1[55] = jj_gen;
        break label_21;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case RIGHT_SHIFT:{
        Right_Shift();
        break;
        }
      case LEFT_SHIFT:{
        Left_Shift();
        break;
        }
      default:
        jj_la1[56] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      AdditiveExpression();
    }
  }

  static final public void AdditiveExpression() throws ParseException {
    MultiplicativeExpression();
    label_22:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:
      case MINUS:{
        ;
        break;
        }
      default:
        jj_la1[57] = jj_gen;
        break label_22;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:{
        Plus();
        break;
        }
      case MINUS:{
        Minus();
        break;
        }
      default:
        jj_la1[58] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      MultiplicativeExpression();
    }
  }

  static final public void MultiplicativeExpression() throws ParseException {
    PrefixExpression();
    label_23:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case STAR:
      case DIVIDE:
      case MOD:{
        ;
        break;
        }
      default:
        jj_la1[59] = jj_gen;
        break label_23;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case STAR:{
        Star();
        break;
        }
      case DIVIDE:{
        Divide();
        break;
        }
      case MOD:{
        Mod();
        break;
        }
      default:
        jj_la1[60] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      PrefixExpression();
    }
  }

  static final public void PrefixExpression() throws ParseException {
    label_24:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SIZEOF:
      case PLUS_PLUS:
      case MINUS_MINUS:
      case PLUS:
      case MINUS:
      case STAR:
      case BIT_AND:
      case BIT_NOT:
      case BOOLEAN_NOT:{
        ;
        break;
        }
      default:
        jj_la1[61] = jj_gen;
        break label_24;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS_PLUS:{
        Plus_Plus();
        break;
        }
      case MINUS_MINUS:{
        Minus_Minus();
        break;
        }
      case PLUS:{
        Plus();
        break;
        }
      case MINUS:{
        Minus();
        break;
        }
      case BOOLEAN_NOT:{
        Boolean_Not();
        break;
        }
      case BIT_NOT:{
        Bit_Not();
        break;
        }
      case STAR:{
        Star();
        break;
        }
      case BIT_AND:{
        Bit_And();
        break;
        }
      case SIZEOF:{
        jj_consume_token(SIZEOF);
        break;
        }
      default:
        jj_la1[62] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    SuffixExpression();
  }

  static final public void SuffixExpression() throws ParseException {
    AtomicExpression();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PLUS_PLUS:
    case MINUS_MINUS:
    case L_PAREN:
    case 60:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS_PLUS:{
        Plus_Plus();
        break;
        }
      case MINUS_MINUS:{
        Minus_Minus();
        break;
        }
      case L_PAREN:{
        jj_consume_token(L_PAREN);
        Expression();
        jj_consume_token(R_PAREN);
        break;
        }
      case 60:{
        jj_consume_token(60);
        Expression();
        jj_consume_token(61);
        break;
        }
      default:
        jj_la1[63] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[64] = jj_gen;
      ;
    }
  }

  static final public void AtomicExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENTIFIER:{
      Identifier();
      break;
      }
    case NUMBER:{
      Number();
      break;
      }
    case STRING_LIT:{
      StringLiteral();
      break;
      }
    case CHARACTER_CONST:{
      CharacterConstant();
      break;
      }
    case L_PAREN:{
      jj_consume_token(L_PAREN);
      Expression();
      jj_consume_token(R_PAREN);
      break;
      }
    default:
      jj_la1[65] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Identifier() throws ParseException {
    jj_consume_token(IDENTIFIER);
System.out.print(token.image + " ");
        if (token.image.equals("main")) System.out.print("found main\u005cn");
  }

  static final public void CharacterConstant() throws ParseException {
    jj_consume_token(CHARACTER_CONST);
System.out.print(token.image);
  }

  static final public void Number() throws ParseException {
    jj_consume_token(NUMBER);
System.out.print(token.image);
  }

  static final public void StringLiteral() throws ParseException {
    jj_consume_token(STRING_LIT);
System.out.print(token.image);
  }

  static final public void Boolean_Not() throws ParseException {
    jj_consume_token(BOOLEAN_NOT);
System.out.print("! ");
  }

  static final public void Boolean_And() throws ParseException {
    jj_consume_token(BOOLEAN_AND);
System.out.print("&& ");
  }

  static final public void Boolean_Or() throws ParseException {
    jj_consume_token(BOOLEAN_OR);
System.out.print("|| ");
  }

  static final public void Bit_Not() throws ParseException {
    jj_consume_token(BIT_NOT);
System.out.print("~ ");
  }

  static final public void Bit_And() throws ParseException {
    jj_consume_token(BIT_AND);
System.out.print("& ");
  }

  static final public void Bit_Or() throws ParseException {
    jj_consume_token(BIT_OR);
System.out.print("| ");
  }

  static final public void Bit_Xor() throws ParseException {
    jj_consume_token(BIT_XOR);
System.out.print("^ ");
  }

  static final public void Left_Shift() throws ParseException {
    jj_consume_token(LEFT_SHIFT);
System.out.print("<< ");
  }

  static final public void Right_Shift() throws ParseException {
    jj_consume_token(RIGHT_SHIFT);
System.out.print(">> ");
  }

  static final public void R_Paren() throws ParseException {
    jj_consume_token(R_PAREN);
System.out.print(") ");
  }

  static final public void L_Paren() throws ParseException {
    jj_consume_token(L_PAREN);
System.out.print("( ");
  }

  static final public void Plus() throws ParseException {
    jj_consume_token(PLUS);
System.out.print("+ ");
  }

  static final public void Plus_Plus() throws ParseException {
    jj_consume_token(PLUS_PLUS);
System.out.print("++ ");
  }

  static final public void Minus() throws ParseException {
    jj_consume_token(MINUS);
System.out.print("- ");
  }

  static final public void Minus_Minus() throws ParseException {
    jj_consume_token(MINUS_MINUS);
System.out.print("-- ");
  }

  static final public void Star() throws ParseException {
    jj_consume_token(STAR);
System.out.print("* ");
  }

  static final public void Mod() throws ParseException {
    jj_consume_token(MOD);
System.out.print("% ");
  }

  static final public void Divide() throws ParseException {
    jj_consume_token(DIVIDE);
System.out.print("/ ");
  }

  static final public void Equals() throws ParseException {
    jj_consume_token(EQUALS);
System.out.print("= ");
  }

  static final public void Less_Than() throws ParseException {
    jj_consume_token(LESS_THAN);
System.out.print("< ");
  }

  static final public void Greater_Than() throws ParseException {
    jj_consume_token(GREATER_THAN);
System.out.print("> ");
  }

  static final public void Equals_Equals() throws ParseException {
    jj_consume_token(EQUALS_EQUALS);
System.out.print("== ");
  }

  static final public void Not_Equals() throws ParseException {
    jj_consume_token(NOT_EQUALS);
System.out.print("!= ");
  }

  static final public void Tokens() throws ParseException {
    label_25:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BREAK:
      case CHAR:
      case CONTINUE:
      case DO:
      case FOR:
      case GOTO:
      case IF:
      case INT:
      case RETURN:
      case SIZEOF:
      case SWITCH:
      case WHILE:
      case SEMI_COLON:
      case PLUS_PLUS:
      case MINUS_MINUS:
      case PLUS:
      case MINUS:
      case STAR:
      case BIT_AND:
      case BIT_NOT:
      case BOOLEAN_NOT:
      case L_PAREN:
      case IDENTIFIER:
      case NUMBER:
      case STRING_LIT:
      case CHARACTER_CONST:
      case COMMENT:
      case 63:{
        ;
        break;
        }
      default:
        jj_la1[66] = jj_gen;
        break label_25;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CHAR:
      case INT:
      case IDENTIFIER:{
        FunctionDefinition();
        break;
        }
      case BREAK:
      case CONTINUE:
      case DO:
      case FOR:
      case GOTO:
      case IF:
      case RETURN:
      case SIZEOF:
      case SWITCH:
      case WHILE:
      case SEMI_COLON:
      case PLUS_PLUS:
      case MINUS_MINUS:
      case PLUS:
      case MINUS:
      case STAR:
      case BIT_AND:
      case BIT_NOT:
      case BOOLEAN_NOT:
      case L_PAREN:
      case NUMBER:
      case STRING_LIT:
      case CHARACTER_CONST:
      case 63:{
        Statement();
        break;
        }
      case COMMENT:{
        jj_consume_token(COMMENT);
        break;
        }
      default:
        jj_la1[67] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(0);
  }

  static private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_3R_26()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_28()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_29()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_30()) return true;
    xsp = jj_scanpos;
    if (jj_3R_31()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_32()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_33()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(SEMI_COLON)) return true;
    return false;
  }

  static private boolean jj_3R_59()
 {
    if (jj_scan_token(BOOLEAN_OR)) return true;
    return false;
  }

  static private boolean jj_3R_107()
 {
    if (jj_3R_115()) return true;
    return false;
  }

  static private boolean jj_3R_35()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(7)) {
    jj_scanpos = xsp;
    if (jj_scan_token(15)) return true;
    }
    return false;
  }

  static private boolean jj_3R_123()
 {
    if (jj_scan_token(L_PAREN)) return true;
    return false;
  }

  static private boolean jj_3R_56()
 {
    if (jj_3R_68()) return true;
    return false;
  }

  static private boolean jj_3R_114()
 {
    if (jj_scan_token(BOOLEAN_NOT)) return true;
    return false;
  }

  static private boolean jj_3R_106()
 {
    if (jj_3R_114()) return true;
    return false;
  }

  static private boolean jj_3R_126()
 {
    if (jj_scan_token(STRING_LIT)) return true;
    return false;
  }

  static private boolean jj_3R_55()
 {
    if (jj_3R_67()) return true;
    return false;
  }

  static private boolean jj_3R_105()
 {
    if (jj_3R_61()) return true;
    return false;
  }

  static private boolean jj_3R_122()
 {
    if (jj_3R_113()) return true;
    return false;
  }

  static private boolean jj_3R_85()
 {
    if (jj_scan_token(NOT_EQUALS)) return true;
    return false;
  }

  static private boolean jj_3R_125()
 {
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  static private boolean jj_3R_101()
 {
    if (jj_3R_63()) return true;
    return false;
  }

  static private boolean jj_3R_104()
 {
    if (jj_3R_60()) return true;
    return false;
  }

  static private boolean jj_3R_54()
 {
    if (jj_3R_66()) return true;
    return false;
  }

  static private boolean jj_3R_84()
 {
    if (jj_scan_token(EQUALS_EQUALS)) return true;
    return false;
  }

  static private boolean jj_3R_127()
 {
    if (jj_scan_token(CHARACTER_CONST)) return true;
    return false;
  }

  static private boolean jj_3R_96()
 {
    if (jj_3R_61()) return true;
    return false;
  }

  static private boolean jj_3R_121()
 {
    if (jj_3R_112()) return true;
    return false;
  }

  static private boolean jj_3R_111()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_121()) {
    jj_scanpos = xsp;
    if (jj_3R_122()) {
    jj_scanpos = xsp;
    if (jj_3R_123()) {
    jj_scanpos = xsp;
    if (jj_3R_124()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_100()
 {
    if (jj_3R_62()) return true;
    return false;
  }

  static private boolean jj_3R_92()
 {
    if (jj_3R_65()) return true;
    return false;
  }

  static private boolean jj_3R_83()
 {
    if (jj_scan_token(GREATER_THAN)) return true;
    return false;
  }

  static private boolean jj_3R_30()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_95()
 {
    if (jj_3R_60()) return true;
    return false;
  }

  static private boolean jj_3R_120()
 {
    if (jj_scan_token(L_PAREN)) return true;
    if (jj_3R_34()) return true;
    return false;
  }

  static private boolean jj_3R_103()
 {
    if (jj_3R_113()) return true;
    return false;
  }

  static private boolean jj_3R_90()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_95()) {
    jj_scanpos = xsp;
    if (jj_3R_96()) return true;
    }
    return false;
  }

  static private boolean jj_3R_119()
 {
    if (jj_3R_127()) return true;
    return false;
  }

  static private boolean jj_3R_53()
 {
    if (jj_3R_65()) return true;
    return false;
  }

  static private boolean jj_3R_118()
 {
    if (jj_3R_126()) return true;
    return false;
  }

  static private boolean jj_3R_99()
 {
    if (jj_3R_36()) return true;
    return false;
  }

  static private boolean jj_3R_117()
 {
    if (jj_3R_125()) return true;
    return false;
  }

  static private boolean jj_3R_94()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_99()) {
    jj_scanpos = xsp;
    if (jj_3R_100()) {
    jj_scanpos = xsp;
    if (jj_3R_101()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_88()
 {
    if (jj_scan_token(LESS_THAN)) return true;
    return false;
  }

  static private boolean jj_3R_80()
 {
    if (jj_3R_85()) return true;
    return false;
  }

  static private boolean jj_3R_116()
 {
    if (jj_3R_30()) return true;
    return false;
  }

  static private boolean jj_3R_110()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_116()) {
    jj_scanpos = xsp;
    if (jj_3R_117()) {
    jj_scanpos = xsp;
    if (jj_3R_118()) {
    jj_scanpos = xsp;
    if (jj_3R_119()) {
    jj_scanpos = xsp;
    if (jj_3R_120()) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_91()
 {
    if (jj_3R_64()) return true;
    return false;
  }

  static private boolean jj_3R_98()
 {
    if (jj_3R_110()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_111()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_87()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_91()) {
    jj_scanpos = xsp;
    if (jj_3R_92()) return true;
    }
    return false;
  }

  static private boolean jj_3R_37()
 {
    if (jj_scan_token(EQUALS)) return true;
    return false;
  }

  static private boolean jj_3R_102()
 {
    if (jj_3R_112()) return true;
    return false;
  }

  static private boolean jj_3R_97()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_102()) {
    jj_scanpos = xsp;
    if (jj_3R_103()) {
    jj_scanpos = xsp;
    if (jj_3R_104()) {
    jj_scanpos = xsp;
    if (jj_3R_105()) {
    jj_scanpos = xsp;
    if (jj_3R_106()) {
    jj_scanpos = xsp;
    if (jj_3R_107()) {
    jj_scanpos = xsp;
    if (jj_3R_108()) {
    jj_scanpos = xsp;
    if (jj_3R_109()) {
    jj_scanpos = xsp;
    if (jj_scan_token(19)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_82()
 {
    if (jj_3R_88()) return true;
    return false;
  }

  static private boolean jj_3R_93()
 {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_97()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_98()) return true;
    return false;
  }

  static private boolean jj_3R_52()
 {
    if (jj_3R_64()) return true;
    return false;
  }

  static private boolean jj_3R_62()
 {
    if (jj_scan_token(DIVIDE)) return true;
    return false;
  }

  static private boolean jj_3R_78()
 {
    if (jj_3R_83()) return true;
    return false;
  }

  static private boolean jj_3R_79()
 {
    if (jj_3R_84()) return true;
    return false;
  }

  static private boolean jj_3R_76()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_79()) {
    jj_scanpos = xsp;
    if (jj_3R_80()) return true;
    }
    return false;
  }

  static private boolean jj_3R_89()
 {
    if (jj_3R_93()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_94()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_51()
 {
    if (jj_3R_63()) return true;
    return false;
  }

  static private boolean jj_3R_63()
 {
    if (jj_scan_token(MOD)) return true;
    return false;
  }

  static private boolean jj_3R_86()
 {
    if (jj_3R_89()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_90()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_74()
 {
    if (jj_3R_66()) return true;
    return false;
  }

  static private boolean jj_3R_81()
 {
    if (jj_3R_86()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_87()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_36()
 {
    if (jj_scan_token(STAR)) return true;
    return false;
  }

  static private boolean jj_3R_50()
 {
    if (jj_3R_62()) return true;
    return false;
  }

  static private boolean jj_3R_77()
 {
    if (jj_3R_81()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_82()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_72()
 {
    if (jj_3R_67()) return true;
    return false;
  }

  static private boolean jj_3R_113()
 {
    if (jj_scan_token(MINUS_MINUS)) return true;
    return false;
  }

  static private boolean jj_3R_75()
 {
    if (jj_3R_77()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_78()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_70()
 {
    if (jj_3R_68()) return true;
    return false;
  }

  static private boolean jj_3R_49()
 {
    if (jj_3R_36()) return true;
    return false;
  }

  static private boolean jj_3R_73()
 {
    if (jj_3R_75()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_76()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_58()
 {
    if (jj_3R_59()) return true;
    return false;
  }

  static private boolean jj_3R_61()
 {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  static private boolean jj_3R_71()
 {
    if (jj_3R_73()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_74()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_48()
 {
    if (jj_3R_61()) return true;
    return false;
  }

  static private boolean jj_3R_46()
 {
    if (jj_3R_59()) return true;
    return false;
  }

  static private boolean jj_3R_112()
 {
    if (jj_scan_token(PLUS_PLUS)) return true;
    return false;
  }

  static private boolean jj_3R_69()
 {
    if (jj_3R_71()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_72()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_57()
 {
    if (jj_3R_69()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_70()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_47()
 {
    if (jj_3R_60()) return true;
    return false;
  }

  static private boolean jj_3R_44()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_47()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) {
    jj_scanpos = xsp;
    if (jj_3R_53()) {
    jj_scanpos = xsp;
    if (jj_3R_54()) {
    jj_scanpos = xsp;
    if (jj_3R_55()) {
    jj_scanpos = xsp;
    if (jj_3R_56()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_43()
 {
    if (jj_scan_token(66)) return true;
    return false;
  }

  static private boolean jj_3R_41()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_44()) jj_scanpos = xsp;
    if (jj_3R_37()) return true;
    return false;
  }

  static private boolean jj_3R_60()
 {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  static private boolean jj_3R_45()
 {
    if (jj_3R_57()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_58()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_39()
 {
    if (jj_scan_token(62)) return true;
    return false;
  }

  static private boolean jj_3R_42()
 {
    if (jj_3R_45()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_46()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_32()
 {
    if (jj_3R_37()) return true;
    return false;
  }

  static private boolean jj_3R_40()
 {
    if (jj_3R_42()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_43()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_38()
 {
    if (jj_3R_40()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_41()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_64()
 {
    if (jj_scan_token(RIGHT_SHIFT)) return true;
    return false;
  }

  static private boolean jj_3R_34()
 {
    if (jj_3R_38()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_39()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_27()
 {
    if (jj_3R_34()) return true;
    return false;
  }

  static private boolean jj_3R_65()
 {
    if (jj_scan_token(LEFT_SHIFT)) return true;
    return false;
  }

  static private boolean jj_3R_31()
 {
    if (jj_scan_token(60)) return true;
    return false;
  }

  static private boolean jj_3_1()
 {
    if (jj_3R_26()) return true;
    return false;
  }

  static private boolean jj_3R_67()
 {
    if (jj_scan_token(BIT_XOR)) return true;
    return false;
  }

  static private boolean jj_3_2()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_27()) jj_scanpos = xsp;
    if (jj_scan_token(SEMI_COLON)) return true;
    return false;
  }

  static private boolean jj_3R_68()
 {
    if (jj_scan_token(BIT_OR)) return true;
    return false;
  }

  static private boolean jj_3R_109()
 {
    if (jj_3R_66()) return true;
    return false;
  }

  static private boolean jj_3R_66()
 {
    if (jj_scan_token(BIT_AND)) return true;
    return false;
  }

  static private boolean jj_3R_29()
 {
    if (jj_3R_36()) return true;
    return false;
  }

  static private boolean jj_3R_108()
 {
    if (jj_3R_36()) return true;
    return false;
  }

  static private boolean jj_3R_124()
 {
    if (jj_scan_token(60)) return true;
    return false;
  }

  static private boolean jj_3R_115()
 {
    if (jj_scan_token(BIT_NOT)) return true;
    return false;
  }

  static private boolean jj_3R_33()
 {
    if (jj_scan_token(62)) return true;
    return false;
  }

  static private boolean jj_3R_28()
 {
    if (jj_3R_35()) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public SmallCCTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[68];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x8080,0x40000000,0x8080,0x40000000,0x0,0x0,0x0,0x0,0x40000000,0x0,0x0,0x0,0x0,0x8080,0x0,0x8080,0x7c080000,0x0,0x8080,0x0,0x8080,0x7f2af5a0,0x7f2af5a0,0x8080,0x7c080000,0x0,0x7c080000,0x7f2af5a0,0x7f2a7520,0x1004000,0x7c080000,0x7c080000,0x7c080000,0x40008080,0x7f2a7760,0x240,0x240,0x7c080000,0x1227520,0x0,0xf0000000,0xf0000000,0xf0000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x30000000,0x30000000,0xc0000000,0xc0000000,0x7c080000,0x7c080000,0xc000000,0xc000000,0x0,0x7f2af5a0,0x7f2af5a0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x40000,0x10000000,0x1000,0x40000000,0x0,0x40000,0x10000000,0x1000,0x40000000,0x20000,0x20000,0x20000,0x1e8032,0x10000000,0x0,0x40000000,0x20000,0x801e8032,0x801e8032,0x0,0x1e8032,0x10000000,0x1e8032,0x801e8032,0x801e8032,0x0,0x1e8032,0x1e8032,0x1e8032,0x20000,0x801e8032,0x0,0x0,0x1e8032,0x80020000,0x40000000,0x1c0f,0xc0f,0xc0f,0x0,0x80,0x80,0x4,0x8,0x2,0x6000,0x6000,0x100,0x1000,0x200,0x1000,0xc00,0xc00,0x0,0x0,0x1,0x1,0x32,0x32,0x10008000,0x10008000,0x1e8000,0x803e8032,0x803e8032,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[2];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public SmallCC(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public SmallCC(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new SmallCCTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 68; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 68; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public SmallCC(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new SmallCCTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 68; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 68; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public SmallCC(SmallCCTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 68; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(SmallCCTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 68; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[67];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 68; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 67; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 2; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

    }
