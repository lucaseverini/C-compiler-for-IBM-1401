/*
	small_c_preprocessor.jj

    Assignment #6 - CS153 - SJSU
	November-8-2014

	By Sean Papay, Matt Pleva, Luca Severini
*/

options 
{
STATIC = false;
}

PARSER_BEGIN(SmallCPP)

import java.io.*;
import java.util.*;

public class SmallCPP 
{
	static PreProcSymTab symTable = new PreProcSymTab();
	static int filePos = 0;
	static int lastCopiedLine = 0;
	static boolean ignore = false;
	static FileCopier rw = null;

    public static void main(String[] args) throws Exception
    {
		System.out.println("Small-C Pre-processor");

		String inFile = args[0];

		String outFile = preprocessFile(inFile);
		
		System.out.println();
		System.out.println("Final Preprocessed file: " + outFile);
 		System.out.println("Final Symbol table:\n" + symTable);
   }

	static String preprocessFile(String inFile) throws Exception
	{
		filePos = 0;
		ignore = false;
		rw = null;
		lastCopiedLine = 0;

		String outFile = inFile + ".preproc";

		File file = new File(inFile);

		System.out.println("Preprocessing file " + inFile + " size:" + file.length());

		Reader sr = new FileReader(file) 
		{
			private int[] lookahead = {-1, -1};

			public int read() throws IOException 
			{
				if (lookahead[0] >= 0) 
				{
					int ch = lookahead[0];
					lookahead[0] = lookahead[1];
					lookahead[1] = -1;
					return ch;
				}

				int ch = super.read();
				if (ch >= 0) 
				{
					filePos++;
				}

				// possible line continuation
				if (ch == '\\') 
				{
					lookahead[0] = super.read();
					if(lookahead[0] >= 0)
					{
						filePos++;
					}

					if (lookahead[0] == '\r')
					{
						lookahead[1] = super.read();
						if(lookahead[1] >= 0)
						{
							filePos++;
						}

						if (lookahead[1] != '\n') 
						{
							return ch;
						} 
						else
						{
							lookahead[0] = '\n';
						}
					}
					
					if (lookahead[0] == '\n')
					{
						lookahead[0] = lookahead[1] = -1;
						do 
						{
							ch = super.read();
							if(ch >= 0)
							{
								filePos++;
							}

							if (ch < 0) 
							{
								return ch;
							}
						} 
						while(Character.isWhitespace((char) ch));

						return ch;
					}
				} 
				else if (ch == '\r')
				{
					lookahead[0] = super.read();
					if(lookahead[0] >= 0)
					{
						filePos++;
					}

					if (lookahead[0] == '\n') 
					{
						lookahead[0] = lookahead[1] = -1;
						return '\n';
					}
				}
				
				return ch;
			}

			public int read(char[] cbuf, int offset, int length) throws IOException
			{
				int read = 0;
				while (read < length && offset + read < cbuf.length) 
				{
					int ch = read();
					if (ch < 0) 
					{
						break;
					}

					if(!ignore)
					{
						cbuf[offset + (read++)] = (char)ch;
					}
				}

				if (read == 0 && read < length) 
				{
					return -1;
				}

				return read;
			}
        };

		SmallCPP parser = new SmallCPP(sr);

		rw = new FileCopier(inFile, outFile);

        try 
		{
            parser.Tokens();

			rw.copyUntilEnd();
		
			System.out.println("### File preprocessed successfully. " + filePos + " char(s) read.");
        }
        catch (ParseException ex) 
		{
 			System.out.println("### Preprocessing error!! " + filePos + " char(s) read.");
 
			ex.printStackTrace();
		}

		rw.close();

		return outFile;
	}
}

PARSER_END(SmallCPP)

TOKEN : 
{
    <COMMENTS: <COMMENT> | <COMMENT_BLOCK>>
  | <COMMENT: "//"(~["\n", "\r"])*>
  | <COMMENT_BLOCK: "/*"(~["*"])* "*"(~["/"] (~["*"])* "*")* "/">
  | <STRINGS: <STRING_1> | <STRING_2>>
  |	<STATEMENTS: <RESERVED_WORDS_1> | <RESERVED_WORDS_2>>
  | <RESERVED_WORDS_1: ("#include" | "#ifdef" | "#ifndef" | "#else" | "#endif" | "#define" | "#undef")(~["\r", "\n"])*>
  | <RESERVED_WORDS_2: "#CODE" | "#STACK" | "#HEAP" | "#DATA">
  | <IDENTIFIER: (<IDENTIFIER_CHAR>)(<IDENTIFIER_CHAR> | ["0"-"9"])*>
  | <#IDENTIFIER_CHAR: ["A"-"Z", "a"-"z"] | <SYMBOLS>>
  | <STRING_1: "\""(~["\"", "\n"])*"\"">
  | <STRING_2: "<"(~["\"", "\n"])*">">
  | <ASM_BLOCK: "#asm"(~["*"] | ("*")* ~["/"])* "#endasm">
  | <VALUE: <DIGITS>>
  | <DIGITS: (["0"-"9"])+>
  | <WHITESPACE: (" " | "\t" | "\r" | "\n")+>
  | <NEWLINE: "\r\n" | "\r" | "\n">
  | <SYMBOLS: "~" | "!" | "@" | "%" | "^" | "&" | "*" | "-" | "_" | "+" | "=" | "|" | "/" | ":" | ";" |
						"?" | "<" | ">" | "." | "," | "'" | "\"" | "(" | ")" | "[" | "]" | "{" | "}" | "\\">
}

void Comment(StringBuffer buf) : {}
{
    <COMMENTS>
    {
		// System.out.println("Comment:");
		// System.out.println(token.image);
    }
}

void Statement(StringBuffer buf) : {}
{
    <STATEMENTS>
    {
		int beginLine = token.beginLine;
		int endLine = token.endLine;
		int beginCol = token.beginColumn;
		int endCol = token.endColumn;
		String position = String.format("%d:%d - %d:%d", beginLine, beginCol, endLine, endCol);

		String statement = null, name = null, value = null;
        StringTokenizer tokenizer = new StringTokenizer(token.image);

		statement = tokenizer.nextToken(" ").trim();

		if(tokenizer.hasMoreTokens())
		{
			name = tokenizer.nextToken(" ").trim();
		}

		if(tokenizer.hasMoreTokens())
		{
			value = tokenizer.nextToken("\r\n").trim();
		}
/*
		System.out.println("position: " + position);
		System.out.println("statement: " + statement);
		System.out.println("name: " + name);
		System.out.println("value: " + value);
*/
		if(statement.equals("#include"))
		{
			if(!ignore)
			{
				while((value = symTable.getValue(name)) != null)
				{
					name = value;
				}

				name = name.replaceAll("\"", "");
				name = name.replaceAll("<", "");
				name = name.replaceAll(">", "");

				System.out.println("##### INCLUDE " + name + " at " + position + " #####");

				rw.copyUntilLine(beginLine - 1);
				rw.jumpUntilLine(beginLine);

				lastCopiedLine = beginLine;
				
				try
				{
					boolean saved_ignore = ignore;
					FileCopier saved_rw = rw;
					int saved_lastCopiedLine = lastCopiedLine;

					String procFile = preprocessFile(name);

					ignore = saved_ignore;
					rw = saved_rw;
					lastCopiedLine = saved_lastCopiedLine;

					rw.copyFile(procFile);
				}
				catch(Exception ex) 
				{
					ex.printStackTrace();
				}
			}
		}
		else if(statement.equals("#define"))
		{
			if(!ignore)
			{
				symTable.setValue(name, value);

				rw.copyUntilLine(beginLine - 1);
				rw.jumpUntilLine(beginLine);
			}
		}
		else if(statement.equals("#undef"))
		{
			if(!ignore)
			{
				symTable.remove(name);

				rw.copyUntilLine(beginLine - 1);
				rw.jumpUntilLine(beginLine);
			}
		}
		else if(statement.equals("#ifdef"))
		{
			if(!ignore)
			{
				ignore = !symTable.isDefined(name);
				if(ignore)
				{
					System.out.println("##### BEGIN IGNORE at " + position + " #####");
				}

				rw.copyUntilLine(beginLine - 1);
				rw.jumpUntilLine(beginLine);
			}
		}
		else if(statement.equals("#ifndef"))
		{
			if(!ignore)
			{
				ignore = symTable.isDefined(name);
				if(ignore)
				{
					System.out.println("##### BEGIN IGNORE at " + position + " #####");
				}

				rw.copyUntilLine(beginLine - 1);
				rw.jumpUntilLine(beginLine);
			}
		}
		else if(statement.equals("#else"))
		{
			if(!ignore)
			{
				ignore = true;
				System.out.println("##### BEGIN IGNORE at " + position + " #####");

				rw.copyUntilLine(beginLine - 1);
				rw.jumpUntilLine(beginLine);
			}
			else
			{
				ignore = false;
				System.out.println("##### END IGNORE at " + position + " #####");

				rw.jumpUntilLine(beginLine);
			}
		}
		else if(statement.equals("#endif"))
		{
			if(ignore)
			{
				ignore = false;
				System.out.println("##### END IGNORE at " + position + " #####");

				rw.jumpUntilLine(beginLine);
			}
			else
			{
				rw.copyUntilLine(beginLine - 1);
				rw.jumpUntilLine(beginLine);
			}
		}

		// System.out.println();

		buf.append("Type: Reserved word").append(", Value: ").append(token.image).append("\n");
    }
}

void Identifier(StringBuffer buf) : {}
{
    <IDENTIFIER>
    {
		int beginLine = token.beginLine;
		int endLine = token.endLine;
		int beginCol = token.beginColumn;
		int endCol = token.endColumn;
		String position = String.format("%d:%d - %d:%d", beginLine, beginCol, endLine, endCol);

		if(!ignore)
		{
			String value = symTable.getValue(token.image);
			if(value != null)
			{
				System.out.println("##### REPLACE \"" + token.image + "\" with \"" + value + "\" at " + position + " #####");

				rw.copyUntilLine(beginLine - 1);
				rw.copyLineAndReplace(token.image, value);
			}
		}

        buf.append("Type: Identifier").append(", Value: ").append(token.image).append("\n");
    }
}

void String(StringBuffer buf) : {}
{
    <STRINGS>
    {
        buf.append("Type: String").append(", Value: ").append(token.image).append("\n");
    }
}

void Asm_block(StringBuffer buf) : {}
{
    <ASM_BLOCK>
    {
        buf.append("Type: AsmBlock").append(", Value: ").append(token.image).append("\n");
    }
}

void Value(StringBuffer buf) : {}
{
    <VALUE>
    {
        buf.append("Type: Number").append(", Value: ").append(token.image).append("\n");
    }
}

void Tokens() : { StringBuffer sb = new StringBuffer(); }
{
    (Statement(sb) | Identifier(sb) | String(sb) | Value(sb) | Asm_block(sb) | Comment(sb) | <SYMBOLS> | <WHITESPACE>)* <EOF>
    // { System.out.println("### Parsed tokens:\n" + sb.toString()); }
}
