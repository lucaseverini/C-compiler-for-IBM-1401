/* SmallCPP.java */
/* Generated By:JavaCC: Do not edit this line. SmallCPP.java */
 import java.io.*;
    public class SmallCPP implements SmallCPPConstants {
        public static void main(String[] args) throws Exception
        {
                                                File file = new File(args[0]);
                                                /*
							line continuations and newline encoding are hard to keep
							track of at tokenization time, so we'll handle them
							directly in the reader
						*/
            Reader sr = new FileReader(file) {
                                                        private int[] lookahead = {-1, -1};
                                                        public int read() throws IOException {
                                                                if (lookahead[0] >= 0) {
                                                                        int ch = lookahead[0];
                                                                        lookahead[0] = lookahead[1];
                                                                        lookahead[1] = -1;
                                                                        return ch;
                                                                }
                                                                int ch = super.read();
                                                                //possible line continuation
                                                                if (ch == '\u005c\u005c') {
                                                                        lookahead[0] = super.read();

                                                                        if (lookahead[0] == '\u005cr') {
                                                                                //the user is using windows, what a loser :P
                                                                                lookahead[1] = super.read();
                                                                                if (lookahead[1] != '\u005cn') {
                                                                                        //carriage return with no line feed, what's going on?
                                            // maybe we are printing a bold character or an underline
                                                                                        return ch;
                                                                                } else {
                                                                                        lookahead[0] = '\u005cn';
                                                                                }
                                                                        }
                                                                        if (lookahead[0] == '\u005cn') {
                                                                                lookahead[0] = lookahead[1] = -1;
                                                                                do {
                                                                                        ch = super.read();
                                                                                        if (ch < 0) return ch;
                                                                                } while(Character.isWhitespace((char) ch));
                                                                                return ch;
                                                                        }
                                                                } else if (ch == '\u005cr') {
                                                                        lookahead[0] = super.read();
                                                                        if (lookahead[0] == '\u005cn') {
                                                                                lookahead[0] = lookahead[1] = -1;
                                                                                return '\u005cn';
                                                                        }
                                                                }
                                                                return ch;
                                                        }

                                                        public int read(char[] cbuf, int offset, int length) throws IOException{
                                                                int read = 0;
                                                                while (read < length && offset + read < cbuf.length) {
                                                                        int ch = read();
                                                                        if (ch < 0) break;
                                                                        cbuf[offset + (read++)] = (char) ch;
                                                                }
                                                                if (read == 0 && read < length) return -1;
                                                                return read;
                                                        }
            };
            SmallCPP parser = new SmallCPP(sr);

            try {
                parser.Tokens();
            }
                catch (ParseException ex) {
                ex.printStackTrace();
            }
        }

  static final public void Reserved_words(StringBuffer buf) throws ParseException {
    jj_consume_token(RESERVED_WORDS);
buf.append("Type: Reserved word").append(", Value: ").append(token.image).append("\u005cn");
  }

  static final public void Identifier(StringBuffer buf) throws ParseException {
    jj_consume_token(IDENTIFIER);
buf.append("Type: Identifier").append(", Value: ").append(token.image).append("\u005cn");
  }

  static final public void Number(StringBuffer buf) throws ParseException {
    jj_consume_token(NUMBER);
buf.append("Type: Number").append(", Value: ").append(token.image).append("\u005cn");
  }

  static final public void Symbol(StringBuffer buf) throws ParseException {
    jj_consume_token(SYMBOL);
buf.append("Type: Symbol").append(", Value: ").append(token.image).append("\u005cn");
  }

  static final public void Character(StringBuffer buf) throws ParseException {
    jj_consume_token(CHARACTER);
buf.append("Type: Character").append(", Value: ").append(token.image).append("\u005cn");
  }

  static final public void String(StringBuffer buf) throws ParseException {
    jj_consume_token(STRING_LIT);
buf.append("Type: String").append(", Value: ").append(token.image).append("\u005cn");
  }

  static final public void Ops(StringBuffer buf) throws ParseException {
    jj_consume_token(OPS);
buf.append("Type: Operator: ").append(token.image).append("\u005cn");
  }

  static final public void Term(StringBuffer buf) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NUMBER:{
      Number(buf);
      break;
      }
    case IDENTIFIER:{
      Identifier(buf);
      break;
      }
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Expression(StringBuffer buf) throws ParseException {
    Term(buf);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OPS:{
        ;
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
      Ops(buf);
      Term(buf);
    }
  }

  static final public void CompoundExpression(StringBuffer buf) throws ParseException {
    label_2:
    while (true) {
      Symbol(buf);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SYMBOL:{
        ;
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENTIFIER:
    case NUMBER:{
      Expression(buf);
      break;
      }
    case OPS:{
      Ops(buf);
      Term(buf);
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SYMBOL:{
        ;
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        break label_3;
      }
      Symbol(buf);
    }
  }

  static final public void Assignment(StringBuffer buf) throws ParseException {
    Identifier(buf);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ASSIGNMENT:{
      jj_consume_token(ASSIGNMENT);
      Expression(buf);
      break;
      }
    case 23:
    case 24:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 23:{
        jj_consume_token(23);
        break;
        }
      case 24:{
        jj_consume_token(24);
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(END_STATEMENT);
  }

  static final public void SimpleControl(StringBuffer buf) throws ParseException {
    CompoundExpression(buf);
    jj_consume_token(WHITESPACE);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFIER:{
        ;
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        break label_4;
      }
      Assignment(buf);
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SYMBOL:{
      Symbol(buf);
      break;
      }
    default:
      jj_la1[8] = jj_gen;
      ;
    }
    jj_consume_token(WHITESPACE);
  }

  static final public void Statement(StringBuffer buf) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case RESERVED_WORDS:{
      Reserved_words(buf);
      break;
      }
    default:
      jj_la1[9] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENTIFIER:{
      Assignment(buf);
      break;
      }
    case SYMBOL:{
      SimpleControl(buf);
      break;
      }
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Tokens() throws ParseException {StringBuffer sb = new StringBuffer();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case RESERVED_WORDS:
      case IDENTIFIER:
      case STRING_LIT:
      case CHARACTER:
      case COMMENT:
      case WHITESPACE:
      case SYMBOL:{
        ;
        break;
        }
      default:
        jj_la1[11] = jj_gen;
        break label_5;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case RESERVED_WORDS:
      case IDENTIFIER:
      case SYMBOL:{
        Statement(sb);
        break;
        }
      case STRING_LIT:{
        String(sb);
        break;
        }
      case CHARACTER:{
        Character(sb);
        break;
        }
      case WHITESPACE:{
        jj_consume_token(WHITESPACE);
        break;
        }
      case COMMENT:{
        jj_consume_token(COMMENT);
        break;
        }
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(0);
System.out.println("Parsed tokens\u005cn" + sb.toString());
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public SmallCPPTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[13];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x30,0x10000,0x400000,0x10030,0x400000,0x1800000,0x1900000,0x10,0x400000,0x8,0x400010,0x4005d8,0x4005d8,};
   }

  /** Constructor with InputStream. */
  public SmallCPP(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public SmallCPP(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new SmallCPPTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public SmallCPP(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new SmallCPPTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public SmallCPP(SmallCPPTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(SmallCPPTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[25];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 13; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 25; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

    }
