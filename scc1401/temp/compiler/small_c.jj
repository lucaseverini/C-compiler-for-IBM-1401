/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. small_c.jj */
/*@egen*//*
	small_c.jj

    Assignment #6 - CS153 - SJSU
	November-8-2014

	By Sean Papay, Matt Pleva, Luca Severini
*/

options
{
	DEBUG_PARSER=true;
	LOOKAHEAD = 99999;
}

PARSER_BEGIN(SmallCC)

package compiler;

import preprocessor.*;
import java.io.*;

public class SmallCC/*@bgen(jjtree)*/implements SmallCCTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected static JJTSmallCCState jjtree = new JJTSmallCCState();

/*@egen*/
  public static void main(String args[]) throws Exception
  {
    compile(args[0]);
  }

  public static void compile(String fileName) throws Exception
  {
    File file = new File(fileName);
    Reader sr = new FileReader(file);
    /*
      line continuations and newline encoding are hard to keep
      track of at tokenization time, so we'll handle them
      directly in the reader
    */
    /*
    Reader sr = new FileReader(file) {
      private int[] lookahead = {-1, -1};
      public int read() throws IOException {
        if (lookahead[0] >= 0) {
          int ch = lookahead[0];
          lookahead[0] = lookahead[1];
          lookahead[1] = -1;
          return ch;
        }
        int ch = super.read();
        //possible line continuation
        if (ch == '\\') {
          lookahead[0] = super.read();

          if (lookahead[0] == '\r') {
            //the user is using windows, what a loser :P
            lookahead[1] = super.read();
            if (lookahead[1] != '\n') {
              //carriage return with no line feed, what's going on?
                                    // maybe we are printing a bold character or an underline
              return ch;
            } else {
              lookahead[0] = '\n';
            }
          }
          if (lookahead[0] == '\n') {
            lookahead[0] = lookahead[1] = -1;
            do {
              ch = super.read();
              if (ch < 0) return ch;
            } while(Character.isWhitespace((char) ch));
            return ch;
          }
        } else if (ch == '\r') {
          lookahead[0] = super.read();
          if (lookahead[0] == '\n') {
            lookahead[0] = lookahead[1] = -1;
            return '\n';
          }
        }
        return ch;
      }

      public int read(char[] cbuf, int offset, int length) throws IOException{
        int read = 0;
        while (read < length && offset + read < cbuf.length) {
          int ch = read();
          if (ch < 0) break;
          cbuf[offset + (read++)] = (char) ch;
        }
        if (read == 0 && read < length) return -1;
        return read;
      }
    };
    */
    SmallCC parser = new SmallCC(sr);
    SimpleNode program = parser.program();
    printTree(program);
  }
  
  public static void printTree(SimpleNode node) {
    printTree(node, 0);
  }
  
  public static void printTree(SimpleNode node, int level) {
    for (int i = 0; i < level; ++i) System.out.print("  ");
    System.out.println(node);
    int numChildren = node.jjtGetNumChildren();
    for(int i = 0; i <  numChildren; ++i) {
      printTree((SimpleNode)node.jjtGetChild(i), level + 1);
    }
  }
  
}


PARSER_END(SmallCC)

SKIP : {
    " "
  | "\t"
  | "\n"
  | "\r\n"
}

TOKEN : {
    <BREAK : "break">
  | <CASE: "case">
  | <CHAR: "char">
  | <CONTINUE: "continue">
  | <_DEFAULT: "default">
  | <DO: "do">
  | <ELSE: "else">
  | <FOR: "for">
  | <GOTO: "goto">
  | <IF: "if">
  | <INT: "int">
  | <LONG: "long">
  | <RETURN: "return">
  | <SHORT: "short">
  | <SIZEOF: "sizeof">
  | <STATIC: "static">
  | <SWITCH: "switch">
  | <TYPEDEF: "typedef">
  | <UNSIGNED: "unsigned">
  | <WHILE: "while">
  | <SEMI_COLON: ";">
  | <PLUS_PLUS: "++">
  | <MINUS_MINUS: "--">
  | <PLUS: "+">
  | <MINUS: "-">
  | <STAR: "*">
  | <DIVIDE: "/">
  | <MOD: "%">
  | <BIT_AND: "&">
  | <BIT_OR: "|">
  | <BIT_XOR: "^">
  | <BIT_NOT: "~">
  | <BOOLEAN_NOT: "!">
  | <BOOLEAN_AND: "&&">
  | <BOOLEAN_OR: "||">
  | <GREATER_THAN: ">">
  | <LESS_THAN: "<">
  | <LEFT_SHIFT: "<<">
  | <RIGHT_SHIFT: ">>">
  | <EQUALS: "=">
  | <EQUALS_EQUALS: "==">
  | <NOT_EQUALS: "!=">
  | <L_PAREN: "(">
  | <R_PAREN: ")">

  | <IDENTIFIER : (<IDENTIFIER_CHAR>)(<IDENTIFIER_CHAR> | ["0"-"9","_"])*>
  | <NUMBER : (<DIGIT>)+>
  | <STRING_LIT : "\"" (~["\"", "\n", "\\"] | ("\\" ~[]))* "\"">
  | <CHARACTER_CONST  : "\'" (~["\'", "\n", "\\"] | ("\\" ~[]))* "\'">
  | <COMMENT: <LINE_COMMENT> | <MULTI_LINE_COMMENT>>
  | <LINE_COMMENT : "//" (~["\n"])* <NEWLINE> >
  | <MULTI_LINE_COMMENT: "/*" (~["*"] | ("*")* ~["/"])* "*/">
  | <NEWLINE : "\r\n" | "\n" >
  | <#NOT_NEWLINE : ~["\n","\r"]>
  | <#IDENTIFIER_CHAR : ["A"-"Z","a"-"z","_"]>
  | <#DIGIT : ["0"-"9"]>
 }

/** Main production. */

SimpleNode program()  : {/*@bgen(jjtree) program */
  SimpleNode jjtn000 = new SimpleNode(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) program */
  try {
/*@egen*/
  (VariableDeclaration() | FunctionDeclaration() | FunctionDefinition())*/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {return jjtn000;}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void BareType()           : {/*@bgen(jjtree) bareType */
  SimpleNode jjtn000 = new SimpleNode(JJTBARETYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) bareType */
  try {
/*@egen*/
  "char" | "int"/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Type(): {/*@bgen(jjtree) Type */
  SimpleNode jjtn000 = new SimpleNode(JJTTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Type */
  try {
/*@egen*/
  BareType() (Star())*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void VariableDeclaration()                      : {/*@bgen(jjtree) variableDeclaration */
  SimpleNode jjtn000 = new SimpleNode(JJTVARIABLEDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) variableDeclaration */
        try {
/*@egen*/
  // question is **********x a valid type on its own?
  // answer: it is in global scope, but not in local scope.  C is scary, isn't it?
  
  //we decided that if we couldn't write our parser for lisp, we would write it in lisp.
	((BareType())?)
  (/*@bgen(jjtree) vars */
    {
      SimpleNode jjtn009 = new SimpleNode(JJTVARS);
      boolean jjtc009 = true;
      jjtree.openNodeScope(jjtn009);
    }
    try {
/*@egen*/
    (
      (/*@bgen(jjtree) initialization */
        {
          SimpleNode jjtn004 = new SimpleNode(JJTINITIALIZATION);
          boolean jjtc004 = true;
          jjtree.openNodeScope(jjtn004);
        }
        try {
/*@egen*/
        ((/*@bgen(jjtree) suffixedVariable */
          {
            SimpleNode jjtn002 = new SimpleNode(JJTSUFFIXEDVARIABLE);
            boolean jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
          }
          try {
/*@egen*/(((/*@bgen(jjtree) prefixedVariable */
             {
               SimpleNode jjtn001 = new SimpleNode(JJTPREFIXEDVARIABLE);
               boolean jjtc001 = true;
               jjtree.openNodeScope(jjtn001);
             }
             try {
/*@egen*/((Star())* Identifier())/*@bgen(jjtree)*/
             } catch (Throwable jjte001) {
               if (jjtc001) {
                 jjtree.clearNodeScope(jjtn001);
                 jjtc001 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte001 instanceof RuntimeException) {
                 throw (RuntimeException)jjte001;
               }
               if (jjte001 instanceof ParseException) {
                 throw (ParseException)jjte001;
               }
               throw (Error)jjte001;
             } finally {
               if (jjtc001) {
                 jjtree.closeNodeScope(jjtn001, true);
               }
             }
/*@egen*/                  ) ("[" (Expression())? "]")?))/*@bgen(jjtree)*/
          } catch (Throwable jjte002) {
            if (jjtc002) {
              jjtree.clearNodeScope(jjtn002);
              jjtc002 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte002 instanceof RuntimeException) {
              throw (RuntimeException)jjte002;
            }
            if (jjte002 instanceof ParseException) {
              throw (ParseException)jjte002;
            }
            throw (Error)jjte002;
          } finally {
            if (jjtc002) {
              jjtree.closeNodeScope(jjtn002, true);
            }
          }
/*@egen*/                  ) (("="/*@bgen(jjtree) value */
                                                                                                               {
                                                                                                                 SimpleNode jjtn003 = new SimpleNode(JJTVALUE);
                                                                                                                 boolean jjtc003 = true;
                                                                                                                 jjtree.openNodeScope(jjtn003);
                                                                                                               }
                                                                                                               try {
/*@egen*/ AssignmentExpression()/*@bgen(jjtree)*/
                                                                                                               } catch (Throwable jjte003) {
                                                                                                                 if (jjtc003) {
                                                                                                                   jjtree.clearNodeScope(jjtn003);
                                                                                                                   jjtc003 = false;
                                                                                                                 } else {
                                                                                                                   jjtree.popNode();
                                                                                                                 }
                                                                                                                 if (jjte003 instanceof RuntimeException) {
                                                                                                                   throw (RuntimeException)jjte003;
                                                                                                                 }
                                                                                                                 if (jjte003 instanceof ParseException) {
                                                                                                                   throw (ParseException)jjte003;
                                                                                                                 }
                                                                                                                 throw (Error)jjte003;
                                                                                                               } finally {
                                                                                                                 if (jjtc003) {
                                                                                                                   jjtree.closeNodeScope(jjtn003, true);
                                                                                                                 }
                                                                                                               }
/*@egen*/       )?))/*@bgen(jjtree)*/
        } catch (Throwable jjte004) {
          if (jjtc004) {
            jjtree.clearNodeScope(jjtn004);
            jjtc004 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte004 instanceof RuntimeException) {
            throw (RuntimeException)jjte004;
          }
          if (jjte004 instanceof ParseException) {
            throw (ParseException)jjte004;
          }
          throw (Error)jjte004;
        } finally {
          if (jjtc004) {
            jjtree.closeNodeScope(jjtn004, true);
          }
        }
/*@egen*/                
      )
      (
        (","/*@bgen(jjtree) initialization */
          {
            SimpleNode jjtn008 = new SimpleNode(JJTINITIALIZATION);
            boolean jjtc008 = true;
            jjtree.openNodeScope(jjtn008);
          }
          try {
/*@egen*/ 
          ((/*@bgen(jjtree) suffixedVariable */
            {
              SimpleNode jjtn006 = new SimpleNode(JJTSUFFIXEDVARIABLE);
              boolean jjtc006 = true;
              jjtree.openNodeScope(jjtn006);
            }
            try {
/*@egen*/(((/*@bgen(jjtree) prefixedVariable */
               {
                 SimpleNode jjtn005 = new SimpleNode(JJTPREFIXEDVARIABLE);
                 boolean jjtc005 = true;
                 jjtree.openNodeScope(jjtn005);
               }
               try {
/*@egen*/((Star())* Identifier())/*@bgen(jjtree)*/
               } catch (Throwable jjte005) {
                 if (jjtc005) {
                   jjtree.clearNodeScope(jjtn005);
                   jjtc005 = false;
                 } else {
                   jjtree.popNode();
                 }
                 if (jjte005 instanceof RuntimeException) {
                   throw (RuntimeException)jjte005;
                 }
                 if (jjte005 instanceof ParseException) {
                   throw (ParseException)jjte005;
                 }
                 throw (Error)jjte005;
               } finally {
                 if (jjtc005) {
                   jjtree.closeNodeScope(jjtn005, true);
                 }
               }
/*@egen*/                  ) ("[" (Expression())? "]")?))/*@bgen(jjtree)*/
            } catch (Throwable jjte006) {
              if (jjtc006) {
                jjtree.clearNodeScope(jjtn006);
                jjtc006 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte006 instanceof RuntimeException) {
                throw (RuntimeException)jjte006;
              }
              if (jjte006 instanceof ParseException) {
                throw (ParseException)jjte006;
              }
              throw (Error)jjte006;
            } finally {
              if (jjtc006) {
                jjtree.closeNodeScope(jjtn006, true);
              }
            }
/*@egen*/                  ) (/*@bgen(jjtree) value */
                                                                                                            {
                                                                                                              SimpleNode jjtn007 = new SimpleNode(JJTVALUE);
                                                                                                              boolean jjtc007 = true;
                                                                                                              jjtree.openNodeScope(jjtn007);
                                                                                                            }
                                                                                                            try {
/*@egen*/("=" AssignmentExpression())/*@bgen(jjtree)*/
                                                                                                            } catch (Throwable jjte007) {
                                                                                                              if (jjtc007) {
                                                                                                                jjtree.clearNodeScope(jjtn007);
                                                                                                                jjtc007 = false;
                                                                                                              } else {
                                                                                                                jjtree.popNode();
                                                                                                              }
                                                                                                              if (jjte007 instanceof RuntimeException) {
                                                                                                                throw (RuntimeException)jjte007;
                                                                                                              }
                                                                                                              if (jjte007 instanceof ParseException) {
                                                                                                                throw (ParseException)jjte007;
                                                                                                              }
                                                                                                              throw (Error)jjte007;
                                                                                                            } finally {
                                                                                                              if (jjtc007) {
                                                                                                                jjtree.closeNodeScope(jjtn007, true);
                                                                                                              }
                                                                                                            }
/*@egen*/       )?)/*@bgen(jjtree)*/
          } catch (Throwable jjte008) {
            if (jjtc008) {
              jjtree.clearNodeScope(jjtn008);
              jjtc008 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte008 instanceof RuntimeException) {
              throw (RuntimeException)jjte008;
            }
            if (jjte008 instanceof ParseException) {
              throw (ParseException)jjte008;
            }
            throw (Error)jjte008;
          } finally {
            if (jjtc008) {
              jjtree.closeNodeScope(jjtn008, true);
            }
          }
/*@egen*/                
        )*
      )
    )/*@bgen(jjtree)*/
    } catch (Throwable jjte009) {
      if (jjtc009) {
        jjtree.clearNodeScope(jjtn009);
        jjtc009 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte009 instanceof RuntimeException) {
        throw (RuntimeException)jjte009;
      }
      if (jjte009 instanceof ParseException) {
        throw (ParseException)jjte009;
      }
      throw (Error)jjte009;
    } finally {
      if (jjtc009) {
        jjtree.closeNodeScope(jjtn009, true);
      }
    }
/*@egen*/      
  ) ";"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void FunctionDeclaration() : {/*@bgen(jjtree) FunctionDeclaration */
  SimpleNode jjtn000 = new SimpleNode(JJTFUNCTIONDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FunctionDeclaration */
    try {
/*@egen*/
    Type() Identifier() "(" (FunctionDeclarationParameter() ("," FunctionDeclarationParameter())*)? ")" ";"/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void FunctionDeclarationParameter(): {/*@bgen(jjtree) FunctionDeclarationParameter */
  SimpleNode jjtn000 = new SimpleNode(JJTFUNCTIONDECLARATIONPARAMETER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FunctionDeclarationParameter */
    try {
/*@egen*/
    (Type() (Identifier())? | Identifier()) ("[" (Expression())? "]")?/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void FunctionDefinition() : {/*@bgen(jjtree) FunctionDefinition */
  SimpleNode jjtn000 = new SimpleNode(JJTFUNCTIONDEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FunctionDefinition */
    try {
/*@egen*/
    (Type())? Identifier() "(" (FunctionDefinitionParameter() ("," FunctionDefinitionParameter())*)? ")"
        "{" (VariableDeclaration() | Statement() )* "}"/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void FunctionDefinitionParameter(): {/*@bgen(jjtree) FunctionDefinitionParameter */
  SimpleNode jjtn000 = new SimpleNode(JJTFUNCTIONDEFINITIONPARAMETER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FunctionDefinitionParameter */
    try {
/*@egen*/
    (Type())? Identifier() ("[" (Expression())? "]")?/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Statement(): {/*@bgen(jjtree) Statement */
  SimpleNode jjtn000 = new SimpleNode(JJTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Statement */
    try {
/*@egen*/
    (Expression())? ";"/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/ { System.out.println(" found statement"); }
    | ("{" (VariableDeclaration() | Statement())* "}")
    | ("if" | "while") "(" Expression() ")" Statement()/*@bgen(jjtree)*/
                                                        {
                                                          jjtree.closeNodeScope(jjtn000, true);
                                                          jjtc000 = false;
                                                        }
/*@egen*/ {System.out.println(" found if statement");}
    | "for" "(" (Expression())? ";" (Expression())? ";" (Expression())? ")" Statement()/*@bgen(jjtree)*/
                                                                                        {
                                                                                          jjtree.closeNodeScope(jjtn000, true);
                                                                                          jjtc000 = false;
                                                                                        }
/*@egen*/ { System.out.println(" found for statement"); }
    | "do" Statement() "while" "(" Expression() ")" ";"/*@bgen(jjtree)*/
                                                        {
                                                          jjtree.closeNodeScope(jjtn000, true);
                                                          jjtc000 = false;
                                                        }
/*@egen*/ {System.out.println(" found do while statement");}
    | "switch" "(" Expression() ")" "{" (VariableDeclaration())* (("case" Expression() ":" | "default" ":")? Statement())* "}"/*@bgen(jjtree)*/
                                                                                                                               {
                                                                                                                                 jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                 jjtc000 = false;
                                                                                                                               }
/*@egen*/ {
            System.out.println(" found switch statement");
        }
    | "break" ";"/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                  }
/*@egen*/ {System.out.println(" found break statement");}
    | "continue" ";"/*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                     }
/*@egen*/ {System.out.println(" found continue statement");}
    | "return" (Expression())? ";"/*@bgen(jjtree)*/
                                   {
                                     jjtree.closeNodeScope(jjtn000, true);
                                     jjtc000 = false;
                                   }
/*@egen*/ {System.out.println(" found return statement");}
    | Identifier() ":" Statement()/*@bgen(jjtree)*/
                                   {
                                     jjtree.closeNodeScope(jjtn000, true);
                                     jjtc000 = false;
                                   }
/*@egen*/ {System.out.println(" found label statement");}
    | "goto" Identifier() ";"/*@bgen(jjtree)*/
                              {
                                jjtree.closeNodeScope(jjtn000, true);
                                jjtc000 = false;
                              }
/*@egen*/ { System.out.println(" found goto statement"); }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/** Left-to-right*/
void Expression() : {/*@bgen(jjtree) Expression */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Expression */
    try {
/*@egen*/
    AssignmentExpression() ("," AssignmentExpression())*/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        System.out.println(" found expression");
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
/** Right-to-left */
void AssignmentExpression() : {/*@bgen(jjtree) AssignmentExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTASSIGNMENTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) AssignmentExpression */
    try {
/*@egen*/
    TernaryExpression() ((Plus() | Minus() | Star() | Divide() | Mod() | Right_Shift() | Left_Shift() | Bit_And() | Bit_Xor() | Bit_Or())? Equals() TernaryExpression())*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void TernaryExpression(): {/*@bgen(jjtree) TernaryExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTTERNARYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) TernaryExpression */
    try {
/*@egen*/
    OrExpression() ("?" Expression() ":" TernaryExpression())?/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/** left-to-right*/

void OrExpression(): {/*@bgen(jjtree) OrExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTOREXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) OrExpression */
    try {
/*@egen*/
    AndExpression() (Boolean_Or() AndExpression())*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void AndExpression(): {/*@bgen(jjtree) AndExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTANDEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) AndExpression */
    try {
/*@egen*/
    BitOrExpression() (Boolean_Or() BitOrExpression())*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void BitOrExpression(): {/*@bgen(jjtree) BitOrExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTBITOREXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) BitOrExpression */
    try {
/*@egen*/
    BitXorExpression() (Bit_Or() BitXorExpression())*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void BitXorExpression(): {/*@bgen(jjtree) BitXorExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTBITXOREXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) BitXorExpression */
    try {
/*@egen*/
    BitAndExpression() (Bit_Xor() BitAndExpression())*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/

}

void BitAndExpression(): {/*@bgen(jjtree) BitAndExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTBITANDEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) BitAndExpression */
    try {
/*@egen*/
    EqualityExpression() (Bit_And() EqualityExpression())*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void EqualityExpression(): {/*@bgen(jjtree) EqualityExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTEQUALITYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) EqualityExpression */
    try {
/*@egen*/
    GreaterThanExpression() ((Equals_Equals() | Not_Equals()) GreaterThanExpression())*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void GreaterThanExpression(): {/*@bgen(jjtree) GreaterThanExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTGREATERTHANEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) GreaterThanExpression */
    try {
/*@egen*/
    LessThanExpression() (Greater_Than() (Equals())? LessThanExpression())*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void LessThanExpression(): {/*@bgen(jjtree) LessThanExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTLESSTHANEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) LessThanExpression */
    try {
/*@egen*/
    BitshiftExpression() (Less_Than() (Equals())? BitshiftExpression())*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void BitshiftExpression(): {/*@bgen(jjtree) BitshiftExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTBITSHIFTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) BitshiftExpression */
    try {
/*@egen*/
    AdditiveExpression() ((Right_Shift() | Left_Shift()) AdditiveExpression())*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void AdditiveExpression(): {/*@bgen(jjtree) AdditiveExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTADDITIVEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) AdditiveExpression */
    try {
/*@egen*/
    MultiplicativeExpression() ((Plus() | Minus()) MultiplicativeExpression())*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void MultiplicativeExpression(): {/*@bgen(jjtree) MultiplicativeExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTMULTIPLICATIVEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) MultiplicativeExpression */
    try {
/*@egen*/
    PrefixExpression() ((Star() | Divide() | Mod()) PrefixExpression())*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void PrefixExpression(): {/*@bgen(jjtree) PrefixExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTPREFIXEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) PrefixExpression */
    try {
/*@egen*/
    // issue on the cast. It breaks if((x&y) == 1) {y++;} because it captures the second "(" and thinks type is next
    // TODO add casting back: "(" Type() ")"
    ( Plus_Plus() | Minus_Minus() | Plus() | Minus() | Boolean_Not() | Bit_Not() | Star() | Bit_And() | "sizeof" | "(" Type() ")")* SuffixExpression()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void SuffixExpression(): {/*@bgen(jjtree) SuffixExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTSUFFIXEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SuffixExpression */
    try {
/*@egen*/
    AtomicExpression() (Plus_Plus() | Minus_Minus() | "(" Expression() ")" | "[" Expression() "]")?/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void AtomicExpression(): {/*@bgen(jjtree) AtomicExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTATOMICEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) AtomicExpression */
    try {
/*@egen*/
    Identifier()
    | Number()
    | StringLiteral()
    | CharacterConstant()
    | "(" Expression() ")"/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Identifier()             : {/*@bgen(jjtree) identifier */
  SimpleNode jjtn000 = new SimpleNode(JJTIDENTIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) identifier */
    try {
/*@egen*/
    <IDENTIFIER>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        System.out.print(token.image + " ");
        if (token.image.equals("main")) System.out.print("found main\n");
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void CharacterConstant() : {/*@bgen(jjtree) CharacterConstant */
  SimpleNode jjtn000 = new SimpleNode(JJTCHARACTERCONSTANT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) CharacterConstant */
    try {
/*@egen*/
    <CHARACTER_CONST>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        System.out.print(token.image);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Number() : {/*@bgen(jjtree) Number */
  SimpleNode jjtn000 = new SimpleNode(JJTNUMBER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Number */
    try {
/*@egen*/
    <NUMBER>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        System.out.print(token.image);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void StringLiteral() : {/*@bgen(jjtree) StringLiteral */
  SimpleNode jjtn000 = new SimpleNode(JJTSTRINGLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) StringLiteral */
    try {
/*@egen*/
    <STRING_LIT>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        System.out.print(token.image);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Boolean_Not() : {/*@bgen(jjtree) Boolean_Not */
  SimpleNode jjtn000 = new SimpleNode(JJTBOOLEAN_NOT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Boolean_Not */
    try {
/*@egen*/
    <BOOLEAN_NOT>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        System.out.print("! ");
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Boolean_And() : {/*@bgen(jjtree) Boolean_And */
  SimpleNode jjtn000 = new SimpleNode(JJTBOOLEAN_AND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Boolean_And */
    try {
/*@egen*/
    <BOOLEAN_AND>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        System.out.print("&& ");
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Boolean_Or() : {/*@bgen(jjtree) Boolean_Or */
  SimpleNode jjtn000 = new SimpleNode(JJTBOOLEAN_OR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Boolean_Or */
    try {
/*@egen*/
    <BOOLEAN_OR>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        System.out.print("|| ");
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Bit_Not() : {/*@bgen(jjtree) Bit_Not */
  SimpleNode jjtn000 = new SimpleNode(JJTBIT_NOT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Bit_Not */
    try {
/*@egen*/
    <BIT_NOT>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        System.out.print("~ ");
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Bit_And() : {/*@bgen(jjtree) Bit_And */
  SimpleNode jjtn000 = new SimpleNode(JJTBIT_AND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Bit_And */
    try {
/*@egen*/
    <BIT_AND>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        System.out.print("& ");
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Bit_Or() : {/*@bgen(jjtree) Bit_Or */
  SimpleNode jjtn000 = new SimpleNode(JJTBIT_OR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Bit_Or */
    try {
/*@egen*/
    <BIT_OR>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        System.out.print("| ");
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Bit_Xor() : {/*@bgen(jjtree) Bit_Xor */
  SimpleNode jjtn000 = new SimpleNode(JJTBIT_XOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Bit_Xor */
    try {
/*@egen*/
    <BIT_XOR>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        System.out.print("^ ");
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Left_Shift() : {/*@bgen(jjtree) Left_Shift */
  SimpleNode jjtn000 = new SimpleNode(JJTLEFT_SHIFT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Left_Shift */
    try {
/*@egen*/
    <LEFT_SHIFT>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        System.out.print("<< ");
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Right_Shift() : {/*@bgen(jjtree) Right_Shift */
  SimpleNode jjtn000 = new SimpleNode(JJTRIGHT_SHIFT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Right_Shift */
    try {
/*@egen*/
    <RIGHT_SHIFT>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        System.out.print(">> ");
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void R_Paren() : {/*@bgen(jjtree) R_Paren */
  SimpleNode jjtn000 = new SimpleNode(JJTR_PAREN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) R_Paren */
    try {
/*@egen*/
    <R_PAREN>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        System.out.print(") ");
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void L_Paren() : {/*@bgen(jjtree) L_Paren */
  SimpleNode jjtn000 = new SimpleNode(JJTL_PAREN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) L_Paren */
    try {
/*@egen*/
    <L_PAREN>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        System.out.print("( ");
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Plus() : {/*@bgen(jjtree) Plus */
  SimpleNode jjtn000 = new SimpleNode(JJTPLUS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Plus */
    try {
/*@egen*/
    <PLUS>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        System.out.print("+ ");
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Plus_Plus() : {/*@bgen(jjtree) Plus_Plus */
  SimpleNode jjtn000 = new SimpleNode(JJTPLUS_PLUS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Plus_Plus */
    try {
/*@egen*/
    <PLUS_PLUS>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        System.out.print("++ ");
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Minus() : {/*@bgen(jjtree) Minus */
  SimpleNode jjtn000 = new SimpleNode(JJTMINUS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Minus */
    try {
/*@egen*/
    <MINUS>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        System.out.print("- ");
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Minus_Minus() : {/*@bgen(jjtree) Minus_Minus */
  SimpleNode jjtn000 = new SimpleNode(JJTMINUS_MINUS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Minus_Minus */
    try {
/*@egen*/
    <MINUS_MINUS>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        System.out.print("-- ");
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Star()       : {/*@bgen(jjtree) star */
  SimpleNode jjtn000 = new SimpleNode(JJTSTAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) star */
    try {
/*@egen*/
    <STAR>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        System.out.print("* ");
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Mod() : {/*@bgen(jjtree) Mod */
  SimpleNode jjtn000 = new SimpleNode(JJTMOD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Mod */
    try {
/*@egen*/
    <MOD>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        System.out.print("% ");
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Divide() : {/*@bgen(jjtree) Divide */
  SimpleNode jjtn000 = new SimpleNode(JJTDIVIDE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Divide */
    try {
/*@egen*/
    <DIVIDE>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        System.out.print("/ ");
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Equals() : {/*@bgen(jjtree) Equals */
  SimpleNode jjtn000 = new SimpleNode(JJTEQUALS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Equals */
    try {
/*@egen*/
    <EQUALS>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        System.out.print("= ");
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Less_Than() : {/*@bgen(jjtree) Less_Than */
  SimpleNode jjtn000 = new SimpleNode(JJTLESS_THAN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Less_Than */
    try {
/*@egen*/
    <LESS_THAN>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        System.out.print("< ");
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Greater_Than() : {/*@bgen(jjtree) Greater_Than */
  SimpleNode jjtn000 = new SimpleNode(JJTGREATER_THAN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Greater_Than */
    try {
/*@egen*/
    <GREATER_THAN>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        System.out.print("> ");
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Equals_Equals() : {/*@bgen(jjtree) Equals_Equals */
  SimpleNode jjtn000 = new SimpleNode(JJTEQUALS_EQUALS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Equals_Equals */
    try {
/*@egen*/
    <EQUALS_EQUALS>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        System.out.print("== ");
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Not_Equals() : {/*@bgen(jjtree) Not_Equals */
  SimpleNode jjtn000 = new SimpleNode(JJTNOT_EQUALS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Not_Equals */
    try {
/*@egen*/
    <NOT_EQUALS>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        System.out.print("!= ");
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Tokens() : {/*@bgen(jjtree) Tokens */
  SimpleNode jjtn000 = new SimpleNode(JJTTOKENS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Tokens */
    try {
/*@egen*/
    (FunctionDefinition() | Statement() | <COMMENT>)* <EOF>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}