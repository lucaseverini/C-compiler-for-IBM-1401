/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. small_c.jj */
/*@egen*//*
	small_c.jj

    Assignment #6 - CS153 - SJSU
	November-8-2014

	By Sean Papay, Matt Pleva, Luca Severini
*/

options
{
	DEBUG_PARSER=false;// true;
	LOOKAHEAD = 99999;
                        
}

PARSER_BEGIN(SmallCC)

package compiler;

import preprocessor.*;
import java.io.*;

public class SmallCC/*@bgen(jjtree)*/implements SmallCCTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected static JJTSmallCCState jjtree = new JJTSmallCCState();

/*@egen*/
  public static void main(String args[]) throws Exception
  {
    compile(args[0]);
  }

  public static void compile(String fileName) throws Exception
  {
    File file = new File(fileName);
    Reader sr = new FileReader(file);

    SmallCC parser = new SmallCC(sr);
    SimpleNode program = parser.program();
   	printTree(program);
   	
   	// System.out.println("==============================");
    // program.dump("");
  }

  public static void printTree(SimpleNode node) 
  {
    printTree(node, 0);
  }

  public static void printTree(SimpleNode node, int level) 
  {
    for (int i = 0; i < level; ++i) 
    {
    	System.out.print("    ");
    }
    	
	MyNode n = (MyNode)node;
	int kind = n.getKind();
	String name = n.getName();
	
	String begin = String.format("<%s>", node.toString());
    System.out.println(begin);
    
    // System.out.println(kind);
 	
	if(kind == 49 || kind == 50 || kind == 51 || kind == 52 || kind == 15)
	{
		for (int i = 0; i < level; ++i) 
		{
			System.out.print("    ");
		}

   		System.out.println("    " + name);
	}
	
    int numChildren = node.jjtGetNumChildren();    
    for(int i = 0; i <  numChildren; ++i) 
    {
      printTree((SimpleNode)node.jjtGetChild(i), level + 1);
    }
    
    for (int i = 0; i < level; ++i) 
    {
    	System.out.print("    ");
    }

	String end = String.format("</%s>", node.toString());
    System.out.println(end);
  }
}

PARSER_END(SmallCC)


SKIP : 
{
    " "
  | "\t"
  | "\n"
  | "\r\n"
}

TOKEN : 
{
    <BREAK : "break">
  | <CASE: "case">
  | <CHAR: "char">
  | <CONTINUE: "continue">
  | <_DEFAULT: "default">
  | <DO: "do">
  | <ELSE: "else">
  | <FOR: "for">
  | <GOTO: "goto">
  | <IF: "if">
  | <INT: "int">
  | <LONG: "long">
  | <RETURN: "return">
  | <SHORT: "short">
  | <SIZEOF: "sizeof">
  | <STATIC: "static">
  | <SWITCH: "switch">
  | <TYPEDEF: "typedef">
  | <UNSIGNED: "unsigned">
  | <WHILE: "while">
  | <SEMI_COLON: ";">
  | <PLUS_PLUS: "++">
  | <MINUS_MINUS: "--">
  | <PLUS: "+">
  | <MINUS: "-">
  | <STAR: "*">
  | <DIVIDE: "/">
  | <MOD: "%">
  | <BIT_AND: "&">
  | <BIT_OR: "|">
  | <BIT_XOR: "^">
  | <BIT_NOT: "~">
  | <BOOLEAN_NOT: "!">
  | <BOOLEAN_AND: "&&">
  | <BOOLEAN_OR: "||">
  | <GREATER_THAN: ">">
  | <LESS_THAN: "<">
  | <LEFT_SHIFT: "<<">
  | <RIGHT_SHIFT: ">>">
  | <EQUALS: "=">
  | <EQUALS_EQUALS: "==">
  | <NOT_EQUALS: "!=">
  | <L_PAREN: "(">
  | <R_PAREN: ")">

  | <IDENTIFIER : (<IDENTIFIER_CHAR>)(<IDENTIFIER_CHAR> | ["0"-"9","_"])*>
  | <NUMBER : (<DIGIT>)+>
  | <STRING_LIT : "\"" (~["\"", "\n", "\\"] | ("\\" ~[]))* "\"">
  | <CHARACTER_CONST  : "\'" (~["\'", "\n", "\\"] | ("\\" ~[]))* "\'">
  | <COMMENT: <LINE_COMMENT> | <MULTI_LINE_COMMENT>>
  | <LINE_COMMENT : "//" (~["\n"])* <NEWLINE> >
  | <MULTI_LINE_COMMENT: "/*" (~["*"] | ("*")* ~["/"])* "*/">
  | <NEWLINE : "\r\n" | "\n" >
  | <#NOT_NEWLINE : ~["\n","\r"]>
  | <#IDENTIFIER_CHAR : ["A"-"Z","a"-"z","_"]>
  | <#DIGIT : ["0"-"9"]>
 }

/** Main production. */

SimpleNode program()  : {/*@bgen(jjtree) program */
  MyNode jjtn000 = new MyNode(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) program */
        try {
/*@egen*/
  	(GlobalVariableDeclaration() | FunctionDeclaration() | FunctionDefinition())*

	{
    	jjtn000.setName(token.image);
    	jjtn000.setKind(token.kind);
    	jjtn000.setCol(token.beginLine);
    	jjtn000.setRow(token.beginColumn);
	}/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	
	{return jjtn000;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void BareType(): {/*@bgen(jjtree) BareType */
  MyNode jjtn000 = new MyNode(JJTBARETYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) BareType */
  try {
/*@egen*/
  "char" | "int"/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/

	{
    	jjtn000.setName(token.image);
    	jjtn000.setKind(token.kind);
    	jjtn000.setCol(token.beginLine);
    	jjtn000.setRow(token.beginColumn);
	}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Type(): {/*@bgen(jjtree) Type */
  MyNode jjtn000 = new MyNode(JJTTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Type */
        try {
/*@egen*/
  	BareType() ("*")*/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/

	{
    	jjtn000.setName(token.image);
    	jjtn000.setKind(token.kind);
    	jjtn000.setCol(token.beginLine);
    	jjtn000.setRow(token.beginColumn);
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void GlobalVariableDeclaration() : {/*@bgen(jjtree) GlobalVariableDeclaration */
  MyNode jjtn000 = new MyNode(JJTGLOBALVARIABLEDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) GlobalVariableDeclaration */
        try {
/*@egen*/
	(BareType())? VariableDeclarationList() ";"/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/	

	{
    	jjtn000.setName(token.image);
    	jjtn000.setKind(token.kind);
    	jjtn000.setCol(token.beginLine);
    	jjtn000.setRow(token.beginColumn);
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void LocalVariableDeclaration() : {/*@bgen(jjtree) LocalVariableDeclaration */
  MyNode jjtn000 = new MyNode(JJTLOCALVARIABLEDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) LocalVariableDeclaration */
        try {
/*@egen*/
	BareType() VariableDeclarationList() ";"/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/

	{
    	jjtn000.setName(token.image);
    	jjtn000.setKind(token.kind);
    	jjtn000.setCol(token.beginLine);
    	jjtn000.setRow(token.beginColumn);
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void VariableDeclarationList() : {/*@bgen(jjtree) VariableDeclarationList */
  MyNode jjtn000 = new MyNode(JJTVARIABLEDECLARATIONLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) VariableDeclarationList */
        try {
/*@egen*/	
	VariableInitializer() ("," VariableInitializer())*/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/

	{
    	jjtn000.setName(token.image);
    	jjtn000.setKind(9999);
    	jjtn000.setCol(token.beginLine);
    	jjtn000.setRow(token.beginColumn);
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void VariableInitializer()       :{}
{
	SuffixedVariable() ("="/*@bgen(jjtree) #Initializer( 2) */
                                {
                                  MyNode jjtn001 = new MyNode(JJTINITIALIZER);
                                  boolean jjtc001 = true;
                                  jjtree.openNodeScope(jjtn001);
                                }
                                try {
/*@egen*/ AssignmentExpression()/*@bgen(jjtree)*/
                                } catch (Throwable jjte001) {
                                  if (jjtc001) {
                                    jjtree.clearNodeScope(jjtn001);
                                    jjtc001 = false;
                                  } else {
                                    jjtree.popNode();
                                  }
                                  if (jjte001 instanceof RuntimeException) {
                                    throw (RuntimeException)jjte001;
                                  }
                                  if (jjte001 instanceof ParseException) {
                                    throw (ParseException)jjte001;
                                  }
                                  throw (Error)jjte001;
                                } finally {
                                  if (jjtc001) {
                                    jjtree.closeNodeScope(jjtn001,  2);
                                  }
                                }
/*@egen*/                )?
}

void SuffixedVariable()       : {}
{
	PrefixedVariable() "[" (Expression())/*@bgen(jjtree) #ArrayDeclaration( 2) */
                                              {
                                                MyNode jjtn001 = new MyNode(JJTARRAYDECLARATION);
                                                boolean jjtc001 = true;
                                                jjtree.openNodeScope(jjtn001);
                                              }
                                              try {
/*@egen*/ "]"/*@bgen(jjtree)*/
                                              } finally {
                                                if (jjtc001) {
                                                  jjtree.closeNodeScope(jjtn001,  2);
                                                }
                                              }
/*@egen*/                     
	| PrefixedVariable() "["/*@bgen(jjtree) #ArrayDeclaration( 1) */
                                 {
                                   MyNode jjtn002 = new MyNode(JJTARRAYDECLARATION);
                                   boolean jjtc002 = true;
                                   jjtree.openNodeScope(jjtn002);
                                 }
                                 try {
/*@egen*/ "]"/*@bgen(jjtree)*/
                                 } finally {
                                   if (jjtc002) {
                                     jjtree.closeNodeScope(jjtn002,  1);
                                   }
                                 }
/*@egen*/                     
	| PrefixedVariable()
}

void PrefixedVariable()       :{}
{
	Identifier()
	| "*"/*@bgen(jjtree) #PointerDeclaration( 1) */
              {
                MyNode jjtn001 = new MyNode(JJTPOINTERDECLARATION);
                boolean jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
              }
              try {
/*@egen*/ PrefixedVariable()/*@bgen(jjtree)*/
              } catch (Throwable jjte001) {
                if (jjtc001) {
                  jjtree.clearNodeScope(jjtn001);
                  jjtc001 = false;
                } else {
                  jjtree.popNode();
                }
                if (jjte001 instanceof RuntimeException) {
                  throw (RuntimeException)jjte001;
                }
                if (jjte001 instanceof ParseException) {
                  throw (ParseException)jjte001;
                }
                throw (Error)jjte001;
              } finally {
                if (jjtc001) {
                  jjtree.closeNodeScope(jjtn001,  1);
                }
              }
/*@egen*/                       
}


void FunctionDeclaration() : {/*@bgen(jjtree) FunctionDeclaration */
  MyNode jjtn000 = new MyNode(JJTFUNCTIONDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FunctionDeclaration */
    try {
/*@egen*/
    Type() Identifier()/*@bgen(jjtree) ParameterList */
                        {
                          MyNode jjtn001 = new MyNode(JJTPARAMETERLIST);
                          boolean jjtc001 = true;
                          jjtree.openNodeScope(jjtn001);
                        }
                        try {
/*@egen*/ ("(" (FunctionDeclarationParameter() ("," FunctionDeclarationParameter())*)? ")")/*@bgen(jjtree)*/
                        } catch (Throwable jjte001) {
                          if (jjtc001) {
                            jjtree.clearNodeScope(jjtn001);
                            jjtc001 = false;
                          } else {
                            jjtree.popNode();
                          }
                          if (jjte001 instanceof RuntimeException) {
                            throw (RuntimeException)jjte001;
                          }
                          if (jjte001 instanceof ParseException) {
                            throw (ParseException)jjte001;
                          }
                          throw (Error)jjte001;
                        } finally {
                          if (jjtc001) {
                            jjtree.closeNodeScope(jjtn001, true);
                          }
                        }
/*@egen*/                ";"/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/

	{
    	jjtn000.setName(token.image);
    	jjtn000.setKind(token.kind);
    	jjtn000.setCol(token.beginLine);
    	jjtn000.setRow(token.beginColumn);
	}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void FunctionDeclarationParameter(): {/*@bgen(jjtree) FunctionDeclarationParameter */
  MyNode jjtn000 = new MyNode(JJTFUNCTIONDECLARATIONPARAMETER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FunctionDeclarationParameter */
    try {
/*@egen*/
    (Type() (Identifier())? | Identifier()) ("[" (Expression())? "]")?/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
    
	{
    	jjtn000.setName(token.image);
    	jjtn000.setKind(token.kind);
    	jjtn000.setCol(token.beginLine);
    	jjtn000.setRow(token.beginColumn);
	}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void FunctionDefinition() : {/*@bgen(jjtree) FunctionDefinition */
  MyNode jjtn000 = new MyNode(JJTFUNCTIONDEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FunctionDefinition */
    try {
/*@egen*/
    (Type())? Identifier() (/*@bgen(jjtree) ParameterList */
                            {
                              MyNode jjtn001 = new MyNode(JJTPARAMETERLIST);
                              boolean jjtc001 = true;
                              jjtree.openNodeScope(jjtn001);
                            }
                            try {
/*@egen*/("(" (FunctionDefinitionParameter() ("," FunctionDefinitionParameter())*)? ")" )/*@bgen(jjtree)*/
                            } catch (Throwable jjte001) {
                              if (jjtc001) {
                                jjtree.clearNodeScope(jjtn001);
                                jjtc001 = false;
                              } else {
                                jjtree.popNode();
                              }
                              if (jjte001 instanceof RuntimeException) {
                                throw (RuntimeException)jjte001;
                              }
                              if (jjte001 instanceof ParseException) {
                                throw (ParseException)jjte001;
                              }
                              throw (Error)jjte001;
                            } finally {
                              if (jjtc001) {
                                jjtree.closeNodeScope(jjtn001, true);
                              }
                            }
/*@egen*/               )/*@bgen(jjtree) FunctionBody */
        {
          MyNode jjtn002 = new MyNode(JJTFUNCTIONBODY);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
        }
        try {
/*@egen*/
        ("{" (LocalVariableDeclaration())* (Statement())* "}")/*@bgen(jjtree)*/
        } catch (Throwable jjte002) {
          if (jjtc002) {
            jjtree.clearNodeScope(jjtn002);
            jjtc002 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte002 instanceof RuntimeException) {
            throw (RuntimeException)jjte002;
          }
          if (jjte002 instanceof ParseException) {
            throw (ParseException)jjte002;
          }
          throw (Error)jjte002;
        } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002, true);
          }
        }
/*@egen*/              /*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
        
	{
    	jjtn000.setName(token.image);
    	jjtn000.setKind(token.kind);
    	jjtn000.setCol(token.beginLine);
    	jjtn000.setRow(token.beginColumn);
	}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void FunctionDefinitionParameter(): {/*@bgen(jjtree) FunctionDefinitionParameter */
  MyNode jjtn000 = new MyNode(JJTFUNCTIONDEFINITIONPARAMETER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FunctionDefinitionParameter */
    try {
/*@egen*/
    (Type())? Identifier() ("[" (Expression())? "]")?/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
    
	{
    	jjtn000.setName(token.image);
    	jjtn000.setKind(token.kind);
    	jjtn000.setCol(token.beginLine);
    	jjtn000.setRow(token.beginColumn);
	}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Statement()         : {}
{/*@bgen(jjtree) #NullStatement( 0) */
                {
                  MyNode jjtn001 = new MyNode(JJTNULLSTATEMENT);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
                }
                try {
/*@egen*/
		";"/*@bgen(jjtree)*/
                } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001,  0);
                  }
                }
/*@egen*/                  
    | Expression()/*@bgen(jjtree) #ExpressionStatement( 1) */
                   {
                     MyNode jjtn002 = new MyNode(JJTEXPRESSIONSTATEMENT);
                     boolean jjtc002 = true;
                     jjtree.openNodeScope(jjtn002);
                   }
                   try {
/*@egen*/ ";"/*@bgen(jjtree)*/
                   } finally {
                     if (jjtc002) {
                       jjtree.closeNodeScope(jjtn002,  1);
                     }
                   }
/*@egen*/                        
    |/*@bgen(jjtree) #BlockStatement(true) */
      {
        MyNode jjtn003 = new MyNode(JJTBLOCKSTATEMENT);
        boolean jjtc003 = true;
        jjtree.openNodeScope(jjtn003);
      }
      try {
/*@egen*/ ("{" (LocalVariableDeclaration())* (Statement())* "}")/*@bgen(jjtree)*/
      } catch (Throwable jjte003) {
        if (jjtc003) {
          jjtree.clearNodeScope(jjtn003);
          jjtc003 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte003 instanceof RuntimeException) {
          throw (RuntimeException)jjte003;
        }
        if (jjte003 instanceof ParseException) {
          throw (ParseException)jjte003;
        }
        throw (Error)jjte003;
      } finally {
        if (jjtc003) {
          jjtree.closeNodeScope(jjtn003, true);
        }
      }
/*@egen*/                  
    | "if" "(" Expression() ")"/*@bgen(jjtree) #IfStatement( 2) */
                                {
                                  MyNode jjtn004 = new MyNode(JJTIFSTATEMENT);
                                  boolean jjtc004 = true;
                                  jjtree.openNodeScope(jjtn004);
                                }
                                try {
/*@egen*/ Statement()/*@bgen(jjtree)*/
                                } catch (Throwable jjte004) {
                                  if (jjtc004) {
                                    jjtree.clearNodeScope(jjtn004);
                                    jjtc004 = false;
                                  } else {
                                    jjtree.popNode();
                                  }
                                  if (jjte004 instanceof RuntimeException) {
                                    throw (RuntimeException)jjte004;
                                  }
                                  if (jjte004 instanceof ParseException) {
                                    throw (ParseException)jjte004;
                                  }
                                  throw (Error)jjte004;
                                } finally {
                                  if (jjtc004) {
                                    jjtree.closeNodeScope(jjtn004,  2);
                                  }
                                }
/*@egen*/                
    | "while" "(" Expression() ")"/*@bgen(jjtree) #WhileStatement( 2) */
                                   {
                                     MyNode jjtn005 = new MyNode(JJTWHILESTATEMENT);
                                     boolean jjtc005 = true;
                                     jjtree.openNodeScope(jjtn005);
                                   }
                                   try {
/*@egen*/ Statement()/*@bgen(jjtree)*/
                                   } catch (Throwable jjte005) {
                                     if (jjtc005) {
                                       jjtree.clearNodeScope(jjtn005);
                                       jjtc005 = false;
                                     } else {
                                       jjtree.popNode();
                                     }
                                     if (jjte005 instanceof RuntimeException) {
                                       throw (RuntimeException)jjte005;
                                     }
                                     if (jjte005 instanceof ParseException) {
                                       throw (ParseException)jjte005;
                                     }
                                     throw (Error)jjte005;
                                   } finally {
                                     if (jjtc005) {
                                       jjtree.closeNodeScope(jjtn005,  2);
                                     }
                                   }
/*@egen*/                   
    | "for" "(" (Expression()";"|/*@bgen(jjtree) #EmptyExpression( 0) */
                                  {
                                    MyNode jjtn006 = new MyNode(JJTEMPTYEXPRESSION);
                                    boolean jjtc006 = true;
                                    jjtree.openNodeScope(jjtn006);
                                  }
                                  try {
/*@egen*/ ";"/*@bgen(jjtree)*/
                                  } finally {
                                    if (jjtc006) {
                                      jjtree.closeNodeScope(jjtn006,  0);
                                    }
                                  }
/*@egen*/                    ) (Expression() ";" |/*@bgen(jjtree) #EmptyExpression( 0) */
                                                                               {
                                                                                 MyNode jjtn007 = new MyNode(JJTEMPTYEXPRESSION);
                                                                                 boolean jjtc007 = true;
                                                                                 jjtree.openNodeScope(jjtn007);
                                                                               }
                                                                               try {
/*@egen*/ ";"/*@bgen(jjtree)*/
                                                                               } finally {
                                                                                 if (jjtc007) {
                                                                                   jjtree.closeNodeScope(jjtn007,  0);
                                                                                 }
                                                                               }
/*@egen*/                    ) (Expression() ")" |/*@bgen(jjtree) #EmptyExpression( 0) */
                                                                                                                            {
                                                                                                                              MyNode jjtn008 = new MyNode(JJTEMPTYEXPRESSION);
                                                                                                                              boolean jjtc008 = true;
                                                                                                                              jjtree.openNodeScope(jjtn008);
                                                                                                                            }
                                                                                                                            try {
/*@egen*/ ")"/*@bgen(jjtree)*/
                                                                                                                            } finally {
                                                                                                                              if (jjtc008) {
                                                                                                                                jjtree.closeNodeScope(jjtn008,  0);
                                                                                                                              }
                                                                                                                            }
/*@egen*/                    )/*@bgen(jjtree) #ForStatement( 4) */
                                                                                                                                                     {
                                                                                                                                                       MyNode jjtn009 = new MyNode(JJTFORSTATEMENT);
                                                                                                                                                       boolean jjtc009 = true;
                                                                                                                                                       jjtree.openNodeScope(jjtn009);
                                                                                                                                                     }
                                                                                                                                                     try {
/*@egen*/ Statement()/*@bgen(jjtree)*/
                                                                                                                                                     } catch (Throwable jjte009) {
                                                                                                                                                       if (jjtc009) {
                                                                                                                                                         jjtree.clearNodeScope(jjtn009);
                                                                                                                                                         jjtc009 = false;
                                                                                                                                                       } else {
                                                                                                                                                         jjtree.popNode();
                                                                                                                                                       }
                                                                                                                                                       if (jjte009 instanceof RuntimeException) {
                                                                                                                                                         throw (RuntimeException)jjte009;
                                                                                                                                                       }
                                                                                                                                                       if (jjte009 instanceof ParseException) {
                                                                                                                                                         throw (ParseException)jjte009;
                                                                                                                                                       }
                                                                                                                                                       throw (Error)jjte009;
                                                                                                                                                     } finally {
                                                                                                                                                       if (jjtc009) {
                                                                                                                                                         jjtree.closeNodeScope(jjtn009,  4);
                                                                                                                                                       }
                                                                                                                                                     }
/*@egen*/                 
    | "do" Statement() "while" "(" Expression() ")"/*@bgen(jjtree) #DoWhileExpression(true) */
                                                    {
                                                      MyNode jjtn010 = new MyNode(JJTDOWHILEEXPRESSION);
                                                      boolean jjtc010 = true;
                                                      jjtree.openNodeScope(jjtn010);
                                                    }
                                                    try {
/*@egen*/ ";"/*@bgen(jjtree)*/
                                                    } finally {
                                                      if (jjtc010) {
                                                        jjtree.closeNodeScope(jjtn010, true);
                                                      }
                                                    }
/*@egen*/                     
    /* There is an issue here, the block statement in the switch statement isn't taking on any children.  You might have to
     * make another production rule for a switch statement body that looks like a block statement with cases. */
    | "switch" "(" Expression() ")"/*@bgen(jjtree) SwitchStatement */
                                    {
                                      MyNode jjtn012 = new MyNode(JJTSWITCHSTATEMENT);
                                      boolean jjtc012 = true;
                                      jjtree.openNodeScope(jjtn012);
                                    }
                                    try {
/*@egen*/ ("{" (LocalVariableDeclaration())* (("case" Expression() ":" | "default" ":")? Statement())*/*@bgen(jjtree) BlockStatenent */
                                                                                                                                 {
                                                                                                                                   MyNode jjtn011 = new MyNode(JJTBLOCKSTATENENT);
                                                                                                                                   boolean jjtc011 = true;
                                                                                                                                   jjtree.openNodeScope(jjtn011);
                                                                                                                                 }
                                                                                                                                 try {
/*@egen*/ "}"/*@bgen(jjtree)*/
                                                                                                                                 } finally {
                                                                                                                                   if (jjtc011) {
                                                                                                                                     jjtree.closeNodeScope(jjtn011, true);
                                                                                                                                   }
                                                                                                                                 }
/*@egen*/                 )/*@bgen(jjtree)*/
                                    } catch (Throwable jjte012) {
                                      if (jjtc012) {
                                        jjtree.clearNodeScope(jjtn012);
                                        jjtc012 = false;
                                      } else {
                                        jjtree.popNode();
                                      }
                                      if (jjte012 instanceof RuntimeException) {
                                        throw (RuntimeException)jjte012;
                                      }
                                      if (jjte012 instanceof ParseException) {
                                        throw (ParseException)jjte012;
                                      }
                                      throw (Error)jjte012;
                                    } finally {
                                      if (jjtc012) {
                                        jjtree.closeNodeScope(jjtn012, true);
                                      }
                                    }
/*@egen*/                 
    | "break"/*@bgen(jjtree) #BreakStatement( 0) */
              {
                MyNode jjtn013 = new MyNode(JJTBREAKSTATEMENT);
                boolean jjtc013 = true;
                jjtree.openNodeScope(jjtn013);
              }
              try {
/*@egen*/ ";"/*@bgen(jjtree)*/
              } finally {
                if (jjtc013) {
                  jjtree.closeNodeScope(jjtn013,  0);
                }
              }
/*@egen*/                   
    | "continue"/*@bgen(jjtree) #ContinueStatement( 0) */
                 {
                   MyNode jjtn014 = new MyNode(JJTCONTINUESTATEMENT);
                   boolean jjtc014 = true;
                   jjtree.openNodeScope(jjtn014);
                 }
                 try {
/*@egen*/ ";"/*@bgen(jjtree)*/
                 } finally {
                   if (jjtc014) {
                     jjtree.closeNodeScope(jjtn014,  0);
                   }
                 }
/*@egen*/                      
    | "return" (Expression())?/*@bgen(jjtree) ReturnStatement */
                               {
                                 MyNode jjtn015 = new MyNode(JJTRETURNSTATEMENT);
                                 boolean jjtc015 = true;
                                 jjtree.openNodeScope(jjtn015);
                               }
                               try {
/*@egen*/ ";"/*@bgen(jjtree)*/
                               } finally {
                                 if (jjtc015) {
                                   jjtree.closeNodeScope(jjtn015, true);
                                 }
                               }
/*@egen*/                 
    | Identifier() ":"/*@bgen(jjtree) #LabeledStatement( 2) */
                       {
                         MyNode jjtn016 = new MyNode(JJTLABELEDSTATEMENT);
                         boolean jjtc016 = true;
                         jjtree.openNodeScope(jjtn016);
                       }
                       try {
/*@egen*/ Statement()/*@bgen(jjtree)*/
                       } catch (Throwable jjte016) {
                         if (jjtc016) {
                           jjtree.clearNodeScope(jjtn016);
                           jjtc016 = false;
                         } else {
                           jjtree.popNode();
                         }
                         if (jjte016 instanceof RuntimeException) {
                           throw (RuntimeException)jjte016;
                         }
                         if (jjte016 instanceof ParseException) {
                           throw (ParseException)jjte016;
                         }
                         throw (Error)jjte016;
                       } finally {
                         if (jjtc016) {
                           jjtree.closeNodeScope(jjtn016,  2);
                         }
                       }
/*@egen*/                     
    | "goto" Identifier()/*@bgen(jjtree) #GotoStatement( 1) */
                          {
                            MyNode jjtn017 = new MyNode(JJTGOTOSTATEMENT);
                            boolean jjtc017 = true;
                            jjtree.openNodeScope(jjtn017);
                          }
                          try {
/*@egen*/ ";"/*@bgen(jjtree)*/
                          } finally {
                            if (jjtc017) {
                              jjtree.closeNodeScope(jjtn017,  1);
                            }
                          }
/*@egen*/                  
}

/** Left-to-right*/
void Expression()      : {}
{
    AssignmentExpression() (","/*@bgen(jjtree) #Comma( 2) */
                                {
                                  MyNode jjtn001 = new MyNode(JJTCOMMA);
                                  boolean jjtc001 = true;
                                  jjtree.openNodeScope(jjtn001);
                                }
                                try {
/*@egen*/ AssignmentExpression()/*@bgen(jjtree)*/
                                } catch (Throwable jjte001) {
                                  if (jjtc001) {
                                    jjtree.clearNodeScope(jjtn001);
                                    jjtc001 = false;
                                  } else {
                                    jjtree.popNode();
                                  }
                                  if (jjte001 instanceof RuntimeException) {
                                    throw (RuntimeException)jjte001;
                                  }
                                  if (jjte001 instanceof ParseException) {
                                    throw (ParseException)jjte001;
                                  }
                                  throw (Error)jjte001;
                                } finally {
                                  if (jjtc001) {
                                    jjtree.closeNodeScope(jjtn001,  2);
                                  }
                                }
/*@egen*/          )*
}

/** Right-to-left */
void AssignmentExpression()      : {}
{
    TernaryExpression() ( "+="/*@bgen(jjtree) #AddAssign( 2) */
                               {
                                 MyNode jjtn001 = new MyNode(JJTADDASSIGN);
                                 boolean jjtc001 = true;
                                 jjtree.openNodeScope(jjtn001);
                               }
                               try {
/*@egen*/ AssignmentExpression()/*@bgen(jjtree)*/
                               } catch (Throwable jjte001) {
                                 if (jjtc001) {
                                   jjtree.clearNodeScope(jjtn001);
                                   jjtc001 = false;
                                 } else {
                                   jjtree.popNode();
                                 }
                                 if (jjte001 instanceof RuntimeException) {
                                   throw (RuntimeException)jjte001;
                                 }
                                 if (jjte001 instanceof ParseException) {
                                   throw (ParseException)jjte001;
                                 }
                                 throw (Error)jjte001;
                               } finally {
                                 if (jjtc001) {
                                   jjtree.closeNodeScope(jjtn001,  2);
                                 }
                               }
/*@egen*/               
                        | "-="/*@bgen(jjtree) #SubtractAssign( 2) */
                               {
                                 MyNode jjtn002 = new MyNode(JJTSUBTRACTASSIGN);
                                 boolean jjtc002 = true;
                                 jjtree.openNodeScope(jjtn002);
                               }
                               try {
/*@egen*/ AssignmentExpression()/*@bgen(jjtree)*/
                               } catch (Throwable jjte002) {
                                 if (jjtc002) {
                                   jjtree.clearNodeScope(jjtn002);
                                   jjtc002 = false;
                                 } else {
                                   jjtree.popNode();
                                 }
                                 if (jjte002 instanceof RuntimeException) {
                                   throw (RuntimeException)jjte002;
                                 }
                                 if (jjte002 instanceof ParseException) {
                                   throw (ParseException)jjte002;
                                 }
                                 throw (Error)jjte002;
                               } finally {
                                 if (jjtc002) {
                                   jjtree.closeNodeScope(jjtn002,  2);
                                 }
                               }
/*@egen*/                   
                        | "*="/*@bgen(jjtree) #MultiplyAsign( 2) */
                               {
                                 MyNode jjtn003 = new MyNode(JJTMULTIPLYASIGN);
                                 boolean jjtc003 = true;
                                 jjtree.openNodeScope(jjtn003);
                               }
                               try {
/*@egen*/ AssignmentExpression()/*@bgen(jjtree)*/
                               } catch (Throwable jjte003) {
                                 if (jjtc003) {
                                   jjtree.clearNodeScope(jjtn003);
                                   jjtc003 = false;
                                 } else {
                                   jjtree.popNode();
                                 }
                                 if (jjte003 instanceof RuntimeException) {
                                   throw (RuntimeException)jjte003;
                                 }
                                 if (jjte003 instanceof ParseException) {
                                   throw (ParseException)jjte003;
                                 }
                                 throw (Error)jjte003;
                               } finally {
                                 if (jjtc003) {
                                   jjtree.closeNodeScope(jjtn003,  2);
                                 }
                               }
/*@egen*/                  
                        | "/="/*@bgen(jjtree) #DivideAssign( 2) */
                               {
                                 MyNode jjtn004 = new MyNode(JJTDIVIDEASSIGN);
                                 boolean jjtc004 = true;
                                 jjtree.openNodeScope(jjtn004);
                               }
                               try {
/*@egen*/ AssignmentExpression()/*@bgen(jjtree)*/
                               } catch (Throwable jjte004) {
                                 if (jjtc004) {
                                   jjtree.clearNodeScope(jjtn004);
                                   jjtc004 = false;
                                 } else {
                                   jjtree.popNode();
                                 }
                                 if (jjte004 instanceof RuntimeException) {
                                   throw (RuntimeException)jjte004;
                                 }
                                 if (jjte004 instanceof ParseException) {
                                   throw (ParseException)jjte004;
                                 }
                                 throw (Error)jjte004;
                               } finally {
                                 if (jjtc004) {
                                   jjtree.closeNodeScope(jjtn004,  2);
                                 }
                               }
/*@egen*/                 
                        | "%="/*@bgen(jjtree) #ModuloAssign( 2) */
                               {
                                 MyNode jjtn005 = new MyNode(JJTMODULOASSIGN);
                                 boolean jjtc005 = true;
                                 jjtree.openNodeScope(jjtn005);
                               }
                               try {
/*@egen*/ AssignmentExpression()/*@bgen(jjtree)*/
                               } catch (Throwable jjte005) {
                                 if (jjtc005) {
                                   jjtree.clearNodeScope(jjtn005);
                                   jjtc005 = false;
                                 } else {
                                   jjtree.popNode();
                                 }
                                 if (jjte005 instanceof RuntimeException) {
                                   throw (RuntimeException)jjte005;
                                 }
                                 if (jjte005 instanceof ParseException) {
                                   throw (ParseException)jjte005;
                                 }
                                 throw (Error)jjte005;
                               } finally {
                                 if (jjtc005) {
                                   jjtree.closeNodeScope(jjtn005,  2);
                                 }
                               }
/*@egen*/                 
                        | ">>="/*@bgen(jjtree) #RightShiftAssign( 2) */
                                {
                                  MyNode jjtn006 = new MyNode(JJTRIGHTSHIFTASSIGN);
                                  boolean jjtc006 = true;
                                  jjtree.openNodeScope(jjtn006);
                                }
                                try {
/*@egen*/ AssignmentExpression()/*@bgen(jjtree)*/
                                } catch (Throwable jjte006) {
                                  if (jjtc006) {
                                    jjtree.clearNodeScope(jjtn006);
                                    jjtc006 = false;
                                  } else {
                                    jjtree.popNode();
                                  }
                                  if (jjte006 instanceof RuntimeException) {
                                    throw (RuntimeException)jjte006;
                                  }
                                  if (jjte006 instanceof ParseException) {
                                    throw (ParseException)jjte006;
                                  }
                                  throw (Error)jjte006;
                                } finally {
                                  if (jjtc006) {
                                    jjtree.closeNodeScope(jjtn006,  2);
                                  }
                                }
/*@egen*/                     
                        | "<<="/*@bgen(jjtree) #LeftShiftAssign( 2) */
                                {
                                  MyNode jjtn007 = new MyNode(JJTLEFTSHIFTASSIGN);
                                  boolean jjtc007 = true;
                                  jjtree.openNodeScope(jjtn007);
                                }
                                try {
/*@egen*/ AssignmentExpression()/*@bgen(jjtree)*/
                                } catch (Throwable jjte007) {
                                  if (jjtc007) {
                                    jjtree.clearNodeScope(jjtn007);
                                    jjtc007 = false;
                                  } else {
                                    jjtree.popNode();
                                  }
                                  if (jjte007 instanceof RuntimeException) {
                                    throw (RuntimeException)jjte007;
                                  }
                                  if (jjte007 instanceof ParseException) {
                                    throw (ParseException)jjte007;
                                  }
                                  throw (Error)jjte007;
                                } finally {
                                  if (jjtc007) {
                                    jjtree.closeNodeScope(jjtn007,  2);
                                  }
                                }
/*@egen*/                    
						| "&="/*@bgen(jjtree) #BitAndAssign( 2) */
                                                       {
                                                         MyNode jjtn008 = new MyNode(JJTBITANDASSIGN);
                                                         boolean jjtc008 = true;
                                                         jjtree.openNodeScope(jjtn008);
                                                       }
                                                       try {
/*@egen*/ AssignmentExpression()/*@bgen(jjtree)*/
                                                       } catch (Throwable jjte008) {
                                                         if (jjtc008) {
                                                           jjtree.clearNodeScope(jjtn008);
                                                           jjtc008 = false;
                                                         } else {
                                                           jjtree.popNode();
                                                         }
                                                         if (jjte008 instanceof RuntimeException) {
                                                           throw (RuntimeException)jjte008;
                                                         }
                                                         if (jjte008 instanceof ParseException) {
                                                           throw (ParseException)jjte008;
                                                         }
                                                         throw (Error)jjte008;
                                                       } finally {
                                                         if (jjtc008) {
                                                           jjtree.closeNodeScope(jjtn008,  2);
                                                         }
                                                       }
/*@egen*/                 
						| "^="/*@bgen(jjtree) #BitXorAssign( 2) */
                                                       {
                                                         MyNode jjtn009 = new MyNode(JJTBITXORASSIGN);
                                                         boolean jjtc009 = true;
                                                         jjtree.openNodeScope(jjtn009);
                                                       }
                                                       try {
/*@egen*/ AssignmentExpression()/*@bgen(jjtree)*/
                                                       } catch (Throwable jjte009) {
                                                         if (jjtc009) {
                                                           jjtree.clearNodeScope(jjtn009);
                                                           jjtc009 = false;
                                                         } else {
                                                           jjtree.popNode();
                                                         }
                                                         if (jjte009 instanceof RuntimeException) {
                                                           throw (RuntimeException)jjte009;
                                                         }
                                                         if (jjte009 instanceof ParseException) {
                                                           throw (ParseException)jjte009;
                                                         }
                                                         throw (Error)jjte009;
                                                       } finally {
                                                         if (jjtc009) {
                                                           jjtree.closeNodeScope(jjtn009,  2);
                                                         }
                                                       }
/*@egen*/                 
						| "|="/*@bgen(jjtree) #BitXorAssign( 2) */
                                                       {
                                                         MyNode jjtn010 = new MyNode(JJTBITXORASSIGN);
                                                         boolean jjtc010 = true;
                                                         jjtree.openNodeScope(jjtn010);
                                                       }
                                                       try {
/*@egen*/ AssignmentExpression()/*@bgen(jjtree)*/
                                                       } catch (Throwable jjte010) {
                                                         if (jjtc010) {
                                                           jjtree.clearNodeScope(jjtn010);
                                                           jjtc010 = false;
                                                         } else {
                                                           jjtree.popNode();
                                                         }
                                                         if (jjte010 instanceof RuntimeException) {
                                                           throw (RuntimeException)jjte010;
                                                         }
                                                         if (jjte010 instanceof ParseException) {
                                                           throw (ParseException)jjte010;
                                                         }
                                                         throw (Error)jjte010;
                                                       } finally {
                                                         if (jjtc010) {
                                                           jjtree.closeNodeScope(jjtn010,  2);
                                                         }
                                                       }
/*@egen*/                 
						| "="/*@bgen(jjtree) #Assign( 2) */
                                                      {
                                                        MyNode jjtn011 = new MyNode(JJTASSIGN);
                                                        boolean jjtc011 = true;
                                                        jjtree.openNodeScope(jjtn011);
                                                      }
                                                      try {
/*@egen*/ AssignmentExpression()/*@bgen(jjtree)*/
                                                      } catch (Throwable jjte011) {
                                                        if (jjtc011) {
                                                          jjtree.clearNodeScope(jjtn011);
                                                          jjtc011 = false;
                                                        } else {
                                                          jjtree.popNode();
                                                        }
                                                        if (jjte011 instanceof RuntimeException) {
                                                          throw (RuntimeException)jjte011;
                                                        }
                                                        if (jjte011 instanceof ParseException) {
                                                          throw (ParseException)jjte011;
                                                        }
                                                        throw (Error)jjte011;
                                                      } finally {
                                                        if (jjtc011) {
                                                          jjtree.closeNodeScope(jjtn011,  2);
                                                        }
                                                      }
/*@egen*/           )?
}

void TernaryExpression()      : {}
{
    OrExpression() ("?" Expression() ":"/*@bgen(jjtree) #ConditionalOperator( 3) */
                                         {
                                           MyNode jjtn001 = new MyNode(JJTCONDITIONALOPERATOR);
                                           boolean jjtc001 = true;
                                           jjtree.openNodeScope(jjtn001);
                                         }
                                         try {
/*@egen*/ TernaryExpression()/*@bgen(jjtree)*/
                                         } catch (Throwable jjte001) {
                                           if (jjtc001) {
                                             jjtree.clearNodeScope(jjtn001);
                                             jjtc001 = false;
                                           } else {
                                             jjtree.popNode();
                                           }
                                           if (jjte001 instanceof RuntimeException) {
                                             throw (RuntimeException)jjte001;
                                           }
                                           if (jjte001 instanceof ParseException) {
                                             throw (ParseException)jjte001;
                                           }
                                           throw (Error)jjte001;
                                         } finally {
                                           if (jjtc001) {
                                             jjtree.closeNodeScope(jjtn001,  3);
                                           }
                                         }
/*@egen*/                        )?
}

/** left-to-right*/

void OrExpression()         : {}
{
    AndExpression() ("||"/*@bgen(jjtree) #Or( 2) */
                          {
                            MyNode jjtn001 = new MyNode(JJTOR);
                            boolean jjtc001 = true;
                            jjtree.openNodeScope(jjtn001);
                          }
                          try {
/*@egen*/ AndExpression()/*@bgen(jjtree)*/
                          } catch (Throwable jjte001) {
                            if (jjtc001) {
                              jjtree.clearNodeScope(jjtn001);
                              jjtc001 = false;
                            } else {
                              jjtree.popNode();
                            }
                            if (jjte001 instanceof RuntimeException) {
                              throw (RuntimeException)jjte001;
                            }
                            if (jjte001 instanceof ParseException) {
                              throw (ParseException)jjte001;
                            }
                            throw (Error)jjte001;
                          } finally {
                            if (jjtc001) {
                              jjtree.closeNodeScope(jjtn001,  2);
                            }
                          }
/*@egen*/       )*
}

void AndExpression()         : {}
{
    BitOrExpression() ("&&"/*@bgen(jjtree) #And( 2) */
                            {
                              MyNode jjtn001 = new MyNode(JJTAND);
                              boolean jjtc001 = true;
                              jjtree.openNodeScope(jjtn001);
                            }
                            try {
/*@egen*/ BitOrExpression()/*@bgen(jjtree)*/
                            } catch (Throwable jjte001) {
                              if (jjtc001) {
                                jjtree.clearNodeScope(jjtn001);
                                jjtc001 = false;
                              } else {
                                jjtree.popNode();
                              }
                              if (jjte001 instanceof RuntimeException) {
                                throw (RuntimeException)jjte001;
                              }
                              if (jjte001 instanceof ParseException) {
                                throw (ParseException)jjte001;
                              }
                              throw (Error)jjte001;
                            } finally {
                              if (jjtc001) {
                                jjtree.closeNodeScope(jjtn001,  2);
                              }
                            }
/*@egen*/        )*
}

void BitOrExpression()         : {}
{
    BitXorExpression() ("|"/*@bgen(jjtree) #BitOr( 2) */
                            {
                              MyNode jjtn001 = new MyNode(JJTBITOR);
                              boolean jjtc001 = true;
                              jjtree.openNodeScope(jjtn001);
                            }
                            try {
/*@egen*/ BitXorExpression()/*@bgen(jjtree)*/
                            } catch (Throwable jjte001) {
                              if (jjtc001) {
                                jjtree.clearNodeScope(jjtn001);
                                jjtc001 = false;
                              } else {
                                jjtree.popNode();
                              }
                              if (jjte001 instanceof RuntimeException) {
                                throw (RuntimeException)jjte001;
                              }
                              if (jjte001 instanceof ParseException) {
                                throw (ParseException)jjte001;
                              }
                              throw (Error)jjte001;
                            } finally {
                              if (jjtc001) {
                                jjtree.closeNodeScope(jjtn001,  2);
                              }
                            }
/*@egen*/          )*
}

void BitXorExpression()         : {}
{
    BitAndExpression() ("^"/*@bgen(jjtree) #BitXor( 2) */
                            {
                              MyNode jjtn001 = new MyNode(JJTBITXOR);
                              boolean jjtc001 = true;
                              jjtree.openNodeScope(jjtn001);
                            }
                            try {
/*@egen*/ BitAndExpression()/*@bgen(jjtree)*/
                            } catch (Throwable jjte001) {
                              if (jjtc001) {
                                jjtree.clearNodeScope(jjtn001);
                                jjtc001 = false;
                              } else {
                                jjtree.popNode();
                              }
                              if (jjte001 instanceof RuntimeException) {
                                throw (RuntimeException)jjte001;
                              }
                              if (jjte001 instanceof ParseException) {
                                throw (ParseException)jjte001;
                              }
                              throw (Error)jjte001;
                            } finally {
                              if (jjtc001) {
                                jjtree.closeNodeScope(jjtn001,  2);
                              }
                            }
/*@egen*/           )*

}

void BitAndExpression()         : {}
{
    EqualityExpression() ("&"/*@bgen(jjtree) #BitAnd( 2) */
                              {
                                MyNode jjtn001 = new MyNode(JJTBITAND);
                                boolean jjtc001 = true;
                                jjtree.openNodeScope(jjtn001);
                              }
                              try {
/*@egen*/ EqualityExpression()/*@bgen(jjtree)*/
                              } catch (Throwable jjte001) {
                                if (jjtc001) {
                                  jjtree.clearNodeScope(jjtn001);
                                  jjtc001 = false;
                                } else {
                                  jjtree.popNode();
                                }
                                if (jjte001 instanceof RuntimeException) {
                                  throw (RuntimeException)jjte001;
                                }
                                if (jjte001 instanceof ParseException) {
                                  throw (ParseException)jjte001;
                                }
                                throw (Error)jjte001;
                              } finally {
                                if (jjtc001) {
                                  jjtree.closeNodeScope(jjtn001,  2);
                                }
                              }
/*@egen*/           )*
}

void EqualityExpression()         : {}
{
    GreaterThanExpression() ( "=="/*@bgen(jjtree) #Equal( 2) */
                                   {
                                     MyNode jjtn001 = new MyNode(JJTEQUAL);
                                     boolean jjtc001 = true;
                                     jjtree.openNodeScope(jjtn001);
                                   }
                                   try {
/*@egen*/ GreaterThanExpression()/*@bgen(jjtree)*/
                                   } catch (Throwable jjte001) {
                                     if (jjtc001) {
                                       jjtree.clearNodeScope(jjtn001);
                                       jjtc001 = false;
                                     } else {
                                       jjtree.popNode();
                                     }
                                     if (jjte001 instanceof RuntimeException) {
                                       throw (RuntimeException)jjte001;
                                     }
                                     if (jjte001 instanceof ParseException) {
                                       throw (ParseException)jjte001;
                                     }
                                     throw (Error)jjte001;
                                   } finally {
                                     if (jjtc001) {
                                       jjtree.closeNodeScope(jjtn001,  2);
                                     }
                                   }
/*@egen*/          
                            | "!="/*@bgen(jjtree) #NotEqual( 2) */
                                   {
                                     MyNode jjtn002 = new MyNode(JJTNOTEQUAL);
                                     boolean jjtc002 = true;
                                     jjtree.openNodeScope(jjtn002);
                                   }
                                   try {
/*@egen*/ GreaterThanExpression()/*@bgen(jjtree)*/
                                   } catch (Throwable jjte002) {
                                     if (jjtc002) {
                                       jjtree.clearNodeScope(jjtn002);
                                       jjtc002 = false;
                                     } else {
                                       jjtree.popNode();
                                     }
                                     if (jjte002 instanceof RuntimeException) {
                                       throw (RuntimeException)jjte002;
                                     }
                                     if (jjte002 instanceof ParseException) {
                                       throw (ParseException)jjte002;
                                     }
                                     throw (Error)jjte002;
                                   } finally {
                                     if (jjtc002) {
                                       jjtree.closeNodeScope(jjtn002,  2);
                                     }
                                   }
/*@egen*/             )*
}

void GreaterThanExpression()         : {}
{
    LessThanExpression() ( ">"/*@bgen(jjtree) #GreaterThan( 2) */
                               {
                                 MyNode jjtn001 = new MyNode(JJTGREATERTHAN);
                                 boolean jjtc001 = true;
                                 jjtree.openNodeScope(jjtn001);
                               }
                               try {
/*@egen*/ LessThanExpression()/*@bgen(jjtree)*/
                               } catch (Throwable jjte001) {
                                 if (jjtc001) {
                                   jjtree.clearNodeScope(jjtn001);
                                   jjtc001 = false;
                                 } else {
                                   jjtree.popNode();
                                 }
                                 if (jjte001 instanceof RuntimeException) {
                                   throw (RuntimeException)jjte001;
                                 }
                                 if (jjte001 instanceof ParseException) {
                                   throw (ParseException)jjte001;
                                 }
                                 throw (Error)jjte001;
                               } finally {
                                 if (jjtc001) {
                                   jjtree.closeNodeScope(jjtn001,  2);
                                 }
                               }
/*@egen*/                
                         | ">="/*@bgen(jjtree) #GreaterThanOrEqual( 2) */
                                {
                                  MyNode jjtn002 = new MyNode(JJTGREATERTHANOREQUAL);
                                  boolean jjtc002 = true;
                                  jjtree.openNodeScope(jjtn002);
                                }
                                try {
/*@egen*/ LessThanExpression()/*@bgen(jjtree)*/
                                } catch (Throwable jjte002) {
                                  if (jjtc002) {
                                    jjtree.clearNodeScope(jjtn002);
                                    jjtc002 = false;
                                  } else {
                                    jjtree.popNode();
                                  }
                                  if (jjte002 instanceof RuntimeException) {
                                    throw (RuntimeException)jjte002;
                                  }
                                  if (jjte002 instanceof ParseException) {
                                    throw (ParseException)jjte002;
                                  }
                                  throw (Error)jjte002;
                                } finally {
                                  if (jjtc002) {
                                    jjtree.closeNodeScope(jjtn002,  2);
                                  }
                                }
/*@egen*/                       )*
}

void LessThanExpression()         : {}
{
    BitshiftExpression() ( "<"/*@bgen(jjtree) #LessThan( 2) */
                               {
                                 MyNode jjtn001 = new MyNode(JJTLESSTHAN);
                                 boolean jjtc001 = true;
                                 jjtree.openNodeScope(jjtn001);
                               }
                               try {
/*@egen*/ BitshiftExpression()/*@bgen(jjtree)*/
                               } catch (Throwable jjte001) {
                                 if (jjtc001) {
                                   jjtree.clearNodeScope(jjtn001);
                                   jjtc001 = false;
                                 } else {
                                   jjtree.popNode();
                                 }
                                 if (jjte001 instanceof RuntimeException) {
                                   throw (RuntimeException)jjte001;
                                 }
                                 if (jjte001 instanceof ParseException) {
                                   throw (ParseException)jjte001;
                                 }
                                 throw (Error)jjte001;
                               } finally {
                                 if (jjtc001) {
                                   jjtree.closeNodeScope(jjtn001,  2);
                                 }
                               }
/*@egen*/             
		                     | "<="/*@bgen(jjtree) #LessThanOrEqual( 2) */
                                            {
                                              MyNode jjtn002 = new MyNode(JJTLESSTHANOREQUAL);
                                              boolean jjtc002 = true;
                                              jjtree.openNodeScope(jjtn002);
                                            }
                                            try {
/*@egen*/ BitshiftExpression()/*@bgen(jjtree)*/
                                            } catch (Throwable jjte002) {
                                              if (jjtc002) {
                                                jjtree.clearNodeScope(jjtn002);
                                                jjtc002 = false;
                                              } else {
                                                jjtree.popNode();
                                              }
                                              if (jjte002 instanceof RuntimeException) {
                                                throw (RuntimeException)jjte002;
                                              }
                                              if (jjte002 instanceof ParseException) {
                                                throw (ParseException)jjte002;
                                              }
                                              throw (Error)jjte002;
                                            } finally {
                                              if (jjtc002) {
                                                jjtree.closeNodeScope(jjtn002,  2);
                                              }
                                            }
/*@egen*/                     )*
}

void BitshiftExpression()         : {}
{
    AdditiveExpression() ( "<<"/*@bgen(jjtree) #LeftShift( 2) */
                                {
                                  MyNode jjtn001 = new MyNode(JJTLEFTSHIFT);
                                  boolean jjtc001 = true;
                                  jjtree.openNodeScope(jjtn001);
                                }
                                try {
/*@egen*/ AdditiveExpression()/*@bgen(jjtree)*/
                                } catch (Throwable jjte001) {
                                  if (jjtc001) {
                                    jjtree.clearNodeScope(jjtn001);
                                    jjtc001 = false;
                                  } else {
                                    jjtree.popNode();
                                  }
                                  if (jjte001 instanceof RuntimeException) {
                                    throw (RuntimeException)jjte001;
                                  }
                                  if (jjte001 instanceof ParseException) {
                                    throw (ParseException)jjte001;
                                  }
                                  throw (Error)jjte001;
                                } finally {
                                  if (jjtc001) {
                                    jjtree.closeNodeScope(jjtn001,  2);
                                  }
                                }
/*@egen*/              
		                     | ">>"/*@bgen(jjtree) #RightShift( 2) */
                                            {
                                              MyNode jjtn002 = new MyNode(JJTRIGHTSHIFT);
                                              boolean jjtc002 = true;
                                              jjtree.openNodeScope(jjtn002);
                                            }
                                            try {
/*@egen*/ AdditiveExpression()/*@bgen(jjtree)*/
                                            } catch (Throwable jjte002) {
                                              if (jjtc002) {
                                                jjtree.clearNodeScope(jjtn002);
                                                jjtc002 = false;
                                              } else {
                                                jjtree.popNode();
                                              }
                                              if (jjte002 instanceof RuntimeException) {
                                                throw (RuntimeException)jjte002;
                                              }
                                              if (jjte002 instanceof ParseException) {
                                                throw (ParseException)jjte002;
                                              }
                                              throw (Error)jjte002;
                                            } finally {
                                              if (jjtc002) {
                                                jjtree.closeNodeScope(jjtn002,  2);
                                              }
                                            }
/*@egen*/               )*
}

void AdditiveExpression()         : {}
{
    MultiplicativeExpression() ( "+"/*@bgen(jjtree) #Add( 2) */
                                     {
                                       MyNode jjtn001 = new MyNode(JJTADD);
                                       boolean jjtc001 = true;
                                       jjtree.openNodeScope(jjtn001);
                                     }
                                     try {
/*@egen*/ MultiplicativeExpression()/*@bgen(jjtree)*/
                                     } catch (Throwable jjte001) {
                                       if (jjtc001) {
                                         jjtree.clearNodeScope(jjtn001);
                                         jjtc001 = false;
                                       } else {
                                         jjtree.popNode();
                                       }
                                       if (jjte001 instanceof RuntimeException) {
                                         throw (RuntimeException)jjte001;
                                       }
                                       if (jjte001 instanceof ParseException) {
                                         throw (ParseException)jjte001;
                                       }
                                       throw (Error)jjte001;
                                     } finally {
                                       if (jjtc001) {
                                         jjtree.closeNodeScope(jjtn001,  2);
                                       }
                                     }
/*@egen*/        
                               | "-"/*@bgen(jjtree) #Subtract( 2) */
                                     {
                                       MyNode jjtn002 = new MyNode(JJTSUBTRACT);
                                       boolean jjtc002 = true;
                                       jjtree.openNodeScope(jjtn002);
                                     }
                                     try {
/*@egen*/ MultiplicativeExpression()/*@bgen(jjtree)*/
                                     } catch (Throwable jjte002) {
                                       if (jjtc002) {
                                         jjtree.clearNodeScope(jjtn002);
                                         jjtc002 = false;
                                       } else {
                                         jjtree.popNode();
                                       }
                                       if (jjte002 instanceof RuntimeException) {
                                         throw (RuntimeException)jjte002;
                                       }
                                       if (jjte002 instanceof ParseException) {
                                         throw (ParseException)jjte002;
                                       }
                                       throw (Error)jjte002;
                                     } finally {
                                       if (jjtc002) {
                                         jjtree.closeNodeScope(jjtn002,  2);
                                       }
                                     }
/*@egen*/             )*
}

void MultiplicativeExpression()         : {}
{
    PrefixExpression() ( "*"/*@bgen(jjtree) #Multiply( 2) */
                             {
                               MyNode jjtn001 = new MyNode(JJTMULTIPLY);
                               boolean jjtc001 = true;
                               jjtree.openNodeScope(jjtn001);
                             }
                             try {
/*@egen*/ PrefixExpression()/*@bgen(jjtree)*/
                             } catch (Throwable jjte001) {
                               if (jjtc001) {
                                 jjtree.clearNodeScope(jjtn001);
                                 jjtc001 = false;
                               } else {
                                 jjtree.popNode();
                               }
                               if (jjte001 instanceof RuntimeException) {
                                 throw (RuntimeException)jjte001;
                               }
                               if (jjte001 instanceof ParseException) {
                                 throw (ParseException)jjte001;
                               }
                               throw (Error)jjte001;
                             } finally {
                               if (jjtc001) {
                                 jjtree.closeNodeScope(jjtn001,  2);
                               }
                             }
/*@egen*/             
                       | "/"/*@bgen(jjtree) #Divide( 2) */
                             {
                               MyNode jjtn002 = new MyNode(JJTDIVIDE);
                               boolean jjtc002 = true;
                               jjtree.openNodeScope(jjtn002);
                             }
                             try {
/*@egen*/ PrefixExpression()/*@bgen(jjtree)*/
                             } catch (Throwable jjte002) {
                               if (jjtc002) {
                                 jjtree.clearNodeScope(jjtn002);
                                 jjtc002 = false;
                               } else {
                                 jjtree.popNode();
                               }
                               if (jjte002 instanceof RuntimeException) {
                                 throw (RuntimeException)jjte002;
                               }
                               if (jjte002 instanceof ParseException) {
                                 throw (ParseException)jjte002;
                               }
                               throw (Error)jjte002;
                             } finally {
                               if (jjtc002) {
                                 jjtree.closeNodeScope(jjtn002,  2);
                               }
                             }
/*@egen*/           
                       | "%"/*@bgen(jjtree) #Modulo( 2) */
                             {
                               MyNode jjtn003 = new MyNode(JJTMODULO);
                               boolean jjtc003 = true;
                               jjtree.openNodeScope(jjtn003);
                             }
                             try {
/*@egen*/ PrefixExpression()/*@bgen(jjtree)*/
                             } catch (Throwable jjte003) {
                               if (jjtc003) {
                                 jjtree.clearNodeScope(jjtn003);
                                 jjtc003 = false;
                               } else {
                                 jjtree.popNode();
                               }
                               if (jjte003 instanceof RuntimeException) {
                                 throw (RuntimeException)jjte003;
                               }
                               if (jjte003 instanceof ParseException) {
                                 throw (ParseException)jjte003;
                               }
                               throw (Error)jjte003;
                             } finally {
                               if (jjtc003) {
                                 jjtree.closeNodeScope(jjtn003,  2);
                               }
                             }
/*@egen*/           )*
}

void PrefixExpression()         : {}
{	
    // issue on the cast. It breaks if((x&y) == 1) {y++;} because it captures the second "(" and thinks type is next
    // TODO add casting back: "(" Type() ")"
    SuffixExpression()
    | "++"/*@bgen(jjtree) #PreIncrement( 1) */
           {
             MyNode jjtn001 = new MyNode(JJTPREINCREMENT);
             boolean jjtc001 = true;
             jjtree.openNodeScope(jjtn001);
           }
           try {
/*@egen*/ PrefixExpression()/*@bgen(jjtree)*/
           } catch (Throwable jjte001) {
             if (jjtc001) {
               jjtree.clearNodeScope(jjtn001);
               jjtc001 = false;
             } else {
               jjtree.popNode();
             }
             if (jjte001 instanceof RuntimeException) {
               throw (RuntimeException)jjte001;
             }
             if (jjte001 instanceof ParseException) {
               throw (ParseException)jjte001;
             }
             throw (Error)jjte001;
           } finally {
             if (jjtc001) {
               jjtree.closeNodeScope(jjtn001,  1);
             }
           }
/*@egen*/                 
    | "--"/*@bgen(jjtree) #PreDecrement( 1) */
           {
             MyNode jjtn002 = new MyNode(JJTPREDECREMENT);
             boolean jjtc002 = true;
             jjtree.openNodeScope(jjtn002);
           }
           try {
/*@egen*/ PrefixExpression()/*@bgen(jjtree)*/
           } catch (Throwable jjte002) {
             if (jjtc002) {
               jjtree.clearNodeScope(jjtn002);
               jjtc002 = false;
             } else {
               jjtree.popNode();
             }
             if (jjte002 instanceof RuntimeException) {
               throw (RuntimeException)jjte002;
             }
             if (jjte002 instanceof ParseException) {
               throw (ParseException)jjte002;
             }
             throw (Error)jjte002;
           } finally {
             if (jjtc002) {
               jjtree.closeNodeScope(jjtn002,  1);
             }
           }
/*@egen*/                 
    | "+"/*@bgen(jjtree) #Positive( 1) */
          {
            MyNode jjtn003 = new MyNode(JJTPOSITIVE);
            boolean jjtc003 = true;
            jjtree.openNodeScope(jjtn003);
          }
          try {
/*@egen*/ PrefixExpression()/*@bgen(jjtree)*/
          } catch (Throwable jjte003) {
            if (jjtc003) {
              jjtree.clearNodeScope(jjtn003);
              jjtc003 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte003 instanceof RuntimeException) {
              throw (RuntimeException)jjte003;
            }
            if (jjte003 instanceof ParseException) {
              throw (ParseException)jjte003;
            }
            throw (Error)jjte003;
          } finally {
            if (jjtc003) {
              jjtree.closeNodeScope(jjtn003,  1);
            }
          }
/*@egen*/             
    | "-"/*@bgen(jjtree) #Negative( 1) */
          {
            MyNode jjtn004 = new MyNode(JJTNEGATIVE);
            boolean jjtc004 = true;
            jjtree.openNodeScope(jjtn004);
          }
          try {
/*@egen*/ PrefixExpression()/*@bgen(jjtree)*/
          } catch (Throwable jjte004) {
            if (jjtc004) {
              jjtree.clearNodeScope(jjtn004);
              jjtc004 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte004 instanceof RuntimeException) {
              throw (RuntimeException)jjte004;
            }
            if (jjte004 instanceof ParseException) {
              throw (ParseException)jjte004;
            }
            throw (Error)jjte004;
          } finally {
            if (jjtc004) {
              jjtree.closeNodeScope(jjtn004,  1);
            }
          }
/*@egen*/             
    | "!"/*@bgen(jjtree) #Not( 1) */
          {
            MyNode jjtn005 = new MyNode(JJTNOT);
            boolean jjtc005 = true;
            jjtree.openNodeScope(jjtn005);
          }
          try {
/*@egen*/ PrefixExpression()/*@bgen(jjtree)*/
          } catch (Throwable jjte005) {
            if (jjtc005) {
              jjtree.clearNodeScope(jjtn005);
              jjtc005 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte005 instanceof RuntimeException) {
              throw (RuntimeException)jjte005;
            }
            if (jjte005 instanceof ParseException) {
              throw (ParseException)jjte005;
            }
            throw (Error)jjte005;
          } finally {
            if (jjtc005) {
              jjtree.closeNodeScope(jjtn005,  1);
            }
          }
/*@egen*/        
    | "~"/*@bgen(jjtree) #BitNot( 1) */
          {
            MyNode jjtn006 = new MyNode(JJTBITNOT);
            boolean jjtc006 = true;
            jjtree.openNodeScope(jjtn006);
          }
          try {
/*@egen*/ PrefixExpression()/*@bgen(jjtree)*/
          } catch (Throwable jjte006) {
            if (jjtc006) {
              jjtree.clearNodeScope(jjtn006);
              jjtc006 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte006 instanceof RuntimeException) {
              throw (RuntimeException)jjte006;
            }
            if (jjte006 instanceof ParseException) {
              throw (ParseException)jjte006;
            }
            throw (Error)jjte006;
          } finally {
            if (jjtc006) {
              jjtree.closeNodeScope(jjtn006,  1);
            }
          }
/*@egen*/           
    | "*"/*@bgen(jjtree) #Dereference( 1) */
          {
            MyNode jjtn007 = new MyNode(JJTDEREFERENCE);
            boolean jjtc007 = true;
            jjtree.openNodeScope(jjtn007);
          }
          try {
/*@egen*/ PrefixExpression()/*@bgen(jjtree)*/
          } catch (Throwable jjte007) {
            if (jjtc007) {
              jjtree.clearNodeScope(jjtn007);
              jjtc007 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte007 instanceof RuntimeException) {
              throw (RuntimeException)jjte007;
            }
            if (jjte007 instanceof ParseException) {
              throw (ParseException)jjte007;
            }
            throw (Error)jjte007;
          } finally {
            if (jjtc007) {
              jjtree.closeNodeScope(jjtn007,  1);
            }
          }
/*@egen*/                
    | "&"/*@bgen(jjtree) #AddressOf( 1) */
          {
            MyNode jjtn008 = new MyNode(JJTADDRESSOF);
            boolean jjtc008 = true;
            jjtree.openNodeScope(jjtn008);
          }
          try {
/*@egen*/ PrefixExpression()/*@bgen(jjtree)*/
          } catch (Throwable jjte008) {
            if (jjtc008) {
              jjtree.clearNodeScope(jjtn008);
              jjtc008 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte008 instanceof RuntimeException) {
              throw (RuntimeException)jjte008;
            }
            if (jjte008 instanceof ParseException) {
              throw (ParseException)jjte008;
            }
            throw (Error)jjte008;
          } finally {
            if (jjtc008) {
              jjtree.closeNodeScope(jjtn008,  1);
            }
          }
/*@egen*/              
    | "sizeof"/*@bgen(jjtree) #Sizeof( 1) */
               {
                 MyNode jjtn009 = new MyNode(JJTSIZEOF);
                 boolean jjtc009 = true;
                 jjtree.openNodeScope(jjtn009);
               }
               try {
/*@egen*/ PrefixExpression()/*@bgen(jjtree)*/
               } catch (Throwable jjte009) {
                 if (jjtc009) {
                   jjtree.clearNodeScope(jjtn009);
                   jjtc009 = false;
                 } else {
                   jjtree.popNode();
                 }
                 if (jjte009 instanceof RuntimeException) {
                   throw (RuntimeException)jjte009;
                 }
                 if (jjte009 instanceof ParseException) {
                   throw (ParseException)jjte009;
                 }
                 throw (Error)jjte009;
               } finally {
                 if (jjtc009) {
                   jjtree.closeNodeScope(jjtn009,  1);
                 }
               }
/*@egen*/           
    | "(" Type() ")"/*@bgen(jjtree) #Cast( 2) */
                     {
                       MyNode jjtn010 = new MyNode(JJTCAST);
                       boolean jjtc010 = true;
                       jjtree.openNodeScope(jjtn010);
                     }
                     try {
/*@egen*/ PrefixExpression()/*@bgen(jjtree)*/
                     } catch (Throwable jjte010) {
                       if (jjtc010) {
                         jjtree.clearNodeScope(jjtn010);
                         jjtc010 = false;
                       } else {
                         jjtree.popNode();
                       }
                       if (jjte010 instanceof RuntimeException) {
                         throw (RuntimeException)jjte010;
                       }
                       if (jjte010 instanceof ParseException) {
                         throw (ParseException)jjte010;
                       }
                       throw (Error)jjte010;
                     } finally {
                       if (jjtc010) {
                         jjtree.closeNodeScope(jjtn010,  2);
                       }
                     }
/*@egen*/         
}

void SuffixExpression()         : {}
{
    AtomicExpression() 
			(/*@bgen(jjtree) #PostIncrement( 1) */
                          {
                            MyNode jjtn001 = new MyNode(JJTPOSTINCREMENT);
                            boolean jjtc001 = true;
                            jjtree.openNodeScope(jjtn001);
                          }
                          try {
/*@egen*/ "++"/*@bgen(jjtree)*/
                          } finally {
                            if (jjtc001) {
                              jjtree.closeNodeScope(jjtn001,  1);
                            }
                          }
/*@egen*/                  
			|/*@bgen(jjtree) #PostDecrement( 1) */
                          {
                            MyNode jjtn002 = new MyNode(JJTPOSTDECREMENT);
                            boolean jjtc002 = true;
                            jjtree.openNodeScope(jjtn002);
                          }
                          try {
/*@egen*/ "--"/*@bgen(jjtree)*/
                          } finally {
                            if (jjtc002) {
                              jjtree.closeNodeScope(jjtn002,  1);
                            }
                          }
/*@egen*/                  
			| "(" Expression()/*@bgen(jjtree) #FunctionCall( 2) */
                                           {
                                             MyNode jjtn003 = new MyNode(JJTFUNCTIONCALL);
                                             boolean jjtc003 = true;
                                             jjtree.openNodeScope(jjtn003);
                                           }
                                           try {
/*@egen*/ ")"/*@bgen(jjtree)*/
                                           } finally {
                                             if (jjtc003) {
                                               jjtree.closeNodeScope(jjtn003,  2);
                                             }
                                           }
/*@egen*/                 
			| "[" Expression()/*@bgen(jjtree) #ArrayAccess( 2) */
                                           {
                                             MyNode jjtn004 = new MyNode(JJTARRAYACCESS);
                                             boolean jjtc004 = true;
                                             jjtree.openNodeScope(jjtn004);
                                           }
                                           try {
/*@egen*/ "]"/*@bgen(jjtree)*/
                                           } finally {
                                             if (jjtc004) {
                                               jjtree.closeNodeScope(jjtn004,  2);
                                             }
                                           }
/*@egen*/                )*
}

void AtomicExpression()         : {}
{
   Identifier()
    | Number()
    | StringLiteral()
    | CharacterConstant()
    | "(" Expression() ")"
}

void Identifier()             : {/*@bgen(jjtree) Identifier */
  MyNode jjtn000 = new MyNode(JJTIDENTIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Identifier */
    try {
/*@egen*/
    <IDENTIFIER>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
    	jjtn000.setName(token.image);
    	jjtn000.setKind(token.kind);
    	jjtn000.setCol(token.beginLine);
    	jjtn000.setRow(token.beginColumn);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void CharacterConstant() : {/*@bgen(jjtree) CharacterConstant */
  MyNode jjtn000 = new MyNode(JJTCHARACTERCONSTANT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) CharacterConstant */
    try {
/*@egen*/
    <CHARACTER_CONST>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
    	jjtn000.setName(token.image);
    	jjtn000.setKind(token.kind);
    	jjtn000.setCol(token.beginLine);
    	jjtn000.setRow(token.beginColumn);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Number() : {/*@bgen(jjtree) Number */
  MyNode jjtn000 = new MyNode(JJTNUMBER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Number */
    try {
/*@egen*/
    <NUMBER>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
    	jjtn000.setName(token.image);
    	jjtn000.setKind(token.kind);
    	jjtn000.setCol(token.beginLine);
    	jjtn000.setRow(token.beginColumn);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void StringLiteral() : {/*@bgen(jjtree) StringLiteral */
  MyNode jjtn000 = new MyNode(JJTSTRINGLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) StringLiteral */
    try {
/*@egen*/
    <STRING_LIT>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
    	jjtn000.setName(token.image);
    	jjtn000.setKind(token.kind);
    	jjtn000.setCol(token.beginLine);
    	jjtn000.setRow(token.beginColumn);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Boolean_Not() : {/*@bgen(jjtree) Boolean_Not */
  MyNode jjtn000 = new MyNode(JJTBOOLEAN_NOT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Boolean_Not */
    try {
/*@egen*/
    <BOOLEAN_NOT>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
    	jjtn000.setName(token.image);
    	jjtn000.setKind(token.kind);
    	jjtn000.setCol(token.beginLine);
    	jjtn000.setRow(token.beginColumn);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Boolean_And() : {/*@bgen(jjtree) Boolean_And */
  MyNode jjtn000 = new MyNode(JJTBOOLEAN_AND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Boolean_And */
    try {
/*@egen*/
    <BOOLEAN_AND>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
    	jjtn000.setName(token.image);
    	jjtn000.setKind(token.kind);
    	jjtn000.setCol(token.beginLine);
    	jjtn000.setRow(token.beginColumn);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Boolean_Or() : {/*@bgen(jjtree) Boolean_Or */
  MyNode jjtn000 = new MyNode(JJTBOOLEAN_OR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Boolean_Or */
    try {
/*@egen*/
    <BOOLEAN_OR>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
    	jjtn000.setName(token.image);
    	jjtn000.setKind(token.kind);
    	jjtn000.setCol(token.beginLine);
    	jjtn000.setRow(token.beginColumn);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Bit_Not() : {/*@bgen(jjtree) Bit_Not */
  MyNode jjtn000 = new MyNode(JJTBIT_NOT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Bit_Not */
    try {
/*@egen*/
    <BIT_NOT>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
    	jjtn000.setName(token.image);
    	jjtn000.setKind(token.kind);
    	jjtn000.setCol(token.beginLine);
    	jjtn000.setRow(token.beginColumn);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Bit_And() : {/*@bgen(jjtree) Bit_And */
  MyNode jjtn000 = new MyNode(JJTBIT_AND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Bit_And */
    try {
/*@egen*/
    <BIT_AND>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
    	jjtn000.setName(token.image);
    	jjtn000.setKind(token.kind);
    	jjtn000.setCol(token.beginLine);
    	jjtn000.setRow(token.beginColumn);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Bit_Or() : {/*@bgen(jjtree) Bit_Or */
  MyNode jjtn000 = new MyNode(JJTBIT_OR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Bit_Or */
    try {
/*@egen*/
    <BIT_OR>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
    	jjtn000.setName(token.image);
    	jjtn000.setKind(token.kind);
    	jjtn000.setCol(token.beginLine);
    	jjtn000.setRow(token.beginColumn);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Bit_Xor() : {/*@bgen(jjtree) Bit_Xor */
  MyNode jjtn000 = new MyNode(JJTBIT_XOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Bit_Xor */
    try {
/*@egen*/
    <BIT_XOR>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
    	jjtn000.setName(token.image);
    	jjtn000.setKind(token.kind);
    	jjtn000.setCol(token.beginLine);
    	jjtn000.setRow(token.beginColumn);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Left_Shift() : {/*@bgen(jjtree) Left_Shift */
  MyNode jjtn000 = new MyNode(JJTLEFT_SHIFT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Left_Shift */
    try {
/*@egen*/
    <LEFT_SHIFT>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        System.out.print("<< ");

    	jjtn000.setName(token.image);
    	jjtn000.setKind(token.kind);
    	jjtn000.setCol(token.beginLine);
    	jjtn000.setRow(token.beginColumn);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Right_Shift() : {/*@bgen(jjtree) Right_Shift */
  MyNode jjtn000 = new MyNode(JJTRIGHT_SHIFT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Right_Shift */
    try {
/*@egen*/
    <RIGHT_SHIFT>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        System.out.print(">> ");

    	jjtn000.setName(token.image);
    	jjtn000.setKind(token.kind);
    	jjtn000.setCol(token.beginLine);
    	jjtn000.setRow(token.beginColumn);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void R_Paren() : {/*@bgen(jjtree) R_Paren */
  MyNode jjtn000 = new MyNode(JJTR_PAREN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) R_Paren */
    try {
/*@egen*/
    <R_PAREN>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        System.out.print(") ");

    	jjtn000.setName(token.image);
    	jjtn000.setKind(token.kind);
    	jjtn000.setCol(token.beginLine);
    	jjtn000.setRow(token.beginColumn);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void L_Paren() : {/*@bgen(jjtree) L_Paren */
  MyNode jjtn000 = new MyNode(JJTL_PAREN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) L_Paren */
    try {
/*@egen*/
    <L_PAREN>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        System.out.print("( ");

    	jjtn000.setName(token.image);
    	jjtn000.setKind(token.kind);
    	jjtn000.setCol(token.beginLine);
    	jjtn000.setRow(token.beginColumn);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Plus() : {/*@bgen(jjtree) Plus */
  MyNode jjtn000 = new MyNode(JJTPLUS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Plus */
    try {
/*@egen*/
    <PLUS>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        System.out.print("+ ");

    	jjtn000.setName(token.image);
    	jjtn000.setKind(token.kind);
    	jjtn000.setCol(token.beginLine);
    	jjtn000.setRow(token.beginColumn);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Plus_Plus() : {/*@bgen(jjtree) Plus_Plus */
  MyNode jjtn000 = new MyNode(JJTPLUS_PLUS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Plus_Plus */
    try {
/*@egen*/
    <PLUS_PLUS>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        System.out.print("++ ");

    	jjtn000.setName(token.image);
    	jjtn000.setKind(token.kind);
    	jjtn000.setCol(token.beginLine);
    	jjtn000.setRow(token.beginColumn);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Minus() : {/*@bgen(jjtree) Minus */
  MyNode jjtn000 = new MyNode(JJTMINUS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Minus */
    try {
/*@egen*/
    <MINUS>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        System.out.print("- ");

    	jjtn000.setName(token.image);
    	jjtn000.setKind(token.kind);
    	jjtn000.setCol(token.beginLine);
    	jjtn000.setRow(token.beginColumn);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Minus_Minus() : {/*@bgen(jjtree) Minus_Minus */
  MyNode jjtn000 = new MyNode(JJTMINUS_MINUS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Minus_Minus */
    try {
/*@egen*/
    <MINUS_MINUS>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
    	jjtn000.setName(token.image);
    	jjtn000.setKind(token.kind);
    	jjtn000.setCol(token.beginLine);
    	jjtn000.setRow(token.beginColumn);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Star(): {/*@bgen(jjtree) Star */
  MyNode jjtn000 = new MyNode(JJTSTAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Star */
    try {
/*@egen*/
    <STAR>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
    	jjtn000.setName(token.image);
    	jjtn000.setKind(token.kind);
    	jjtn000.setCol(token.beginLine);
    	jjtn000.setRow(token.beginColumn);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Mod() : {/*@bgen(jjtree) Mod */
  MyNode jjtn000 = new MyNode(JJTMOD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Mod */
    try {
/*@egen*/
    <MOD>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        System.out.print("% ");

    	jjtn000.setName(token.image);
    	jjtn000.setKind(token.kind);
    	jjtn000.setCol(token.beginLine);
    	jjtn000.setRow(token.beginColumn);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Divide() : {/*@bgen(jjtree) Divide */
  MyNode jjtn000 = new MyNode(JJTDIVIDE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Divide */
    try {
/*@egen*/
    <DIVIDE>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        System.out.print("/ ");
 
     	jjtn000.setName(token.image);
    	jjtn000.setKind(token.kind);
    	jjtn000.setCol(token.beginLine);
    	jjtn000.setRow(token.beginColumn);
   }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Equals() : {/*@bgen(jjtree) Equals */
  MyNode jjtn000 = new MyNode(JJTEQUALS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Equals */
    try {
/*@egen*/
    <EQUALS>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        System.out.print("= ");

    	jjtn000.setName(token.image);
    	jjtn000.setKind(token.kind);
    	jjtn000.setCol(token.beginLine);
    	jjtn000.setRow(token.beginColumn);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Less_Than() : {/*@bgen(jjtree) Less_Than */
  MyNode jjtn000 = new MyNode(JJTLESS_THAN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Less_Than */
    try {
/*@egen*/
    <LESS_THAN>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        System.out.print("< ");

    	jjtn000.setName(token.image);
    	jjtn000.setKind(token.kind);
    	jjtn000.setCol(token.beginLine);
    	jjtn000.setRow(token.beginColumn);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Greater_Than() : {/*@bgen(jjtree) Greater_Than */
  MyNode jjtn000 = new MyNode(JJTGREATER_THAN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Greater_Than */
    try {
/*@egen*/
    <GREATER_THAN>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        System.out.print("> ");

    	jjtn000.setName(token.image);
    	jjtn000.setKind(token.kind);
    	jjtn000.setCol(token.beginLine);
    	jjtn000.setRow(token.beginColumn);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Equals_Equals()       : {}
{
    <EQUALS_EQUALS>
    {
    }
}

void Not_Equals() : {/*@bgen(jjtree) Not_Equals */
  MyNode jjtn000 = new MyNode(JJTNOT_EQUALS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Not_Equals */
    try {
/*@egen*/
    <NOT_EQUALS>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        System.out.print("!= ");

    	jjtn000.setName(token.image);
    	jjtn000.setKind(token.kind);
    	jjtn000.setCol(token.beginLine);
    	jjtn000.setRow(token.beginColumn);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Tokens() : {/*@bgen(jjtree) Tokens */
  MyNode jjtn000 = new MyNode(JJTTOKENS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Tokens */
    try {
/*@egen*/
    (FunctionDefinition() | Statement() | <COMMENT>)* <EOF>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{	
    	jjtn000.setName(token.image);
    	jjtn000.setKind(token.kind);
    	jjtn000.setCol(token.beginLine);
    	jjtn000.setRow(token.beginColumn);
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}