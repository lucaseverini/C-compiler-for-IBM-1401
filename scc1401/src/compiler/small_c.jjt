/*
	small_c.jj

    Assignment #7 - CS153 - SJSU
	November-18-2014

	By Sean Papay, Matt Pleva, Luca Severini
*/

options
{
	DEBUG_PARSER=false;// true;
	LOOKAHEAD=99999;
  //NODE_CLASS="MyNode";
}

PARSER_BEGIN(SmallCC)

package compiler;
import java.util.*;
import preprocessor.*;
import retree.*;
import retree.statement.*;
import retree.expression.*;
import retree.exceptions.*;
import retree.program.*;
import retree.type.*;
import retree.symtab.*;
import java.io.*;
import static retree.RetreeUtils.*;

public class SmallCC
{
	// used during tree build
  public static SymbolTableStack variableTable = new SymbolTableStack();
  public static HashMap<String,ConstantExpression> functionTable = new HashMap<String,ConstantExpression>();

  private static int labelNumber = 0;
  public static int nextLabelNumber() {
		return labelNumber++;
	}

  public static void main(String args[]) throws Exception
  {
		compile(args[0]);
  }

  public static void compile(String fileName) throws Exception
  {
    File file = new File(fileName);
    Reader sr = new FileReader(file);

    SmallCC parser = new SmallCC(sr);
    Program program = parser.program();
    if (errorFree) {
			System.out.print(program.generateCode());
		}
		//printTree(program);

  }
  
  private static boolean errorFree = true;
  
  public static void reportError(Exception e, Token t) {
		reportError(e.toString(), t);
	}
	
	public static void reportError(String m, Token t) {
		errorFree = false;
		System.out.println("Error on line " + t.beginLine + " column " + t.beginColumn);
		System.out.println(m);
	}

  public static void printTree(SimpleNode node)
  {
  	System.out.println("===== AST (parse tree) =====");

    printTree(node, 0);
  }

  public static void printTree(SimpleNode node, int level)
  {
    for (int i = 0; i < level; ++i)
    {

    	System.out.print("    ");
    }

	MyNode n = (MyNode)node;
	int kind = n.getKind();
	String name = n.getName();

	String begin = String.format("<%s>", node.toString());
    System.out.println(begin);

    // System.out.println(kind);

	if(kind == 49 || kind == 50 || kind == 51 || kind == 52 || kind == 15)
	{
		for (int i = 0; i < level; ++i)
		{
			System.out.print("    ");
		}

   		System.out.println("    " + name);
	}

    int numChildren = node.jjtGetNumChildren();
    for(int i = 0; i <  numChildren; ++i)
    {
      printTree((SimpleNode)node.jjtGetChild(i), level + 1);
    }

    for (int i = 0; i < level; ++i)
    {
    	System.out.print("    ");
    }

	String end = String.format("</%s>", node.toString());
    System.out.println(end);
  }
}

PARSER_END(SmallCC)


SKIP :
{
    " "
  | "\t"
  | "\n"
  | "\r\n"
}

TOKEN :
{
    <BREAK : "break">
  | <CASE: "case">
  | <CONTINUE: "continue">
  | <_DEFAULT: "default">
  | <DO: "do">
  | <ELSE: "else">
  | <FOR: "for">
  | <GOTO: "goto">
  | <IF: "if">
  | <INT: "int">
  | <CHAR: "char">
  | <LONG: "long">
  | <RETURN: "return">
  | <SHORT: "short">
  | <SIZEOF: "sizeof">
  | <STATIC: "static">
  | <SWITCH: "switch">
  | <TYPEDEF: "typedef">
  | <UNSIGNED: "unsigned">
  | <WHILE: "while">
  | <SEMI_COLON: ";">
  | <PLUS_PLUS: "++">
  | <MINUS_MINUS: "--">
  | <PLUS: "+">
  | <MINUS: "-">
  | <STAR: "*">
  | <DIVIDE: "/">
  | <MOD: "%">
  | <BIT_AND: "&">
  | <BIT_OR: "|">
  | <BIT_XOR: "^">
  | <BIT_NOT: "~">
  | <BOOLEAN_NOT: "!">
  | <BOOLEAN_AND: "&&">
  | <BOOLEAN_OR: "||">
  | <GREATER_THAN: ">">
  | <LESS_THAN: "<">
  | <LEFT_SHIFT: "<<">
  | <RIGHT_SHIFT: ">>">
  | <EQUALS: "=">
  | <EQUALS_EQUALS: "==">
  | <NOT_EQUALS: "!=">
  | <L_PAREN: "(">
  | <R_PAREN: ")">

  | <IDENTIFIER : (<IDENTIFIER_CHAR>)(<IDENTIFIER_CHAR> | ["0"-"9","_"])*>
  | <NUMBER : (<DIGIT>)+>
  | <STRING_LIT : "\"" (~["\"", "\n", "\\"] | ("\\" ~[]))* "\"">
  | <CHARACTER_CONST  : "\'" (~["\'", "\n", "\\"] | ("\\" ~[]))* "\'">
  | <COMMENT: <LINE_COMMENT> | <MULTI_LINE_COMMENT>>
  | <LINE_COMMENT : "//" (~["\n"])* <NEWLINE> >
  | <MULTI_LINE_COMMENT: "/*" (~["*"] | ("*")* ~["/"])* "*/">
  | <NEWLINE : "\r\n" | "\n" >
  | <#NOT_NEWLINE : ~["\n","\r"]>
  | <#IDENTIFIER_CHAR : ["A"-"Z","a"-"z","_"]>
  | <#DIGIT : ["0"-"9"]>
 }

/** Main production. */

Program program() throws Exception : {
	Program program = new Program();
	List<Initializer> initList;
	FunctionDefinition func;
}
{
  		(initList = globalVariableDeclaration() {
				//System.out.println(initList.size());
				for (Initializer init : initList) {
					program.addInitializer(init);
				}
			}
				| functionDeclaration() //not supported just yet...
				| func = functionDefinition() {
					program.addFunction(func);
				}
			)*
  		{
				int mainLabelNumber = functionTable.get("main").getValue();
				program.setMainLabelNumber(mainLabelNumber);

				return program;
			}
}

Type bareType(): {}
{
  ("char" {return Type.charType;} | "int" {return Type.intType;})

}

Type Type(): {
	Type t;
}
{
  	(t = bareType() ("*" {t = new PointerType(t);} )*) {return t;}
}

List<Initializer> globalVariableDeclaration() : {
		List<Initializer> inits = new ArrayList<Initializer>();
		Type baseType = Type.intType;
}
{
	(baseType=bareType() )? inits=variableDeclarationList(baseType, true) ";"

	{
    	return inits;
	}
}

List<Initializer> localVariableDeclaration() : {
	List<Initializer> initializers;
	Type baseType;
}
{
	baseType = bareType() initializers = variableDeclarationList(baseType, false) ";" {
		return initializers;
	}
}

List<Initializer> variableDeclarationList(Type baseType, boolean isStatic) : {
	List<Initializer> inits = new ArrayList<Initializer>();
	Initializer init;
}
{
	init=variableInitializer(baseType, isStatic) {
		inits.add(init);
	}
	("," init=variableInitializer(baseType, isStatic) {
		inits.add(init);
	})*
	{
		return inits;
	}
}

Initializer variableInitializer(Type baseType, boolean isStatic) : {
	Initializer init = null;
	VariableExpression variable;
	Expression value = null;
}
{
	                                                     //ternaryExpression, since we can't have a comma-separated or assignment expression
	variable = suffixedVariable(baseType, isStatic) ("=" value=ternaryExpression())?
	{
		return new Initializer(variable, value);
	}
}

//here is where we add it to our SymbolTable, since we know
//the full type
VariableExpression suffixedVariable(Type baseType, boolean isStatic) : {
	Pair<Type,String> pair;
	Expression arraySize = null;
	int size = -1;
	Type type;
	Expression variable;
}
{
	(pair=PrefixedVariable(baseType) "[" (arraySize = expression()) "]" {
		arraySize = arraySize.collapse();
		if (!(arraySize instanceof ConstantExpression)) {
			throw new NonConstantExpressionException(arraySize);
		}
		size = ((ConstantExpression) arraySize).getValue();
		type = new ArrayType(size, pair.a);
	}
	/* we don't currently support non-sized arrays
	| PrefixedVariable() "[" "]" */
	| pair=PrefixedVariable(baseType) {
		type = pair.a;
	})
	{
		if (isStatic) {
			return SmallCC.variableTable.addStatic(pair.b, type);
		} else {
			return SmallCC.variableTable.add(pair.b,type, false);
		}
	}
}

Pair<Type,String> PrefixedVariable(Type baseType) : {
	Pair<Type,String> pair = new Pair<Type,String>();
	pair.a = baseType;
}
{
	(pair.b=Identifier()
	| "*" pair=PrefixedVariable(new PointerType(baseType)))
	{
		return pair;
	}
}


void functionDeclaration() : {}
{
    Type() Identifier() ("(" (FunctionDeclarationParameter() ("," FunctionDeclarationParameter())*)? ")")  ";"

	{
		//todo - add this to the symbol table
	}
}

void FunctionDeclarationParameter(): {}
{
    (Type() (Identifier())? | Identifier()) ("[" (expression())? "]")?

}

FunctionDefinition functionDefinition() : {
	Type retType = Type.intType;
	List<VariableExpression> parameters = new ArrayList<VariableExpression>();
	VariableExpression param;
	FunctionType type;
	String name;
	BlockStatement block;
	variableTable.push();
	
	try {
		//this is the function's return address.
		//stored under an empty identifier, so no variable can collide with it
		//the value will be assigned automatically.
		variableTable.add("", new PointerType(Type.charType), false);
	} catch(Exception e) {
		reportError("we should never be here 1", token);
	}
}
{

    (retType=Type())? name=Identifier()

		(("(" (param=functionDefinitionParameter(parameters.size()) {
			parameters.add(param);
		} ("," param=functionDefinitionParameter(parameters.size()) {
			parameters.add(param);
		})*)? ("..." {parameters.add(null);})? ")" ) ) {
			List<Type> paramTypes = new ArrayList<Type>();
			boolean variadic = false;
			for (VariableExpression p : parameters) {
				if (p == null) {
					variadic = true;
					break;
				}
				paramTypes.add(p.getType());
			} if (!variadic) {
				//we're calling the location of the return value "return"
				variableTable.add("return", retType, true);
			}
			type = new FunctionType(retType, paramTypes, variadic);
			ConstantExpression dec = functionTable.get(name);
			if (dec != null) {
				if (! dec.getType().equals(type)) {
					throw new Error("Type mismatch: function " + name +
						"was previously declared as type " + dec.getType());
				}
			} else {
				dec = new ConstantExpression(type, nextLabelNumber());
				functionTable.put(name, dec);
			}
		}
				//we provide no return label - this is a top-level block.
        block = blockStatement(true, null)
		{
			variableTable.pop();
			return new FunctionDefinition(dec, block);
		}
}

VariableExpression functionDefinitionParameter(int paramNum): {
	Type type = Type.intType;
	String name;
}
{
	(type=Type())? name=Identifier()
	("[" (expression())? "]" {

		//in function parameters, array types are literally just pointer types.
		type = new PointerType(type);
	})? {
		if (variableTable.searchTop(name) != null) {
			throw new Error("Redefinition of variable " + name);
		}
		return variableTable.add(name, type, true);
	}
}

BlockStatement blockStatement(boolean isFunction, String returnLabel) : {
	List<Initializer> initializers = new ArrayList<Initializer>();
	List<Statement> statements = new ArrayList<Statement>();
	List<Initializer> initList;
	String newReturnLabel = label(nextLabelNumber());
	Statement s;
	if (isFunction) {
		try {
			initializers.add(new Initializer(variableTable.searchStack(""), null));
		} catch (Exception e) {
			reportError("We should never be here 0", token);
		}
	}
}{
	{
		//functions have already pushed, and will pop after
		if (!isFunction) variableTable.push();
	}
	"{" (initList=localVariableDeclaration() {
		for (Initializer init : initList) {
			initializers.add(init);
		}
	})* (s = statement(newReturnLabel) {
		statements.add(s);		
	})* "}"
	{
		//System.out.println(variableTable.peek().getStackOffset());
		BlockStatement bs = new BlockStatement(initializers, statements, variableTable.peek().getLocalSize(), newReturnLabel, returnLabel);
		if (!isFunction) {
			variableTable.pop();
		}
		return bs;
	}
}

Statement statement(String returnLabel)  : {
	Statement stat, stat2 = null;
	Expression exp=null, exp2=null, exp3=null;
}
{
		";" {
			return new EmptyStatement();
		}
		| exp=expression() ";" {
			return new ExpressionStatement(exp);
		}
		| stat = blockStatement(false, returnLabel) {
			return stat;
		}
    | "if" "(" exp=expression() ")" stat=statement(returnLabel) ("else" stat2=statement(returnLabel))?  {
			return new IfStatement(exp, stat, stat2);
		}
    | "while" "(" exp=expression() ")" stat=statement(returnLabel) {
			return new WhileStatement(exp, stat);
		}
    | "for" "(" (exp=expression()";"| ";" ) (exp2=expression() ";" | ";" ) (exp3=expression() ")" | ")" ) stat=statement(returnLabel) {
			return new ForStatement(exp, exp2, exp3, stat);
		}
    | "do" stat=statement(returnLabel) "while" "(" exp=expression() ")" ";" {
			return new DoWhileStatement(exp, stat);
		}
    /* There is an issue here, the block statement in the switch statement isn't taking on any children.  You might have to
     * make another production rule for a switch statement body that looks like a block statement with cases. */
    //TODO| "switch" "(" expression() ")" CaseBlock()
    //TODO| "break" ";"
    //TODO| "continue" ";"
    | "return" (exp=expression())? ";" {
			return new ReturnStatement(exp, variableTable.searchStack("return"), returnLabel);
			
		}
    //TODO| Identifier() ":" Statement()
    //TODO| "goto" Identifier() ";"
}
/*
void CaseStatement() : {}
{
	(("case" expression() | "default") ":" (CaseStatement() | statement()))
}

void CaseBlock() : {}
{
	"{" (localVariableDeclaration())* (statement() | CaseStatement()) * "}"
}
*/
/** Left-to-right*/
Expression expression() : {
	Expression l = null;
	Expression r = null;
}
{
    l = assignmentExpression() ("," r = assignmentExpression() {
			//l = new CommaExpression(l, r);
		})*
    {
			return l;
	}
}

/** Right-to-left */
Expression assignmentExpression() : {
	Expression l = null, r = null;
	Token lToken = null;
	try {
		lToken = getToken(1);
	} catch(Exception e) {
		reportError("Unexpected end of file.", token);
	}
}
{
    (l = ternaryExpression()
			( "+=" r = assignmentExpression() {
				r = new AddExpression(l, r);
			}
			| "-=" r = assignmentExpression() {
				r = new SubtractExpression(l, r);
			}
			| "*=" r = assignmentExpression() {
				r = new MultiplyExpression(l, r);
			}
			| "/=" r = assignmentExpression() {
				//r = new DivideExpression(l, r);
			}
			| "%=" r = assignmentExpression() {
				//r = new ModExpression(l, r);
			}
			| ">>=" r = assignmentExpression() {
				//r = new RightShiftExpression(l, r);
			}
			| "<<=" r = assignmentExpression() {
				//r = new LeftShiftExpression(l, r);
			}
			| "&=" r = assignmentExpression() {
				//r = new AndExpression(l, r);
			}
			| "^=" r = assignmentExpression() {
				//r = new XorExpression(l, r);
			}
			| "|=" r = assignmentExpression() {
				//r = new OrExpression(l, r);
			}
			| "=" r = assignmentExpression())?
		) {
				if (r != null) {
					if (l instanceof LValue)
						try {
							return new AssignmentExpression((LValue)l, r);
						} catch (TypeMismatchException e) {
							reportError(e, lToken);
						}
					else reportError("Left side of assignment must be an lvalue.", lToken);
				}
				return l;
			}
}

Expression ternaryExpression() : {
	Expression l = null, t = null, f = null;
}
{
    (l = orExpression() ("?" t = expression() ":" f = ternaryExpression() )?)
    {
		/*
		if (t != null && f != null)
		{
			return new TernaryExpression(l,t,f);
		}
		*/
		return l;
	}
}

/** left-to-right*/

Expression orExpression() : {
	Expression l = null, r = null;
}
{
    l = andExpression() ("||" r = andExpression() {
			/*
			l = new OrExpression(l, r);
			*/
		})*
	{
		return l;
	}
}

Expression andExpression() : {
	Expression l = null, r = null;
}
{
    l = bitOrExpression() ("&&" r = bitOrExpression() {
		/*
		l = new AndExpression(l, r);
		*/
		})*
	{
		return l;
	}
}

Expression bitOrExpression() : {
	Expression l = null, r = null;
}
{
    l = bitXorExpression() ("|" r = bitXorExpression() {
			/*
			l = new BitOrExpression(l, r);
			*/
		})*
	{
		return l;
	}
}

Expression bitXorExpression() : {
	Expression l = null, r = null;
}
{
    l = bitAndExpression() ("^" r = bitAndExpression() {
			/*
			l = new BitXorExpression(l, r);
			*/
		})*
	{
		return l;
	}
}

Expression bitAndExpression() : {
	Expression l = null, r = null;
}
{
    l = equalityExpression() ("&" r = equalityExpression() {
			/*
			l = new BitAndExpression(l, r);
			*/
		})*
	{
		return l;
	}
}

Expression equalityExpression() : {
	Expression l = null, r = null;
}
{
    l = greaterThanExpression() ( "==" r = greaterThanExpression() {
			try {
			l = new EqualExpression(l, r);
			} catch(TypeMismatchException e) {
				reportError(e, token);
			}

		}
    | "!=" r = greaterThanExpression() {
			l = new NotEqualExpression(l, r);
		})*
	{
		return l;
	}
}

Expression greaterThanExpression() : {
	Expression l = null, r = null;
}
{
    l = lessThanExpression() ( ">" r = lessThanExpression() {
			/*
			l = new GreaterThanExpression(l, r);
			*/
		}
		| ">=" r = lessThanExpression() {
			/*
			l = new GreaterThanOrEqualExpression(l, r);
			*/
		})*
	{
		return l;
	}
}

Expression lessThanExpression() : {
	Expression l = null, r = null;
}
{
    l = bitshiftExpression() ( "<" r = bitshiftExpression() {
			/*
			l = new LessThanExpression(l, r);
			*/
		}
		| "<=" r = bitshiftExpression() {
			/*
			l = new LessThanOrEqualExpression(l, r);
			*/
		})*
	{
		return l;
	}
}

Expression bitshiftExpression()  : {
	Expression l = null, r = null;
}
{
    l = additiveExpression() ( "<<" r = additiveExpression(){
			/*
			l = new BitshiftExpression(l, r);
			*/
		}
		| ">>" r = additiveExpression(){
			/*
			l = new BitshiftExpression(l, r);
			*/
		} )*
	{
		return l;
	}
}

Expression additiveExpression()  : {
	Expression l = null, r = null;
}
{
    l = multiplicativeExpression() ( "+" r = multiplicativeExpression(){
			l = new AddExpression(l, r);
		}
		| "-" r = multiplicativeExpression(){
			l = new SubtractExpression(l, r);
		} )*
	{
		return l;
	}
}

Expression multiplicativeExpression()  : {
	Expression l = null, r = null;
}
{
    (l = prefixExpression() ( "*" r = prefixExpression(){
			l = new MultiplyExpression(l, r);
		}
    | "/" r = prefixExpression(){
		/*
			l = new DivideExpression(l, r);
		*/
	}
    | "%" r = prefixExpression(){
		/*
			l = new ModExpression(l, r);
		*/
	} )*)
	{
		return l;
	}
}

Expression prefixExpression()  : {
	Expression e = null;
	Type t;
}
{
    // issue on the cast. It breaks if((x&y) == 1) {y++;} because it captures the second "(" and thinks type is next
    // TODO add casting back: "(" Type() ")"
    (e = SuffixExpression()
    | "++" e = prefixExpression()	{
			return new PreIncrementExpression((LValue)e);
		}
    | "--" e = prefixExpression()	{
			return new PreDecrementExpression((LValue)e);
		}
    | "+" e = prefixExpression()	{
										// e = new PositiveExpression(e);
									}
    | "-" e = prefixExpression()	{
										// e = new NegativeExpression(e);
									}
    | "!" e = prefixExpression()	{
										// e = new NotExpression(e);
									}
    | "~" e = prefixExpression()	{
										// e = new BitNotExpression(e);
									}
    | "*" e = prefixExpression()	{
			return new DereferenceExpression(e);
		}
    | "&" e = prefixExpression()	{
			// &array_name == array_name
			if (! (e instanceof ArrayNameExpression)) {
				return new AddressOfExpression((LValue)e);
			}
		}
    | "sizeof" e = prefixExpression()	{
			return new ConstantExpression(Type.intType, e.getType().sizeof());
		}
		| "sizeof" "(" t=Type() ")" {
			return new ConstantExpression(Type.intType, t.sizeof());
		}
    | "(" t = Type() ")" e = prefixExpression()	{
			// return new CastExpression(t,e);
		}
	)
	{
		return e;
	}

}

Expression SuffixExpression()  : {
	Expression e, inside;
	List<Expression> arguments;
}
{
    (e = AtomicExpression()
			( "++"	{
				e = new PostIncrementExpression((LValue)e);
			}
			| "--"	{
				e = new PostDecrementExpression((LValue)e);
			}
			| "(" arguments = expressionList() ")" {
				e = new FunctionCallExpression(e,arguments);
			}
			| "[" inside = expression() "]" {
				e = new SubscriptExpression(e, inside);
			} )*)
			{
				return e;
			}
}

List<Expression> expressionList() : {
	List<Expression> list = new ArrayList<Expression>();
	Expression exp;
} {
	(exp=assignmentExpression() {
		list.add(exp);
	}
	("," exp=assignmentExpression() {
		list.add(exp);
	})*)?

	{
		return list;
	}

}

Expression AtomicExpression()  : {
	Expression e = null;
	ConstantExpression ce = null;
	String str = "";
}
{
   (str = Identifier() {
		VariableExpression var = variableTable.searchStack(str);
		if (var == null){
			ConstantExpression fun = functionTable.get(str);
			if (fun == null) {
				return null;
			} else {
				return fun;
			}
		} else if (var.getType() instanceof ArrayType) {
			return new ArrayNameExpression(var);
		} else {
			return var;
		}
	}
    | str=Number(){
		int val = Integer.parseInt(str);
		ce = new ConstantExpression(Type.intType, val);
		e = ce;
	}
    | StringLiteral()
    | str=CharacterConstant() {
			int val = 0;
			//strip the quote characters
			str = str.substring(1, str.length() - 1);
			if (str.charAt(0) == '\\') {
				if (str.length() != 2) {
					//invalid char constant
					return null;
				}
				switch(str.charAt(1)) {
					case 'n':
						val = '\n';
						break;
					case '0':
						val = 0;
						break;
				}
			} else {
				if (str.length() != 1) {
					//invalid char constant.
					return null;
				}
				val = Character.toUpperCase(str.charAt(0));
			}
		ce = new ConstantExpression(Type.charType, val);
		e = ce;
	}
    | "(" expression() ")")
	{

		return e;
	}
}

String Identifier() : {}
{
    <IDENTIFIER>
    {
		return token.image;
	}
}

String CharacterConstant() : {}
{
    <CHARACTER_CONST>
	{
		//System.out.println("char: " + token.image);
		return token.image;
	}
}

String Number() : {}
{
    <NUMBER>
	{
		return token.image;
	}
}

String StringLiteral() : {}
{
    <STRING_LIT>
	{
		return token.image;
	}
}

void Boolean_Not() : {}
{
    <BOOLEAN_NOT>
}

void Boolean_And() : {}
{
    <BOOLEAN_AND>
}

void Boolean_Or() : {}
{
    <BOOLEAN_OR>
}

void Bit_Not() : {}
{
    <BIT_NOT>
}

void Bit_And() : {}
{
    <BIT_AND>
}

void Bit_Or() : {}
{
    <BIT_OR>
}

void Bit_Xor() : {}
{
    <BIT_XOR>
}

void Left_Shift() : {}
{
    <LEFT_SHIFT>
}
void Right_Shift() : {}
{
    <RIGHT_SHIFT>

}

void R_Paren() : {}
{
    <R_PAREN>
}

void L_Paren() : {}
{
    <L_PAREN>
}

void Plus() : {}
{
    <PLUS>
}

void Plus_Plus() : {}
{
    <PLUS_PLUS>
}

void Minus() : {}
{
    <MINUS>
}

void Minus_Minus() : {}
{
    <MINUS_MINUS>
}

void Star(): {}
{
    <STAR>

}

void Mod() : {}
{
    <MOD>
}

void Divide() : {}
{
    <DIVIDE>
}

void Equals() : {}
{
    <EQUALS>
}

void Less_Than() : {}
{
    <LESS_THAN>
}

void Greater_Than() : {}
{
    <GREATER_THAN>
}

void Equals_Equals()  : {}
{
    <EQUALS_EQUALS>
}

void Not_Equals() : {}
{
    <NOT_EQUALS>
}

JAVACODE
String handleError(String message)
{
	ParseException ex = generateParseException();
	Token token = ex.currentToken;
	System.out.println(ex.getMessage() + "\n" + message);

	do {
		token = getNextToken();
	} while (token.kind != SEMI_COLON);

	jjtree.popNode();
	return token.image;
}
