     ****************************************************************
     ***  pascal2.s
     ***  Generated by Small-C Compiler on 23-Feb-2015 04:05:05
     ****************************************************************
     ****************************************************************

     READ      EQU  001                * Read area
     PUNCH     EQU  101                * Punch area
     PRINT     EQU  201                * Print area
     
     PRCPOS    DCW  000                * char position in print area
     PUCPOS    DCW  000                * char position in punch area
     PUNSIZ    DCW  @080@              * Size of punch area
     PRTSIZ    DCW  @132@              * Size of print area
     EOS       DCW  @'@                * End Of String char
     EOL       DCW  @;@                * End Of Line char

               ORG  87
     X1        DSA  0                  * INDEX REGISTER 1
               ORG  92
     X2        DSA  0                  * INDEX REGISTER 2
               ORG  97
     X3        DSA  0                  * INDEX REGISTER 3
     
     * I need a single digit flag - should I replace this with a DA?
     RF        EQU  340
     
     ****************************************************************  
     * SET THE START POSITION OF CODE
               ORG  5500
     START     NOP  

     * SET THE STACK POINTER
               SBR  X2,400

               MCW  X2,X3
               LCA  LHCAAA,5005
               LCA  LICAAA,5025
               LCA  LJCAAA,5028
               LCA  LKCAAA,5033
               LCA  EOS,5022
               LCA  @F@,5021
               LCA  @E@,5020
               LCA  @D@,5019
               LCA  @C@,5018
               LCA  @B@,5017
               LCA  @A@,5016
               LCA  @9@,5015
               LCA  @8@,5014
               LCA  @7@,5013
               LCA  @6@,5012
               LCA  @5@,5011
               LCA  @4@,5010
               LCA  @3@,5009
               LCA  @2@,5008
               LCA  @1@,5007
               LCA  @0@,5006
               LCA  EOS,5040
               LCA  @C@,5039
               LCA  @%@,5038
               LCA  @D@,5037
               LCA  @%@,5036
               LCA  EOS,5077
               LCA  EOL,5076
               LCA  EOL,5075
               LCA  @S@,5074
               LCA  @N@,5073
               LCA  @O@,5072
               LCA  @I@,5071
               LCA  @T@,5070
               LCA  @A@,5069
               LCA  @R@,5068
               LCA  @E@,5067
               LCA  @T@,5066
               LCA  @I@,5065
               LCA  @ @,5064
               LCA  @D@,5063
               LCA  @%@,5062
               LCA  @ @,5061
               LCA  @H@,5060
               LCA  @T@,5059
               LCA  @I@,5058
               LCA  @W@,5057
               LCA  @ @,5056
               LCA  @E@,5055
               LCA  @L@,5054
               LCA  @G@,5053
               LCA  @N@,5052
               LCA  @A@,5051
               LCA  @I@,5050
               LCA  @R@,5049
               LCA  @T@,5048
               LCA  @ @,5047
               LCA  @L@,5046
               LCA  @A@,5045
               LCA  @C@,5044
               LCA  @S@,5043
               LCA  @A@,5042
               LCA  @P@,5041
               LCA  EOS,5085
               LCA  EOL,5084
               LCA  @.@,5083
               LCA  @E@,5082
               LCA  @N@,5081
               LCA  @O@,5080
               LCA  @D@,5079
               LCA  EOL,5078
               B    LBCAAA
               H    
     * FunctionDefinition((53))
     LBCAAA    SBR  3+X3
               SW   1+X3
               CW   2+X3
               CW   3+X3
     * BlockStatement(LCCAAA:null:218)
               MA   LPDAAA,X2
     * ForStatement((i = 0),(i <= 20)'(i++):retree.statement.BlockStatement@49134043:LECAAA:LFCAAA:LGCAAA)
     * Assignment(i=0)
     * ConstantExpression(0)
     * Push(LQDAAA:5)
               MA   LRDAAA,X2
               LCA  LQDAAA,0+X2
     * Push(LPDAAA:3)
               MA   LSDAAA,X2
               LCA  LPDAAA,0+X2
               MA   X3,0+X2
     * Pop(X1:3)
               LCA  0+X2,X1
               MA   LTDAAA,X2
     * Pop(0+X1:5)
               LCA  0+X2,0+X1
               MA   LUDAAA,X2
     LECAAA    NOP  
     * LessThanOrEqualExpression(i:20)
     * VariableExpression(i:218:false)
     * Push(218+X3:5)
               MA   LRDAAA,X2
               LCA  218+X3,0+X2
               B    LVDAAA
     * ConstantExpression(20)
     * Push(LXDAAA:5)
               MA   LRDAAA,X2
               LCA  LXDAAA,0+X2
               B    LVDAAA
               C    0+X2,15995+X2
     * Pop(5)
               MA   LUDAAA,X2
               MCW  LAEAAA,0+X2
               BH   LYDAAA
               B    LZDAAA
     LYDAAA    MCW  LQDAAA,0+X2
     LZDAAA    NOP  
               MCS  0+X2,0+X2
     * Pop(5)
               MA   LUDAAA,X2
               BCE  LFCAAA,5+X2, 
     * BlockStatement(LDCAAA:LCCAAA:0)
     * Assignment((x[i])=retree.expression.TernaryExpression@ee01430)
     * TernaryExpression((i == 1):1:0)
     * EqualExpression(i:1)
     * VariableExpression(i:218:false)
     * Push(218+X3:5)
               MA   LRDAAA,X2
               LCA  218+X3,0+X2
               B    LVDAAA
     * ConstantExpression(1)
     * Push(LAEAAA:5)
               MA   LRDAAA,X2
               LCA  LAEAAA,0+X2
               B    LVDAAA
               C    0+X2,15995+X2
     * Pop(5)
               MA   LUDAAA,X2
     * Pop(5)
               MA   LUDAAA,X2
     * Push(LQDAAA:5)
               MA   LRDAAA,X2
               LCA  LQDAAA,0+X2
               BE   LDEAAA
               B    LEEAAA
     LDEAAA    MCW  LAEAAA,0+X2
     LEEAAA    NOP  
               MCS  0+X2,0+X2
     * Pop(5)
               MA   LUDAAA,X2
               BCE  LBEAAA,5+X2, 
     * ConstantExpression(1)
     * Push(LAEAAA:5)
               MA   LRDAAA,X2
               LCA  LAEAAA,0+X2
               B    LCEAAA
     LBEAAA    NOP  
     * ConstantExpression(0)
     * Push(LQDAAA:5)
               MA   LRDAAA,X2
               LCA  LQDAAA,0+X2
     LCEAAA    NOP  
     * ArrayNameExpresssion(x:int [21])
     * Push(LFEAAA:3)
               MA   LSDAAA,X2
               LCA  LFEAAA,0+X2
               MA   X3,0+X2
     * VariableExpression(i:218:false)
     * Push(218+X3:5)
               MA   LRDAAA,X2
               LCA  218+X3,0+X2
     * raw index on the stack
     * Push(LGEAAA:5)
               MA   LRDAAA,X2
               LCA  LGEAAA,0+X2
               M    15995+X2,6+X2
               SW   2+X2
               LCA  6+X2,15995+X2
     * Pop(5)
               MA   LUDAAA,X2
     * STACK TOP IS NOW ARRAY INDEX
               B    LHEAAA
               MA   0+X2,15997+X2
     * Pop(3)
               MA   LTDAAA,X2
     * STACK top is location in array now.
     * Pop(X1:3)
               LCA  0+X2,X1
               MA   LTDAAA,X2
     * Pop(0+X1:5)
               LCA  0+X2,0+X1
               MA   LUDAAA,X2
     * Assignment((y[i])=0)
     * ConstantExpression(0)
     * Push(LQDAAA:5)
               MA   LRDAAA,X2
               LCA  LQDAAA,0+X2
     * ArrayNameExpresssion(y:int [21])
     * Push(LOEAAA:3)
               MA   LSDAAA,X2
               LCA  LOEAAA,0+X2
               MA   X3,0+X2
     * VariableExpression(i:218:false)
     * Push(218+X3:5)
               MA   LRDAAA,X2
               LCA  218+X3,0+X2
     * raw index on the stack
     * Push(LGEAAA:5)
               MA   LRDAAA,X2
               LCA  LGEAAA,0+X2
               M    15995+X2,6+X2
               SW   2+X2
               LCA  6+X2,15995+X2
     * Pop(5)
               MA   LUDAAA,X2
     * STACK TOP IS NOW ARRAY INDEX
               B    LHEAAA
               MA   0+X2,15997+X2
     * Pop(3)
               MA   LTDAAA,X2
     * STACK top is location in array now.
     * Pop(X1:3)
               LCA  0+X2,X1
               MA   LTDAAA,X2
     * Pop(0+X1:5)
               LCA  0+X2,0+X1
               MA   LUDAAA,X2
     LDCAAA    NOP  
               BCE  LCCAAA,RF,R
     LGCAAA    NOP  
     * PostIncrement(i)
     * Push(LPDAAA:3)
               MA   LSDAAA,X2
               LCA  LPDAAA,0+X2
               MA   X3,0+X2
     * Pop(X1:3)
               LCA  0+X2,X1
               MA   LTDAAA,X2
               A    LAEAAA,0+X1
               B    LECAAA
     LFCAAA    NOP  
     * FunctionCallExpr((36))
     * Push(5)
               MA   LRDAAA,X2
     * ConstantExpression(20)
     * Push(LXDAAA:5)
               MA   LRDAAA,X2
               LCA  LXDAAA,0+X2
     * ArrayNameExpresssion("Pascal Triangle with %d iterations\n\n":char [37])
     * Push(LPEAAA:3)
               MA   LSDAAA,X2
               LCA  LPEAAA,0+X2
     * Push(X3:3)
               MA   LSDAAA,X2
               LCA  X3,0+X2
               MCW  X2,X3
               B    LKBAAA
     * Pop(X3:3)
               LCA  0+X2,X3
               MA   LTDAAA,X2
     * Pop(3)
               MA   LTDAAA,X2
     * Pop(5)
               MA   LUDAAA,X2
     * Pop(5)
               MA   LUDAAA,X2
     * FunctionCallExpr((47))
     * Push(5)
               MA   LRDAAA,X2
     * ConstantExpression(0)
     * Push(LQDAAA:5)
               MA   LRDAAA,X2
               LCA  LQDAAA,0+X2
     * ArrayNameExpresssion(y:int [21])
     * Push(LOEAAA:3)
               MA   LSDAAA,X2
               LCA  LOEAAA,0+X2
               MA   X3,0+X2
     * ArrayNameExpresssion(x:int [21])
     * Push(LFEAAA:3)
               MA   LSDAAA,X2
               LCA  LFEAAA,0+X2
               MA   X3,0+X2
     * Push(X3:3)
               MA   LSDAAA,X2
               LCA  X3,0+X2
               MCW  X2,X3
               B    LVBAAA
     * Pop(X3:3)
               LCA  0+X2,X3
               MA   LTDAAA,X2
     * Pop(3)
               MA   LTDAAA,X2
     * Pop(3)
               MA   LTDAAA,X2
     * Pop(5)
               MA   LUDAAA,X2
     * Pop(5)
               MA   LUDAAA,X2
     * FunctionCallExpr((36))
     * Push(5)
               MA   LRDAAA,X2
     * ArrayNameExpresssion("\nDone.\n":char [8])
     * Push(LQEAAA:3)
               MA   LSDAAA,X2
               LCA  LQEAAA,0+X2
     * Push(X3:3)
               MA   LSDAAA,X2
               LCA  X3,0+X2
               MCW  X2,X3
               B    LKBAAA
     * Pop(X3:3)
               LCA  0+X2,X3
               MA   LTDAAA,X2
     * Pop(3)
               MA   LTDAAA,X2
     * Pop(5)
               MA   LUDAAA,X2
     LCCAAA    NOP  
               MA   LREAAA,X2
               MCW  @ @,RF
               LCA  3+X3,X1
               B    0+X1
     * FunctionDefinition((5))
     LFAAAA    SBR  3+X3
               SW   1+X3
               CW   2+X3
               CW   3+X3
     * BlockStatement(LGAAAA:null:8)
               LCA  LSEAAA,8+X3
               MA   LFEAAA,X2
     LTEAAA    NOP  
     * NotEqualExpression((str[(++len)]):'\0')
     * SubScriptEpression(str:(++len))
     * VariableExpression(str:-3:false)
     * Push(15997+X3:3)
               MA   LSDAAA,X2
               LCA  15997+X3,0+X2
     * PreIncrement(len)
     * Push(LFEAAA:3)
               MA   LSDAAA,X2
               LCA  LFEAAA,0+X2
               MA   X3,0+X2
     * Pop(X1:3)
               LCA  0+X2,X1
               MA   LTDAAA,X2
               A    LAEAAA,0+X1
     * Push(0+X1:5)
               MA   LRDAAA,X2
               LCA  0+X1,0+X2
     * raw index on the stack
     * Push(LAEAAA:5)
               MA   LRDAAA,X2
               LCA  LAEAAA,0+X2
               M    15995+X2,6+X2
               SW   2+X2
               LCA  6+X2,15995+X2
     * Pop(5)
               MA   LUDAAA,X2
     * STACK TOP IS NOW ARRAY INDEX
               B    LHEAAA
               MA   0+X2,15997+X2
     * Pop(3)
               MA   LTDAAA,X2
     * STACK top is location in array now.
     * Pop(X1:3)
               LCA  0+X2,X1
               MA   LTDAAA,X2
     * Push(0+X1:1)
               MA   LXEAAA,X2
               LCA  0+X1,0+X2
     * ConstantExpression(0)
     * Push(EOS:1)
               MA   LXEAAA,X2
               LCA  EOS,0+X2
               C    0+X2,15999+X2
     * Pop(1)
               MA   LYEAAA,X2
     * Pop(1)
               MA   LYEAAA,X2
     * Push(LAEAAA:5)
               MA   LRDAAA,X2
               LCA  LAEAAA,0+X2
               BE   LVEAAA
               B    LWEAAA
     LVEAAA    MCW  LQDAAA,0+X2
     LWEAAA    NOP  
               MCS  0+X2,0+X2
     * Pop(5)
               MA   LUDAAA,X2
               BCE  LUEAAA,5+X2, 
               B    LTEAAA
     LUEAAA    NOP  
     * VariableExpression(len:8:false)
     * Push(8+X3:5)
               MA   LRDAAA,X2
               LCA  8+X3,0+X2
     * Pop(15994+X3:5)
               LCA  0+X2,15994+X3
               MA   LUDAAA,X2
     * set the return flag, so we know do deallocate our stack
               MCW  @R@,RF
     * and branch
               B    LGAAAA
     LGAAAA    NOP  
               MA   LZEAAA,X2
               MCW  @ @,RF
               LCA  3+X3,X1
               B    0+X1
     * FunctionDefinition((1))
     LBAAAA    SBR  3+X3
               SW   1+X3
               CW   2+X3
               CW   3+X3
     * BlockStatement(LCAAAA:null:3)
               MA   LSDAAA,X2
     * Assignment(seed=retree.expression.ModuloExpression@279ac931)
     * ModuloExpression(((42 * seed) + 19):100000)
     * ConstantExpression(100000)
     * Push(LAFAAA:5)
               MA   LRDAAA,X2
               LCA  LAFAAA,0+X2
     * Addition((42 * seed)+19)
     * Multiplication(42*seed)
     * ConstantExpression(42)
     * Push(LBFAAA:5)
               MA   LRDAAA,X2
               LCA  LBFAAA,0+X2
     * VariableExpression(seed:5005:true)
     * Push(5005:5)
               MA   LRDAAA,X2
               LCA  5005,0+X2
               M    15995+X2,6+X2
               SW   2+X2
               LCA  6+X2,15995+X2
     * Pop(5)
               MA   LUDAAA,X2
     * ConstantExpression(19)
     * Push(LCFAAA:5)
               MA   LRDAAA,X2
               LCA  LCFAAA,0+X2
               A    0+X2,15995+X2
     * Pop(5)
               MA   LUDAAA,X2
               B    LDFAAA
     * Pop(5)
               MA   LUDAAA,X2
     * Push(LJFAAA:3)
               MA   LSDAAA,X2
               LCA  LJFAAA,0+X2
     * Pop(X1:3)
               LCA  0+X2,X1
               MA   LTDAAA,X2
     * Pop(0+X1:5)
               LCA  0+X2,0+X1
               MA   LUDAAA,X2
     * VariableExpression(seed:5005:true)
     * Push(5005:5)
               MA   LRDAAA,X2
               LCA  5005,0+X2
     * Pop(15997+X3:5)
               LCA  0+X2,15997+X3
               MA   LUDAAA,X2
     * set the return flag, so we know do deallocate our stack
               MCW  @R@,RF
     * and branch
               B    LCAAAA
     LCAAAA    NOP  
               MA   LTDAAA,X2
               MCW  @ @,RF
               LCA  3+X3,X1
               B    0+X1
     * FunctionDefinition((20))
     LUAAAA    SBR  3+X3
               SW   1+X3
               CW   2+X3
               CW   3+X3
     * BlockStatement(LVAAAA:null:3)
               MA   LSDAAA,X2
     * if(retree.statement.BlockStatement@1e78234c:retree.statement.BlockStatement@61556234)
     * NotEqualExpression(c:'\n')
     * VariableExpression(c:-3:false)
     * Push(15997+X3:1)
               MA   LXEAAA,X2
               LCA  15997+X3,0+X2
     * ConstantExpression(10)
     * Push(EOL:1)
               MA   LXEAAA,X2
               LCA  EOL,0+X2
               C    0+X2,15999+X2
     * Pop(1)
               MA   LYEAAA,X2
     * Pop(1)
               MA   LYEAAA,X2
     * Push(LAEAAA:5)
               MA   LRDAAA,X2
               LCA  LAEAAA,0+X2
               BE   LMFAAA
               B    LNFAAA
     LMFAAA    MCW  LQDAAA,0+X2
     LNFAAA    NOP  
               MCS  0+X2,0+X2
     * Pop(5)
               MA   LUDAAA,X2
               BCE  LKFAAA,5+X2, 
     * BlockStatement(LWAAAA:LVAAAA:0)
     * Assignment(( *(__putchar_pos++) )=c)
     * VariableExpression(c:-3:false)
     * Push(15997+X3:1)
               MA   LXEAAA,X2
               LCA  15997+X3,0+X2
     * PostIncrement(__putchar_pos)
     * Push(LOFAAA:3)
               MA   LSDAAA,X2
               LCA  LOFAAA,0+X2
     * Pop(X1:3)
               LCA  0+X2,X1
               MA   LTDAAA,X2
     * Push(0+X1:3)
               MA   LSDAAA,X2
               LCA  0+X1,0+X2
               MA   LXEAAA,0+X1
     * Pop(X1:3)
               LCA  0+X2,X1
               MA   LTDAAA,X2
     * Pop(0+X1:1)
               LCA  0+X2,0+X1
               MA   LYEAAA,X2
     LWAAAA    NOP  
               BCE  LVAAAA,RF,R
               B    LLFAAA
     LKFAAA    NOP  
     * BlockStatement(LXAAAA:LVAAAA:0)
     LPFAAA    NOP  
     * GreaterThanOrEqualExpression(((int) __putchar_last):((int) __putchar_pos))
     * VariableExpression(__putchar_last:5028:true)
     * Push(5028:3)
               MA   LSDAAA,X2
               LCA  5028,0+X2
               B    LRFAAA
               B    LVDAAA
     * VariableExpression(__putchar_pos:5025:true)
     * Push(5025:3)
               MA   LSDAAA,X2
               LCA  5025,0+X2
               B    LRFAAA
               B    LVDAAA
               C    0+X2,15995+X2
     * Pop(5)
               MA   LUDAAA,X2
               MCW  LAEAAA,0+X2
               BL   LAGAAA
               B    LBGAAA
     LAGAAA    MCW  LQDAAA,0+X2
     LBGAAA    NOP  
               MCS  0+X2,0+X2
     * Pop(5)
               MA   LUDAAA,X2
               BCE  LQFAAA,5+X2, 
     * BlockStatement(LYAAAA:LXAAAA:0)
     * Assignment(( *(__putchar_last--) )=' ')
     * ConstantExpression(32)
     * Push(@ @:1)
               MA   LXEAAA,X2
               LCA  @ @,0+X2
     * PostDecrement(__putchar_last)
     * Push(LCGAAA:3)
               MA   LSDAAA,X2
               LCA  LCGAAA,0+X2
     * Pop(X1:3)
               LCA  0+X2,X1
               MA   LTDAAA,X2
     * Push(0+X1:3)
               MA   LSDAAA,X2
               LCA  0+X1,0+X2
               MA   LYEAAA,0+X1
     * Pop(X1:3)
               LCA  0+X2,X1
               MA   LTDAAA,X2
     * Pop(0+X1:1)
               LCA  0+X2,0+X1
               MA   LYEAAA,X2
     LYAAAA    NOP  
               BCE  LXAAAA,RF,R
               B    LPFAAA
     LQFAAA    NOP  
     * Assignment(__putchar_last=__putchar_pos)
     * VariableExpression(__putchar_pos:5025:true)
     * Push(5025:3)
               MA   LSDAAA,X2
               LCA  5025,0+X2
     * Push(LCGAAA:3)
               MA   LSDAAA,X2
               LCA  LCGAAA,0+X2
     * Pop(X1:3)
               LCA  0+X2,X1
               MA   LTDAAA,X2
     * Pop(0+X1:3)
               LCA  0+X2,0+X1
               MA   LTDAAA,X2
     * Assignment(__putchar_pos=(201))
     * ConstantExpression(201)
     * Push(LICAAA:3)
               MA   LSDAAA,X2
               LCA  LICAAA,0+X2
     * Push(LOFAAA:3)
               MA   LSDAAA,X2
               LCA  LOFAAA,0+X2
     * Pop(X1:3)
               LCA  0+X2,X1
               MA   LTDAAA,X2
     * Pop(0+X1:3)
               LCA  0+X2,0+X1
               MA   LTDAAA,X2
     * Start asm block
               W    
     * End asm block
     LXAAAA    NOP  
               BCE  LVAAAA,RF,R
     LLFAAA    NOP  
     * if(retree.statement.BlockStatement@2ca275d8:null)
     * EqualExpression(__putchar_pos:(333))
     * VariableExpression(__putchar_pos:5025:true)
     * Push(5025:3)
               MA   LSDAAA,X2
               LCA  5025,0+X2
     * ConstantExpression(333)
     * Push(LGGAAA:3)
               MA   LSDAAA,X2
               LCA  LGGAAA,0+X2
               C    0+X2,15997+X2
     * Pop(3)
               MA   LTDAAA,X2
     * Pop(3)
               MA   LTDAAA,X2
     * Push(LQDAAA:5)
               MA   LRDAAA,X2
               LCA  LQDAAA,0+X2
               BE   LEGAAA
               B    LFGAAA
     LEGAAA    MCW  LAEAAA,0+X2
     LFGAAA    NOP  
               MCS  0+X2,0+X2
     * Pop(5)
               MA   LUDAAA,X2
               BCE  LDGAAA,5+X2, 
     * BlockStatement(LZAAAA:LVAAAA:0)
     * Assignment(__putchar_last=__putchar_pos)
     * VariableExpression(__putchar_pos:5025:true)
     * Push(5025:3)
               MA   LSDAAA,X2
               LCA  5025,0+X2
     * Push(LCGAAA:3)
               MA   LSDAAA,X2
               LCA  LCGAAA,0+X2
     * Pop(X1:3)
               LCA  0+X2,X1
               MA   LTDAAA,X2
     * Pop(0+X1:3)
               LCA  0+X2,0+X1
               MA   LTDAAA,X2
     * Assignment(__putchar_pos=(201))
     * ConstantExpression(201)
     * Push(LICAAA:3)
               MA   LSDAAA,X2
               LCA  LICAAA,0+X2
     * Push(LOFAAA:3)
               MA   LSDAAA,X2
               LCA  LOFAAA,0+X2
     * Pop(X1:3)
               LCA  0+X2,X1
               MA   LTDAAA,X2
     * Pop(0+X1:3)
               LCA  0+X2,0+X1
               MA   LTDAAA,X2
     * Start asm block
               W    
     * End asm block
     LZAAAA    NOP  
               BCE  LVAAAA,RF,R
     LDGAAA    NOP  
     LVAAAA    NOP  
               MA   LTDAAA,X2
               MCW  @ @,RF
               LCA  3+X3,X1
               B    0+X1
     * FunctionDefinition((7))
     LHAAAA    SBR  3+X3
               SW   1+X3
               CW   2+X3
               CW   3+X3
     * BlockStatement(LIAAAA:null:3)
               MA   LSDAAA,X2
     LHGAAA    NOP  
     * NotEqualExpression((( *(dest++) ) = ( *(src++) )):'\0')
     * Assignment(( *(dest++) )=( *(src++) ))
     * DereferenceExpression((src++))
     * PostIncrement(src)
     * Push(LLGAAA:3)
               MA   LSDAAA,X2
               LCA  LLGAAA,0+X2
               MA   X3,0+X2
     * Pop(X1:3)
               LCA  0+X2,X1
               MA   LTDAAA,X2
     * Push(0+X1:3)
               MA   LSDAAA,X2
               LCA  0+X1,0+X2
               MA   LXEAAA,0+X1
     * Pop(X1:3)
               LCA  0+X2,X1
               MA   LTDAAA,X2
     * Push(0+X1:1)
               MA   LXEAAA,X2
               LCA  0+X1,0+X2
     * PostIncrement(dest)
     * Push(LTDAAA:3)
               MA   LSDAAA,X2
               LCA  LTDAAA,0+X2
               MA   X3,0+X2
     * Pop(X1:3)
               LCA  0+X2,X1
               MA   LTDAAA,X2
     * Push(0+X1:3)
               MA   LSDAAA,X2
               LCA  0+X1,0+X2
               MA   LXEAAA,0+X1
     * Pop(X1:3)
               LCA  0+X2,X1
               MA   LTDAAA,X2
               LCA  0+X2,0+X1
     * ConstantExpression(0)
     * Push(EOS:1)
               MA   LXEAAA,X2
               LCA  EOS,0+X2
               C    0+X2,15999+X2
     * Pop(1)
               MA   LYEAAA,X2
     * Pop(1)
               MA   LYEAAA,X2
     * Push(LAEAAA:5)
               MA   LRDAAA,X2
               LCA  LAEAAA,0+X2
               BE   LJGAAA
               B    LKGAAA
     LJGAAA    MCW  LQDAAA,0+X2
     LKGAAA    NOP  
               MCS  0+X2,0+X2
     * Pop(5)
               MA   LUDAAA,X2
               BCE  LIGAAA,5+X2, 
               B    LHGAAA
     LIGAAA    NOP  
     LIAAAA    NOP  
               MA   LTDAAA,X2
               MCW  @ @,RF
               LCA  3+X3,X1
               B    0+X1
     * FunctionDefinition((26))
     LABAAA    SBR  3+X3
               SW   1+X3
               CW   2+X3
               CW   3+X3
     * BlockStatement(LBBAAA:null:3)
               MA   LSDAAA,X2
     LMGAAA    NOP  
     * NotEqualExpression(( *s ):'\0')
     * DereferenceExpression(s)
     * VariableExpression(s:-3:false)
     * Push(15997+X3:3)
               MA   LSDAAA,X2
               LCA  15997+X3,0+X2
     * Pop(X1:3)
               LCA  0+X2,X1
               MA   LTDAAA,X2
     * Push(0+X1:1)
               MA   LXEAAA,X2
               LCA  0+X1,0+X2
     * ConstantExpression(0)
     * Push(EOS:1)
               MA   LXEAAA,X2
               LCA  EOS,0+X2
               C    0+X2,15999+X2
     * Pop(1)
               MA   LYEAAA,X2
     * Pop(1)
               MA   LYEAAA,X2
     * Push(LAEAAA:5)
               MA   LRDAAA,X2
               LCA  LAEAAA,0+X2
               BE   LOGAAA
               B    LPGAAA
     LOGAAA    MCW  LQDAAA,0+X2
     LPGAAA    NOP  
               MCS  0+X2,0+X2
     * Pop(5)
               MA   LUDAAA,X2
               BCE  LNGAAA,5+X2, 
     * BlockStatement(LCBAAA:LBBAAA:0)
     * FunctionCallExpr((20))
     * Push(5)
               MA   LRDAAA,X2
     * DereferenceExpression((s++))
     * PostIncrement(s)
     * Push(LTDAAA:3)
               MA   LSDAAA,X2
               LCA  LTDAAA,0+X2
               MA   X3,0+X2
     * Pop(X1:3)
               LCA  0+X2,X1
               MA   LTDAAA,X2
     * Push(0+X1:3)
               MA   LSDAAA,X2
               LCA  0+X1,0+X2
               MA   LXEAAA,0+X1
     * Pop(X1:3)
               LCA  0+X2,X1
               MA   LTDAAA,X2
     * Push(0+X1:1)
               MA   LXEAAA,X2
               LCA  0+X1,0+X2
     * Push(X3:3)
               MA   LSDAAA,X2
               LCA  X3,0+X2
               MCW  X2,X3
               B    LUAAAA
     * Pop(X3:3)
               LCA  0+X2,X3
               MA   LTDAAA,X2
     * Pop(1)
               MA   LYEAAA,X2
     * Pop(5)
               MA   LUDAAA,X2
     LCBAAA    NOP  
               BCE  LBBAAA,RF,R
               B    LMGAAA
     LNGAAA    NOP  
     LBBAAA    NOP  
               MA   LTDAAA,X2
               MCW  @ @,RF
               LCA  3+X3,X1
               B    0+X1
     * FunctionDefinition((47))
     LVBAAA    SBR  3+X3
               SW   1+X3
               CW   2+X3
               CW   3+X3
     * BlockStatement(LWBAAA:null:14)
               MA   LQGAAA,X2
     * ForStatement((i = 1),(i < d)'(i++):retree.statement.BlockStatement@5c04e904:LYBAAA:LZBAAA:LACAAA)
     * Assignment(i=1)
     * ConstantExpression(1)
     * Push(LAEAAA:5)
               MA   LRDAAA,X2
               LCA  LAEAAA,0+X2
     * Push(LFEAAA:3)
               MA   LSDAAA,X2
               LCA  LFEAAA,0+X2
               MA   X3,0+X2
     * Pop(X1:3)
               LCA  0+X2,X1
               MA   LTDAAA,X2
     * Pop(0+X1:5)
               LCA  0+X2,0+X1
               MA   LUDAAA,X2
     LYBAAA    NOP  
     * LessThanExpression(i:d)
     * VariableExpression(i:8:false)
     * Push(8+X3:5)
               MA   LRDAAA,X2
               LCA  8+X3,0+X2
               B    LVDAAA
     * VariableExpression(d:-9:false)
     * Push(15991+X3:5)
               MA   LRDAAA,X2
               LCA  15991+X3,0+X2
               B    LVDAAA
               C    0+X2,15995+X2
     * Pop(5)
               MA   LUDAAA,X2
               MCW  LQDAAA,0+X2
               BL   LRGAAA
               B    LSGAAA
     LRGAAA    MCW  LAEAAA,0+X2
     LSGAAA    NOP  
               MCS  0+X2,0+X2
     * Pop(5)
               MA   LUDAAA,X2
               BCE  LZBAAA,5+X2, 
     * BlockStatement(LXBAAA:LWBAAA:0)
     * FunctionCallExpr((36))
     * Push(5)
               MA   LRDAAA,X2
     * TernaryExpression((i < (d - 1)):' ':'\n')
     * LessThanExpression(i:(d - 1))
     * VariableExpression(i:8:false)
     * Push(8+X3:5)
               MA   LRDAAA,X2
               LCA  8+X3,0+X2
               B    LVDAAA
     * Subtraction(d-1)
     * VariableExpression(d:-9:false)
     * Push(15991+X3:5)
               MA   LRDAAA,X2
               LCA  15991+X3,0+X2
     * ConstantExpression(1)
     * Push(LAEAAA:5)
               MA   LRDAAA,X2
               LCA  LAEAAA,0+X2
               S    0+X2,15995+X2
     * Pop(5)
               MA   LUDAAA,X2
               B    LVDAAA
               C    0+X2,15995+X2
     * Pop(5)
               MA   LUDAAA,X2
               MCW  LQDAAA,0+X2
               BL   LVGAAA
               B    LWGAAA
     LVGAAA    MCW  LAEAAA,0+X2
     LWGAAA    NOP  
               MCS  0+X2,0+X2
     * Pop(5)
               MA   LUDAAA,X2
               BCE  LTGAAA,5+X2, 
     * ConstantExpression(32)
     * Push(@ @:1)
               MA   LXEAAA,X2
               LCA  @ @,0+X2
               B    LUGAAA
     LTGAAA    NOP  
     * ConstantExpression(10)
     * Push(EOL:1)
               MA   LXEAAA,X2
               LCA  EOL,0+X2
     LUGAAA    NOP  
     * Assignment((y[i])=((x[(i - 1)]) + (x[i])))
     * Addition((x[(i - 1)])+(x[i]))
     * SubScriptEpression(x:(i - 1))
     * VariableExpression(x:-3:false)
     * Push(15997+X3:3)
               MA   LSDAAA,X2
               LCA  15997+X3,0+X2
     * Subtraction(i-1)
     * VariableExpression(i:8:false)
     * Push(8+X3:5)
               MA   LRDAAA,X2
               LCA  8+X3,0+X2
     * ConstantExpression(1)
     * Push(LAEAAA:5)
               MA   LRDAAA,X2
               LCA  LAEAAA,0+X2
               S    0+X2,15995+X2
     * Pop(5)
               MA   LUDAAA,X2
     * raw index on the stack
     * Push(LGEAAA:5)
               MA   LRDAAA,X2
               LCA  LGEAAA,0+X2
               M    15995+X2,6+X2
               SW   2+X2
               LCA  6+X2,15995+X2
     * Pop(5)
               MA   LUDAAA,X2
     * STACK TOP IS NOW ARRAY INDEX
               B    LHEAAA
               MA   0+X2,15997+X2
     * Pop(3)
               MA   LTDAAA,X2
     * STACK top is location in array now.
     * Pop(X1:3)
               LCA  0+X2,X1
               MA   LTDAAA,X2
     * Push(0+X1:5)
               MA   LRDAAA,X2
               LCA  0+X1,0+X2
     * SubScriptEpression(x:i)
     * VariableExpression(x:-3:false)
     * Push(15997+X3:3)
               MA   LSDAAA,X2
               LCA  15997+X3,0+X2
     * VariableExpression(i:8:false)
     * Push(8+X3:5)
               MA   LRDAAA,X2
               LCA  8+X3,0+X2
     * raw index on the stack
     * Push(LGEAAA:5)
               MA   LRDAAA,X2
               LCA  LGEAAA,0+X2
               M    15995+X2,6+X2
               SW   2+X2
               LCA  6+X2,15995+X2
     * Pop(5)
               MA   LUDAAA,X2
     * STACK TOP IS NOW ARRAY INDEX
               B    LHEAAA
               MA   0+X2,15997+X2
     * Pop(3)
               MA   LTDAAA,X2
     * STACK top is location in array now.
     * Pop(X1:3)
               LCA  0+X2,X1
               MA   LTDAAA,X2
     * Push(0+X1:5)
               MA   LRDAAA,X2
               LCA  0+X1,0+X2
               A    0+X2,15995+X2
     * Pop(5)
               MA   LUDAAA,X2
     * VariableExpression(y:-6:false)
     * Push(15994+X3:3)
               MA   LSDAAA,X2
               LCA  15994+X3,0+X2
     * VariableExpression(i:8:false)
     * Push(8+X3:5)
               MA   LRDAAA,X2
               LCA  8+X3,0+X2
     * raw index on the stack
     * Push(LGEAAA:5)
               MA   LRDAAA,X2
               LCA  LGEAAA,0+X2
               M    15995+X2,6+X2
               SW   2+X2
               LCA  6+X2,15995+X2
     * Pop(5)
               MA   LUDAAA,X2
     * STACK TOP IS NOW ARRAY INDEX
               B    LHEAAA
               MA   0+X2,15997+X2
     * Pop(3)
               MA   LTDAAA,X2
     * STACK top is location in array now.
     * Pop(X1:3)
               LCA  0+X2,X1
               MA   LTDAAA,X2
               LCA  0+X2,0+X1
     * ArrayNameExpresssion("%d%c":char [5])
     * Push(LXGAAA:3)
               MA   LSDAAA,X2
               LCA  LXGAAA,0+X2
     * Push(X3:3)
               MA   LSDAAA,X2
               LCA  X3,0+X2
               MCW  X2,X3
               B    LKBAAA
     * Pop(X3:3)
               LCA  0+X2,X3
               MA   LTDAAA,X2
     * Pop(3)
               MA   LTDAAA,X2
     * Pop(5)
               MA   LUDAAA,X2
     * Pop(1)
               MA   LYEAAA,X2
     * Pop(5)
               MA   LUDAAA,X2
     LXBAAA    NOP  
               BCE  LWBAAA,RF,R
     LACAAA    NOP  
     * PostIncrement(i)
     * Push(LFEAAA:3)
               MA   LSDAAA,X2
               LCA  LFEAAA,0+X2
               MA   X3,0+X2
     * Pop(X1:3)
               LCA  0+X2,X1
               MA   LTDAAA,X2
               A    LAEAAA,0+X1
               B    LYBAAA
     LZBAAA    NOP  
     * TernaryExpression((20 >= d):(47( y x (d + 1))):0)
     * GreaterThanOrEqualExpression(20:d)
     * ConstantExpression(20)
     * Push(LXDAAA:5)
               MA   LRDAAA,X2
               LCA  LXDAAA,0+X2
               B    LVDAAA
     * VariableExpression(d:-9:false)
     * Push(15991+X3:5)
               MA   LRDAAA,X2
               LCA  15991+X3,0+X2
               B    LVDAAA
               C    0+X2,15995+X2
     * Pop(5)
               MA   LUDAAA,X2
               MCW  LAEAAA,0+X2
               BL   LAHAAA
               B    LBHAAA
     LAHAAA    MCW  LQDAAA,0+X2
     LBHAAA    NOP  
               MCS  0+X2,0+X2
     * Pop(5)
               MA   LUDAAA,X2
               BCE  LYGAAA,5+X2, 
     * FunctionCallExpr((47))
     * Push(5)
               MA   LRDAAA,X2
     * Addition(d+1)
     * VariableExpression(d:-9:false)
     * Push(15991+X3:5)
               MA   LRDAAA,X2
               LCA  15991+X3,0+X2
     * ConstantExpression(1)
     * Push(LAEAAA:5)
               MA   LRDAAA,X2
               LCA  LAEAAA,0+X2
               A    0+X2,15995+X2
     * Pop(5)
               MA   LUDAAA,X2
     * VariableExpression(x:-3:false)
     * Push(15997+X3:3)
               MA   LSDAAA,X2
               LCA  15997+X3,0+X2
     * VariableExpression(y:-6:false)
     * Push(15994+X3:3)
               MA   LSDAAA,X2
               LCA  15994+X3,0+X2
     * Push(X3:3)
               MA   LSDAAA,X2
               LCA  X3,0+X2
               MCW  X2,X3
               B    LVBAAA
     * Pop(X3:3)
               LCA  0+X2,X3
               MA   LTDAAA,X2
     * Pop(3)
               MA   LTDAAA,X2
     * Pop(3)
               MA   LTDAAA,X2
     * Pop(5)
               MA   LUDAAA,X2
               B    LZGAAA
     LYGAAA    NOP  
     * ConstantExpression(0)
     * Push(LQDAAA:5)
               MA   LRDAAA,X2
               LCA  LQDAAA,0+X2
     LZGAAA    NOP  
     * Pop(15986+X3:5)
               LCA  0+X2,15986+X3
               MA   LUDAAA,X2
     * set the return flag, so we know do deallocate our stack
               MCW  @R@,RF
     * and branch
               B    LWBAAA
     LWBAAA    NOP  
               MA   LCHAAA,X2
               MCW  @ @,RF
               LCA  3+X3,X1
               B    0+X1
     * FunctionDefinition((15))
     LPAAAA    SBR  3+X3
               SW   1+X3
               CW   2+X3
               CW   3+X3
     * BlockStatement(LQAAAA:null:14)
               LCA  LDHAAA,9+X3
               LCA  LAEAAA,14+X3
               MA   LQGAAA,X2
     * Assignment(start=str)
     * VariableExpression(str:-8:false)
     * Push(15992+X3:3)
               MA   LSDAAA,X2
               LCA  15992+X3,0+X2
     * Push(LEHAAA:3)
               MA   LSDAAA,X2
               LCA  LEHAAA,0+X2
               MA   X3,0+X2
     * Pop(X1:3)
               LCA  0+X2,X1
               MA   LTDAAA,X2
     * Pop(0+X1:3)
               LCA  0+X2,0+X1
               MA   LTDAAA,X2
     * if(retree.statement.BlockStatement@52dce479:retree.statement.IfStatement@241bee6f)
     * LessThanExpression(value:0)
     * VariableExpression(value:-3:false)
     * Push(15997+X3:5)
               MA   LRDAAA,X2
               LCA  15997+X3,0+X2
               B    LVDAAA
     * ConstantExpression(0)
     * Push(LQDAAA:5)
               MA   LRDAAA,X2
               LCA  LQDAAA,0+X2
               B    LVDAAA
               C    0+X2,15995+X2
     * Pop(5)
               MA   LUDAAA,X2
               MCW  LQDAAA,0+X2
               BL   LHHAAA
               B    LIHAAA
     LHHAAA    MCW  LAEAAA,0+X2
     LIHAAA    NOP  
               MCS  0+X2,0+X2
     * Pop(5)
               MA   LUDAAA,X2
               BCE  LFHAAA,5+X2, 
     * BlockStatement(LRAAAA:LQAAAA:0)
     * Assignment(( *(str++) )='-')
     * ConstantExpression(45)
     * Push(@-@:1)
               MA   LXEAAA,X2
               LCA  @-@,0+X2
     * PostIncrement(str)
     * Push(LZEAAA:3)
               MA   LSDAAA,X2
               LCA  LZEAAA,0+X2
               MA   X3,0+X2
     * Pop(X1:3)
               LCA  0+X2,X1
               MA   LTDAAA,X2
     * Push(0+X1:3)
               MA   LSDAAA,X2
               LCA  0+X1,0+X2
               MA   LXEAAA,0+X1
     * Pop(X1:3)
               LCA  0+X2,X1
               MA   LTDAAA,X2
     * Pop(0+X1:1)
               LCA  0+X2,0+X1
               MA   LYEAAA,X2
     * Assignment(value=(-value))
     * NegExpression(value)
     * VariableExpression(value:-3:false)
     * Push(15997+X3:5)
               MA   LRDAAA,X2
               LCA  15997+X3,0+X2
               ZS   0+X2
               B    LVDAAA
     * Push(LTDAAA:3)
               MA   LSDAAA,X2
               LCA  LTDAAA,0+X2
               MA   X3,0+X2
     * Pop(X1:3)
               LCA  0+X2,X1
               MA   LTDAAA,X2
     * Pop(0+X1:5)
               LCA  0+X2,0+X1
               MA   LUDAAA,X2
     LRAAAA    NOP  
               BCE  LQAAAA,RF,R
               B    LGHAAA
     LFHAAA    NOP  
     * if(retree.statement.BlockStatement@25c2cbee:null)
     * EqualExpression(value:0)
     * VariableExpression(value:-3:false)
     * Push(15997+X3:5)
               MA   LRDAAA,X2
               LCA  15997+X3,0+X2
               B    LVDAAA
     * ConstantExpression(0)
     * Push(LQDAAA:5)
               MA   LRDAAA,X2
               LCA  LQDAAA,0+X2
               B    LVDAAA
               C    0+X2,15995+X2
     * Pop(5)
               MA   LUDAAA,X2
     * Pop(5)
               MA   LUDAAA,X2
     * Push(LQDAAA:5)
               MA   LRDAAA,X2
               LCA  LQDAAA,0+X2
               BE   LLHAAA
               B    LMHAAA
     LLHAAA    MCW  LAEAAA,0+X2
     LMHAAA    NOP  
               MCS  0+X2,0+X2
     * Pop(5)
               MA   LUDAAA,X2
               BCE  LKHAAA,5+X2, 
     * BlockStatement(LSAAAA:LQAAAA:0)
     * Assignment((str[0])='0')
     * ConstantExpression(48)
     * Push(@0@:1)
               MA   LXEAAA,X2
               LCA  @0@,0+X2
     * VariableExpression(str:-8:false)
     * Push(15992+X3:3)
               MA   LSDAAA,X2
               LCA  15992+X3,0+X2
     * ConstantExpression(0)
     * Push(LQDAAA:5)
               MA   LRDAAA,X2
               LCA  LQDAAA,0+X2
     * raw index on the stack
     * Push(LAEAAA:5)
               MA   LRDAAA,X2
               LCA  LAEAAA,0+X2
               M    15995+X2,6+X2
               SW   2+X2
               LCA  6+X2,15995+X2
     * Pop(5)
               MA   LUDAAA,X2
     * STACK TOP IS NOW ARRAY INDEX
               B    LHEAAA
               MA   0+X2,15997+X2
     * Pop(3)
               MA   LTDAAA,X2
     * STACK top is location in array now.
     * Pop(X1:3)
               LCA  0+X2,X1
               MA   LTDAAA,X2
     * Pop(0+X1:1)
               LCA  0+X2,0+X1
               MA   LYEAAA,X2
     * Assignment((str[1])='\0')
     * ConstantExpression(0)
     * Push(EOS:1)
               MA   LXEAAA,X2
               LCA  EOS,0+X2
     * VariableExpression(str:-8:false)
     * Push(15992+X3:3)
               MA   LSDAAA,X2
               LCA  15992+X3,0+X2
     * ConstantExpression(1)
     * Push(LAEAAA:5)
               MA   LRDAAA,X2
               LCA  LAEAAA,0+X2
     * raw index on the stack
     * Push(LAEAAA:5)
               MA   LRDAAA,X2
               LCA  LAEAAA,0+X2
               M    15995+X2,6+X2
               SW   2+X2
               LCA  6+X2,15995+X2
     * Pop(5)
               MA   LUDAAA,X2
     * STACK TOP IS NOW ARRAY INDEX
               B    LHEAAA
               MA   0+X2,15997+X2
     * Pop(3)
               MA   LTDAAA,X2
     * STACK top is location in array now.
     * Pop(X1:3)
               LCA  0+X2,X1
               MA   LTDAAA,X2
     * Pop(0+X1:1)
               LCA  0+X2,0+X1
               MA   LYEAAA,X2
     * VariableExpression(start:6:false)
     * Push(6+X3:3)
               MA   LSDAAA,X2
               LCA  6+X3,0+X2
     * Pop(15984+X3:3)
               LCA  0+X2,15984+X3
               MA   LTDAAA,X2
     * set the return flag, so we know do deallocate our stack
               MCW  @R@,RF
     * and branch
               B    LSAAAA
     LSAAAA    NOP  
               BCE  LQAAAA,RF,R
     LKHAAA    NOP  
     LGHAAA    NOP  
     LNHAAA    NOP  
     * LessThanOrEqualExpression(exp:retree.expression.DivideExpression@c81739c)
     * VariableExpression(exp:14:false)
     * Push(14+X3:5)
               MA   LRDAAA,X2
               LCA  14+X3,0+X2
               B    LVDAAA
     * Divide(value/base)
     * VariableExpression(base:-11:false)
     * Push(15989+X3:5)
               MA   LRDAAA,X2
               LCA  15989+X3,0+X2
     * VariableExpression(value:-3:false)
     * Push(15997+X3:5)
               MA   LRDAAA,X2
               LCA  15997+X3,0+X2
               B    LDFAAA
               MCW  0+X2,15995+X2
     * Pop(5)
               MA   LUDAAA,X2
               B    LVDAAA
               C    0+X2,15995+X2
     * Pop(5)
               MA   LUDAAA,X2
               MCW  LAEAAA,0+X2
               BH   LPHAAA
               B    LQHAAA
     LPHAAA    MCW  LQDAAA,0+X2
     LQHAAA    NOP  
               MCS  0+X2,0+X2
     * Pop(5)
               MA   LUDAAA,X2
               BCE  LOHAAA,5+X2, 
     * Assignment(exp=(exp * base))
     * Multiplication(exp*base)
     * VariableExpression(exp:14:false)
     * Push(14+X3:5)
               MA   LRDAAA,X2
               LCA  14+X3,0+X2
     * VariableExpression(base:-11:false)
     * Push(15989+X3:5)
               MA   LRDAAA,X2
               LCA  15989+X3,0+X2
               M    15995+X2,6+X2
               SW   2+X2
               LCA  6+X2,15995+X2
     * Pop(5)
               MA   LUDAAA,X2
     * Push(LQGAAA:3)
               MA   LSDAAA,X2
               LCA  LQGAAA,0+X2
               MA   X3,0+X2
     * Pop(X1:3)
               LCA  0+X2,X1
               MA   LTDAAA,X2
     * Pop(0+X1:5)
               LCA  0+X2,0+X1
               MA   LUDAAA,X2
               B    LNHAAA
     LOHAAA    NOP  
     LRHAAA    NOP  
     * VariableExpression(exp:14:false)
     * Push(14+X3:5)
               MA   LRDAAA,X2
               LCA  14+X3,0+X2
               MCS  0+X2,0+X2
     * Pop(5)
               MA   LUDAAA,X2
               BCE  LSHAAA,5+X2, 
     * BlockStatement(LTAAAA:LQAAAA:0)
     * Assignment(( *(str++) )=(digits[retree.expression.DivideExpression@6cd0d2e]))
     * SubScriptEpression(digits:retree.expression.DivideExpression@6cd0d2e)
     * VariableExpression(digits:9:false)
     * Push(9+X3:3)
               MA   LSDAAA,X2
               LCA  9+X3,0+X2
     * Divide(value/exp)
     * VariableExpression(exp:14:false)
     * Push(14+X3:5)
               MA   LRDAAA,X2
               LCA  14+X3,0+X2
     * VariableExpression(value:-3:false)
     * Push(15997+X3:5)
               MA   LRDAAA,X2
               LCA  15997+X3,0+X2
               B    LDFAAA
               MCW  0+X2,15995+X2
     * Pop(5)
               MA   LUDAAA,X2
     * raw index on the stack
     * Push(LAEAAA:5)
               MA   LRDAAA,X2
               LCA  LAEAAA,0+X2
               M    15995+X2,6+X2
               SW   2+X2
               LCA  6+X2,15995+X2
     * Pop(5)
               MA   LUDAAA,X2
     * STACK TOP IS NOW ARRAY INDEX
               B    LHEAAA
               MA   0+X2,15997+X2
     * Pop(3)
               MA   LTDAAA,X2
     * STACK top is location in array now.
     * Pop(X1:3)
               LCA  0+X2,X1
               MA   LTDAAA,X2
     * Push(0+X1:1)
               MA   LXEAAA,X2
               LCA  0+X1,0+X2
     * PostIncrement(str)
     * Push(LZEAAA:3)
               MA   LSDAAA,X2
               LCA  LZEAAA,0+X2
               MA   X3,0+X2
     * Pop(X1:3)
               LCA  0+X2,X1
               MA   LTDAAA,X2
     * Push(0+X1:3)
               MA   LSDAAA,X2
               LCA  0+X1,0+X2
               MA   LXEAAA,0+X1
     * Pop(X1:3)
               LCA  0+X2,X1
               MA   LTDAAA,X2
     * Pop(0+X1:1)
               LCA  0+X2,0+X1
               MA   LYEAAA,X2
     * Assignment(value=retree.expression.ModuloExpression@1c4a7f)
     * ModuloExpression(value:exp)
     * VariableExpression(exp:14:false)
     * Push(14+X3:5)
               MA   LRDAAA,X2
               LCA  14+X3,0+X2
     * VariableExpression(value:-3:false)
     * Push(15997+X3:5)
               MA   LRDAAA,X2
               LCA  15997+X3,0+X2
               B    LDFAAA
     * Pop(5)
               MA   LUDAAA,X2
     * Push(LTDAAA:3)
               MA   LSDAAA,X2
               LCA  LTDAAA,0+X2
               MA   X3,0+X2
     * Pop(X1:3)
               LCA  0+X2,X1
               MA   LTDAAA,X2
     * Pop(0+X1:5)
               LCA  0+X2,0+X1
               MA   LUDAAA,X2
     * Assignment(exp=retree.expression.DivideExpression@415ed7e7)
     * Divide(exp/base)
     * VariableExpression(base:-11:false)
     * Push(15989+X3:5)
               MA   LRDAAA,X2
               LCA  15989+X3,0+X2
     * VariableExpression(exp:14:false)
     * Push(14+X3:5)
               MA   LRDAAA,X2
               LCA  14+X3,0+X2
               B    LDFAAA
               MCW  0+X2,15995+X2
     * Pop(5)
               MA   LUDAAA,X2
     * Push(LQGAAA:3)
               MA   LSDAAA,X2
               LCA  LQGAAA,0+X2
               MA   X3,0+X2
     * Pop(X1:3)
               LCA  0+X2,X1
               MA   LTDAAA,X2
     * Pop(0+X1:5)
               LCA  0+X2,0+X1
               MA   LUDAAA,X2
     LTAAAA    NOP  
               BCE  LQAAAA,RF,R
               B    LRHAAA
     LSHAAA    NOP  
     * Assignment(( *str )='\0')
     * ConstantExpression(0)
     * Push(EOS:1)
               MA   LXEAAA,X2
               LCA  EOS,0+X2
     * VariableExpression(str:-8:false)
     * Push(15992+X3:3)
               MA   LSDAAA,X2
               LCA  15992+X3,0+X2
     * Pop(X1:3)
               LCA  0+X2,X1
               MA   LTDAAA,X2
     * Pop(0+X1:1)
               LCA  0+X2,0+X1
               MA   LYEAAA,X2
     * VariableExpression(start:6:false)
     * Push(6+X3:3)
               MA   LSDAAA,X2
               LCA  6+X3,0+X2
     * Pop(15984+X3:3)
               LCA  0+X2,15984+X3
               MA   LTDAAA,X2
     * set the return flag, so we know do deallocate our stack
               MCW  @R@,RF
     * and branch
               B    LQAAAA
     LQAAAA    NOP  
               MA   LCHAAA,X2
               MCW  @ @,RF
               LCA  3+X3,X1
               B    0+X1
     * FunctionDefinition((36))
     LKBAAA    SBR  3+X3
               SW   1+X3
               CW   2+X3
               CW   3+X3
     * BlockStatement(LLBAAA:null:7)
               MA   LTHAAA,X2
     * Assignment(arg=((*char) (( &cformat_str ) + (15997))))
     * Addition(( &cformat_str )+(15997))
     * AddressOfExpression(cformat_str)
     * Push(LTDAAA:3)
               MA   LSDAAA,X2
               LCA  LTDAAA,0+X2
               MA   X3,0+X2
     * ConstantExpression(15997)
     * Push(LTDAAA:3)
               MA   LSDAAA,X2
               LCA  LTDAAA,0+X2
               MA   0+X2,15997+X2
     * Pop(3)
               MA   LTDAAA,X2
     * Push(LEHAAA:3)
               MA   LSDAAA,X2
               LCA  LEHAAA,0+X2
               MA   X3,0+X2
     * Pop(X1:3)
               LCA  0+X2,X1
               MA   LTDAAA,X2
     * Pop(0+X1:3)
               LCA  0+X2,0+X1
               MA   LTDAAA,X2
     LUHAAA    NOP  
     * NotEqualExpression((c = ( *(cformat_str++) )):'\0')
     * Assignment(c=( *(cformat_str++) ))
     * DereferenceExpression((cformat_str++))
     * PostIncrement(cformat_str)
     * Push(LTDAAA:3)
               MA   LSDAAA,X2
               LCA  LTDAAA,0+X2
               MA   X3,0+X2
     * Pop(X1:3)
               LCA  0+X2,X1
               MA   LTDAAA,X2
     * Push(0+X1:3)
               MA   LSDAAA,X2
               LCA  0+X1,0+X2
               MA   LXEAAA,0+X1
     * Pop(X1:3)
               LCA  0+X2,X1
               MA   LTDAAA,X2
     * Push(0+X1:1)
               MA   LXEAAA,X2
               LCA  0+X1,0+X2
     * Push(LTHAAA:3)
               MA   LSDAAA,X2
               LCA  LTHAAA,0+X2
               MA   X3,0+X2
     * Pop(X1:3)
               LCA  0+X2,X1
               MA   LTDAAA,X2
               LCA  0+X2,0+X1
     * ConstantExpression(0)
     * Push(EOS:1)
               MA   LXEAAA,X2
               LCA  EOS,0+X2
               C    0+X2,15999+X2
     * Pop(1)
               MA   LYEAAA,X2
     * Pop(1)
               MA   LYEAAA,X2
     * Push(LAEAAA:5)
               MA   LRDAAA,X2
               LCA  LAEAAA,0+X2
               BE   LWHAAA
               B    LXHAAA
     LWHAAA    MCW  LQDAAA,0+X2
     LXHAAA    NOP  
               MCS  0+X2,0+X2
     * Pop(5)
               MA   LUDAAA,X2
               BCE  LVHAAA,5+X2, 
     * BlockStatement(LMBAAA:LLBAAA:0)
     * if(retree.statement.ExpressionStatement@7ae6da1e:retree.statement.BlockStatement@49fa269b)
     * NotEqualExpression(c:'%')
     * VariableExpression(c:7:false)
     * Push(7+X3:1)
               MA   LXEAAA,X2
               LCA  7+X3,0+X2
     * ConstantExpression(37)
     * Push(@%@:1)
               MA   LXEAAA,X2
               LCA  @%@,0+X2
               C    0+X2,15999+X2
     * Pop(1)
               MA   LYEAAA,X2
     * Pop(1)
               MA   LYEAAA,X2
     * Push(LAEAAA:5)
               MA   LRDAAA,X2
               LCA  LAEAAA,0+X2
               BE   LAIAAA
               B    LBIAAA
     LAIAAA    MCW  LQDAAA,0+X2
     LBIAAA    NOP  
               MCS  0+X2,0+X2
     * Pop(5)
               MA   LUDAAA,X2
               BCE  LYHAAA,5+X2, 
     * FunctionCallExpr((20))
     * Push(5)
               MA   LRDAAA,X2
     * VariableExpression(c:7:false)
     * Push(7+X3:1)
               MA   LXEAAA,X2
               LCA  7+X3,0+X2
     * Push(X3:3)
               MA   LSDAAA,X2
               LCA  X3,0+X2
               MCW  X2,X3
               B    LUAAAA
     * Pop(X3:3)
               LCA  0+X2,X3
               MA   LTDAAA,X2
     * Pop(1)
               MA   LYEAAA,X2
     * Pop(5)
               MA   LUDAAA,X2
               B    LZHAAA
     LYHAAA    NOP  
     * BlockStatement(LNBAAA:LMBAAA:0)
     * Assignment(c=( *(cformat_str++) ))
     * DereferenceExpression((cformat_str++))
     * PostIncrement(cformat_str)
     * Push(LTDAAA:3)
               MA   LSDAAA,X2
               LCA  LTDAAA,0+X2
               MA   X3,0+X2
     * Pop(X1:3)
               LCA  0+X2,X1
               MA   LTDAAA,X2
     * Push(0+X1:3)
               MA   LSDAAA,X2
               LCA  0+X1,0+X2
               MA   LXEAAA,0+X1
     * Pop(X1:3)
               LCA  0+X2,X1
               MA   LTDAAA,X2
     * Push(0+X1:1)
               MA   LXEAAA,X2
               LCA  0+X1,0+X2
     * Push(LTHAAA:3)
               MA   LSDAAA,X2
               LCA  LTHAAA,0+X2
               MA   X3,0+X2
     * Pop(X1:3)
               LCA  0+X2,X1
               MA   LTDAAA,X2
     * Pop(0+X1:1)
               LCA  0+X2,0+X1
               MA   LYEAAA,X2
     * if(retree.statement.BlockStatement@45fcb00e:retree.statement.IfStatement@508a8b07)
     * EqualExpression(c:'%')
     * VariableExpression(c:7:false)
     * Push(7+X3:1)
               MA   LXEAAA,X2
               LCA  7+X3,0+X2
     * ConstantExpression(37)
     * Push(@%@:1)
               MA   LXEAAA,X2
               LCA  @%@,0+X2
               C    0+X2,15999+X2
     * Pop(1)
               MA   LYEAAA,X2
     * Pop(1)
               MA   LYEAAA,X2
     * Push(LQDAAA:5)
               MA   LRDAAA,X2
               LCA  LQDAAA,0+X2
               BE   LEIAAA
               B    LFIAAA
     LEIAAA    MCW  LAEAAA,0+X2
     LFIAAA    NOP  
               MCS  0+X2,0+X2
     * Pop(5)
               MA   LUDAAA,X2
               BCE  LCIAAA,5+X2, 
     * BlockStatement(LOBAAA:LNBAAA:0)
     * FunctionCallExpr((20))
     * Push(5)
               MA   LRDAAA,X2
     * ConstantExpression(37)
     * Push(@%@:1)
               MA   LXEAAA,X2
               LCA  @%@,0+X2
     * Push(X3:3)
               MA   LSDAAA,X2
               LCA  X3,0+X2
               MCW  X2,X3
               B    LUAAAA
     * Pop(X3:3)
               LCA  0+X2,X3
               MA   LTDAAA,X2
     * Pop(1)
               MA   LYEAAA,X2
     * Pop(5)
               MA   LUDAAA,X2
     LOBAAA    NOP  
               BCE  LNBAAA,RF,R
               B    LDIAAA
     LCIAAA    NOP  
     * if(retree.statement.BlockStatement@685e95ae:retree.statement.IfStatement@19b5080a)
     * EqualExpression(c:'C')
     * VariableExpression(c:7:false)
     * Push(7+X3:1)
               MA   LXEAAA,X2
               LCA  7+X3,0+X2
     * ConstantExpression(67)
     * Push(@C@:1)
               MA   LXEAAA,X2
               LCA  @C@,0+X2
               C    0+X2,15999+X2
     * Pop(1)
               MA   LYEAAA,X2
     * Pop(1)
               MA   LYEAAA,X2
     * Push(LQDAAA:5)
               MA   LRDAAA,X2
               LCA  LQDAAA,0+X2
               BE   LIIAAA
               B    LJIAAA
     LIIAAA    MCW  LAEAAA,0+X2
     LJIAAA    NOP  
               MCS  0+X2,0+X2
     * Pop(5)
               MA   LUDAAA,X2
               BCE  LGIAAA,5+X2, 
     * BlockStatement(LPBAAA:LNBAAA:0)
     * FunctionCallExpr((20))
     * Push(5)
               MA   LRDAAA,X2
     * DereferenceExpression((arg--))
     * PostDecrement(arg)
     * Push(LEHAAA:3)
               MA   LSDAAA,X2
               LCA  LEHAAA,0+X2
               MA   X3,0+X2
     * Pop(X1:3)
               LCA  0+X2,X1
               MA   LTDAAA,X2
     * Push(0+X1:3)
               MA   LSDAAA,X2
               LCA  0+X1,0+X2
               MA   LYEAAA,0+X1
     * Pop(X1:3)
               LCA  0+X2,X1
               MA   LTDAAA,X2
     * Push(0+X1:1)
               MA   LXEAAA,X2
               LCA  0+X1,0+X2
     * Push(X3:3)
               MA   LSDAAA,X2
               LCA  X3,0+X2
               MCW  X2,X3
               B    LUAAAA
     * Pop(X3:3)
               LCA  0+X2,X3
               MA   LTDAAA,X2
     * Pop(1)
               MA   LYEAAA,X2
     * Pop(5)
               MA   LUDAAA,X2
     LPBAAA    NOP  
               BCE  LNBAAA,RF,R
               B    LHIAAA
     LGIAAA    NOP  
     * if(retree.statement.BlockStatement@3c22d5b5:retree.statement.IfStatement@12fc7ceb)
     * EqualExpression(c:'S')
     * VariableExpression(c:7:false)
     * Push(7+X3:1)
               MA   LXEAAA,X2
               LCA  7+X3,0+X2
     * ConstantExpression(83)
     * Push(@S@:1)
               MA   LXEAAA,X2
               LCA  @S@,0+X2
               C    0+X2,15999+X2
     * Pop(1)
               MA   LYEAAA,X2
     * Pop(1)
               MA   LYEAAA,X2
     * Push(LQDAAA:5)
               MA   LRDAAA,X2
               LCA  LQDAAA,0+X2
               BE   LMIAAA
               B    LNIAAA
     LMIAAA    MCW  LAEAAA,0+X2
     LNIAAA    NOP  
               MCS  0+X2,0+X2
     * Pop(5)
               MA   LUDAAA,X2
               BCE  LKIAAA,5+X2, 
     * BlockStatement(LQBAAA:LNBAAA:0)
     * FunctionCallExpr((26))
     * Push(5)
               MA   LRDAAA,X2
     * DereferenceExpression(((**char) arg))
     * VariableExpression(arg:6:false)
     * Push(6+X3:3)
               MA   LSDAAA,X2
               LCA  6+X3,0+X2
     * Pop(X1:3)
               LCA  0+X2,X1
               MA   LTDAAA,X2
     * Push(0+X1:3)
               MA   LSDAAA,X2
               LCA  0+X1,0+X2
     * Push(X3:3)
               MA   LSDAAA,X2
               LCA  X3,0+X2
               MCW  X2,X3
               B    LABAAA
     * Pop(X3:3)
               LCA  0+X2,X3
               MA   LTDAAA,X2
     * Pop(3)
               MA   LTDAAA,X2
     * Pop(5)
               MA   LUDAAA,X2
     * Assignment(arg=(arg + (15997)))
     * Addition(arg+(15997))
     * VariableExpression(arg:6:false)
     * Push(6+X3:3)
               MA   LSDAAA,X2
               LCA  6+X3,0+X2
     * ConstantExpression(15997)
     * Push(LTDAAA:3)
               MA   LSDAAA,X2
               LCA  LTDAAA,0+X2
               MA   0+X2,15997+X2
     * Pop(3)
               MA   LTDAAA,X2
     * Push(LEHAAA:3)
               MA   LSDAAA,X2
               LCA  LEHAAA,0+X2
               MA   X3,0+X2
     * Pop(X1:3)
               LCA  0+X2,X1
               MA   LTDAAA,X2
     * Pop(0+X1:3)
               LCA  0+X2,0+X1
               MA   LTDAAA,X2
     LQBAAA    NOP  
               BCE  LNBAAA,RF,R
               B    LLIAAA
     LKIAAA    NOP  
     * if(retree.statement.BlockStatement@7e6d3209:retree.statement.ReturnStatement@32f02db7)
     * EqualExpression(c:'D')
     * VariableExpression(c:7:false)
     * Push(7+X3:1)
               MA   LXEAAA,X2
               LCA  7+X3,0+X2
     * ConstantExpression(68)
     * Push(@D@:1)
               MA   LXEAAA,X2
               LCA  @D@,0+X2
               C    0+X2,15999+X2
     * Pop(1)
               MA   LYEAAA,X2
     * Pop(1)
               MA   LYEAAA,X2
     * Push(LQDAAA:5)
               MA   LRDAAA,X2
               LCA  LQDAAA,0+X2
               BE   LQIAAA
               B    LRIAAA
     LQIAAA    MCW  LAEAAA,0+X2
     LRIAAA    NOP  
               MCS  0+X2,0+X2
     * Pop(5)
               MA   LUDAAA,X2
               BCE  LOIAAA,5+X2, 
     * BlockStatement(LRBAAA:LNBAAA:7)
               MA   LTHAAA,X2
     * FunctionCallExpr((15))
     * Push(3)
               MA   LSDAAA,X2
     * ConstantExpression(10)
     * Push(LSIAAA:5)
               MA   LRDAAA,X2
               LCA  LSIAAA,0+X2
     * ArrayNameExpresssion(a:char [7])
     * Push(LFEAAA:3)
               MA   LSDAAA,X2
               LCA  LFEAAA,0+X2
               MA   X3,0+X2
     * DereferenceExpression(((*int) arg))
     * VariableExpression(arg:6:false)
     * Push(6+X3:3)
               MA   LSDAAA,X2
               LCA  6+X3,0+X2
     * Pop(X1:3)
               LCA  0+X2,X1
               MA   LTDAAA,X2
     * Push(0+X1:5)
               MA   LRDAAA,X2
               LCA  0+X1,0+X2
     * Push(X3:3)
               MA   LSDAAA,X2
               LCA  X3,0+X2
               MCW  X2,X3
               B    LPAAAA
     * Pop(X3:3)
               LCA  0+X2,X3
               MA   LTDAAA,X2
     * Pop(5)
               MA   LUDAAA,X2
     * Pop(3)
               MA   LTDAAA,X2
     * Pop(5)
               MA   LUDAAA,X2
     * Pop(3)
               MA   LTDAAA,X2
     * FunctionCallExpr((26))
     * Push(5)
               MA   LRDAAA,X2
     * ArrayNameExpresssion(a:char [7])
     * Push(LFEAAA:3)
               MA   LSDAAA,X2
               LCA  LFEAAA,0+X2
               MA   X3,0+X2
     * Push(X3:3)
               MA   LSDAAA,X2
               LCA  X3,0+X2
               MCW  X2,X3
               B    LABAAA
     * Pop(X3:3)
               LCA  0+X2,X3
               MA   LTDAAA,X2
     * Pop(3)
               MA   LTDAAA,X2
     * Pop(5)
               MA   LUDAAA,X2
     * Assignment(arg=(arg + (15995)))
     * Addition(arg+(15995))
     * VariableExpression(arg:6:false)
     * Push(6+X3:3)
               MA   LSDAAA,X2
               LCA  6+X3,0+X2
     * ConstantExpression(15995)
     * Push(LUDAAA:3)
               MA   LSDAAA,X2
               LCA  LUDAAA,0+X2
               MA   0+X2,15997+X2
     * Pop(3)
               MA   LTDAAA,X2
     * Push(LEHAAA:3)
               MA   LSDAAA,X2
               LCA  LEHAAA,0+X2
               MA   X3,0+X2
     * Pop(X1:3)
               LCA  0+X2,X1
               MA   LTDAAA,X2
     * Pop(0+X1:3)
               LCA  0+X2,0+X1
               MA   LTDAAA,X2
     LRBAAA    NOP  
               MA   LTIAAA,X2
               BCE  LNBAAA,RF,R
               B    LPIAAA
     LOIAAA    NOP  
     * set the return flag, so we know do deallocate our stack
               MCW  @R@,RF
     * and branch
               B    LNBAAA
     LPIAAA    NOP  
     LLIAAA    NOP  
     LHIAAA    NOP  
     LDIAAA    NOP  
     LNBAAA    NOP  
               BCE  LMBAAA,RF,R
     LZHAAA    NOP  
     LMBAAA    NOP  
               BCE  LLBAAA,RF,R
               B    LUHAAA
     LVHAAA    NOP  
     LLBAAA    NOP  
               MA   LTIAAA,X2
               MCW  @ @,RF
               LCA  3+X3,X1
               B    0+X1
     LVDAAA    SBR  X1
     * Normalizes the zone bits of a number, leaving either A=0B=0
     * for a positive or A=0B=1 for a negative
     * Do nothing on either no zone bits or only a b zone bit
               BWZ  LWDAAA,0+X2,2
               BWZ  LWDAAA,0+X2,K
     * else clear the zone bits, as it is positive
               MZ   @ @,0+X2
     LWDAAA    B    0+X1
    ****************************************************************  
    ** DIVISION SNIPPET                                           **
    ****************************************************************  
     
     LDFAAA    SBR  LEFAAA+3           * SETUP RETURN ADDRESS
     * POP DIVIDEND
               MCW  0+X2, LFFAAA
               SBR  X2, 15995+X2

     * POP DIVISOR
               MCW  0+X2, LGFAAA
               SBR  X2, 15995+X2


               B    *+17
               
               DCW  @00000@                
               DC   @00000000000@        

               ZA   LFFAAA, *-7         * PUT DIVIDEND INTO WORKING BL
               D    LGFAAA, *-19        * DIVIDE
               MZ   *-22, *-21          * KILL THE ZONE BIT
               MZ   *-29, *-34          * KILL THE ZONE BIT
               MCW  *-41, LHFAAA        * PICK UP ANSWER
               SW   *-44                * SO I CAN PICKUP REMAINDER
               MCW  *-46, LIFAAA        * GET REMAINDER
               CW   *-55                * CLEAR THE WM
               MZ   LHFAAA-1, LHFAAA    * CLEANUP QUOTIENT BITZONE
               MZ   LIFAAA-1, LIFAAA    * CLEANUP REMAINDER BITZONE
               
     * PUSH REMAINDER
               SBR  X2, 5+X2
               SW   15996+X2
               MCW  LIFAAA, 0+X2
               
     * PUSH QUOTIENT
               SBR  X2, 5+X2
               SW   15996+X2
               MCW  LHFAAA, 0+X2

     LEFAAA    B    000                 * JUMP BACK
               
     LGFAAA    DCW  00000               * DIVISOR
     LFFAAA    DCW  00000               * DIVIDEND
     LHFAAA    DCW  00000               * QUOTIENT
     LIFAAA    DCW  00000               * REMAINDER
     LHEAAA    SBR  X1
     * Casts a 5-digit number to a 3-digit address
     * make a copy of the top of the stack
               SW   15998+X2
               LCA  0+X2,3+X2
               CW   15998+X2
     * zero out the zone bits of our copy
               MZ   @0@,3+X2
               MZ   @0@,2+X2
               MZ   @0@,1+X2
     * set the low-order digit's zone bits
               C    @04000@,0+X2
               BL   LKEAAA
               C    @08000@,0+X2
               BL   LJEAAA
               C    @12000@,0+X2
               BL   LIEAAA
               S    @12000@,0+X2
               MZ   @A@,3+X2
               B    LKEAAA
     LIEAAA    S    @08000@,0+X2
               MZ   @I@,3+X2
               B    LKEAAA
     LJEAAA    S    @04000@,0+X2
               MZ   @S@,3+X2
     * For some reason the zone bits get set - it still works though.
     LKEAAA    C    @01000@,0+X2
               BL   LNEAAA
               C    @02000@,0+X2
               BL   LMEAAA
               C    @03000@,0+X2
               BL   LLEAAA
               MZ   @A@,1+X2
               B    LNEAAA
     LLEAAA    MZ   @I@,1+X2
               B    LNEAAA
     LMEAAA    MZ   @S@,1+X2
     LNEAAA    LCA  3+X2,15998+X2
               SBR  X2,15998+X2
               B    0+X1
     LRFAAA    SBR  X1
     * Casts a 3-digit address to a 5-digit number
     * Make room on the stack for an int
               MA   @002@,X2
     * make a copy of the top of the stack
               LCA  15998+X2,3+X2
     * Now zero out the top of the stack
               LCA  @00000@,0+X2
     * Now copy back, shifted over 2 digits
               MCW  3+X2,0+X2
     * Now zero out the zone bits on the stack
               MZ   @0@,0+X2
               MZ   @0@,15999+X2
               MZ   @0@,15998+X2
     * check the high-order digit's zone bits
               BWZ  LSFAAA,1+X2,S
               BWZ  LTFAAA,1+X2,K
               BWZ  LUFAAA,1+X2,B
               B    LVFAAA
     LSFAAA    A    @01000@,0+X2
               B    LVFAAA
     LTFAAA    A    @02000@,0+X2
               B    LVFAAA
     LUFAAA    A    @03000@,0+X2
     LVFAAA    BWZ  LWFAAA,3+X2,S
               BWZ  LXFAAA,3+X2,K
               BWZ  LYFAAA,3+X2,B
               B    LZFAAA
     LWFAAA    A    @04000@,0+X2
               B    LZFAAA
     LXFAAA    A    @08000@,0+X2
               B    LZFAAA
     LYFAAA    A    @12000@,0+X2
     LZFAAA    B    0+X1

     LTDAAA    DCW  @I9G@
     LYCAAA    DCW  @2@
     LAFAAA    DCW  @100000@
     LHCAAA    DCW  @69105@
     LPCAAA    DCW  @B@
     LREAAA    DCW  @G8B@
     LLCAAA    DCW  @F@
     LODAAA    DCW  @.@
     LOFAAA    DCW  @'2V@
     LDDAAA    DCW  @N@
     LSIAAA    DCW  @00010@
     LEHAAA    DCW  @006@
     LZEAAA    DCW  @I9B@
     LUCAAA    DCW  @6@
     LQDAAA    DCW  @00000@
     LAEAAA    DCW  @00001@
     LXGAAA    DCW  @'3W@
     LXCAAA    DCW  @3@
     LQCAAA    DCW  @A@
     LMCAAA    DCW  @E@
     LCHAAA    DCW  @I8F@
     LSDAAA    DCW  @003@
     LGEAAA    DCW  @00005@
     LTHAAA    DCW  @007@
     LXDAAA    DCW  @00020@
     LHDAAA    DCW  @R@
     LTIAAA    DCW  @I9C@
     LCFAAA    DCW  @00019@
     LTCAAA    DCW  @7@
     LFDAAA    DCW  @I@
     LKDAAA    DCW  @W@
     LIDAAA    DCW  @ @
     LWCAAA    DCW  @4@
     LSEAAA    DCW  @0000J@
     LBFAAA    DCW  @00042@
     LJHAAA    DCW  @-@
     LYEAAA    DCW  @I9I@
     LNCAAA    DCW  @D@
     LQEAAA    DCW  @'7Y@
     LEDAAA    DCW  @O@
     LDHAAA    DCW  @'0W@
     LBDAAA    DCW  @%@
     LLDAAA    DCW  @L@
     LOEAAA    DCW  @113@
     LICAAA    DCW  @201@
     LFEAAA    DCW  @008@
     LADAAA    DCW  @0@
     LJDAAA    DCW  @H@
     LKCAAA    DCW  @081@
     LSCAAA    DCW  @8@
     LLGAAA    DCW  @I9D@
     LCDAAA    DCW  @S@
     LXEAAA    DCW  @001@
     LVCAAA    DCW  @5@
     LNDAAA    DCW  @P@
     LPDAAA    DCW  @218@
     LZCAAA    DCW  @1@
     LOCAAA    DCW  @C@
     LJFAAA    DCW  @'0V@
     LRDAAA    DCW  @005@
     LCGAAA    DCW  @'2Y@
     LRCAAA    DCW  @9@
     LPEAAA    DCW  @'4/@
     LJCAAA    DCW  @200@
     LMDAAA    DCW  @G@
     LQGAAA    DCW  @014@
     LUDAAA    DCW  @I9E@
     LGDAAA    DCW  @T@
     LGGAAA    DCW  @333@

               END  START
