 CLEAR STORAGE 1     ,008015,022026,030037,044,049,053053N000000N00001026                                         1
 CLEAR STORAGE 2     L068116,105106,110117B101/I9I#071029C029056B026/B001/0991,001/001117I0?                      2
 BOOTSTRAP           ,008015,022029,036040,047054,061068,072/061039              ,0010011040                      3
0                                                                                                         PAGE    1
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

  101 ** ***  ***********************************************************     READ      E
  102         PUNCH  EQU   101               * PUNCH AREA                              0101
  103         PRINT  EQU   201               * PRINT AREA                              0201
  104         PRCPOS DCW   000               * CHAR POSITION IN PRINT AREA          3  0335                       4
  105         PUCPOS DCW   000               * CHAR POSITION IN PUNCH AREA          3  0338                       4
  106         PUNSIZ DCW   @080@             * SIZE OF PUNCH AREA                   3  0341                       4
  107         PRTSIZ DCW   @132@             * SIZE OF PRINT AREA                   3  0344                       4
  108         EOS    DCW   @'@               * END OF STRING CHAR                   1  0345                       4
  109         EOL    DCW   @;@               * END OF LINE CHAR                     1  0346                       4
  110                ORG   87                                                                 0087
  111         X1     DSA   0                 * INDEX REGISTER 1                     3  0089  000                  5   000
  112                ORG   92                                                                 0092
  113         X2     DSA   0                 * INDEX REGISTER 2 (STACK POINTER)     3  0094  000                  6   000
  114                ORG   97                                                                 0097
  115         X3     DSA   0                 * INDEX REGISTER 3 (STACK FRAME PO     3  0099  000                  7   000
  116 ** ***  ***********************************************************     * GLOBAL/ST
  117         * SEED SIZE:5 OFFSET:1000
  118         * CONST_STR_LITERAL_1 SIZE:17 OFFSET:1005
  119         * __PUTCHAR_POS SIZE:3 OFFSET:1022
  120         * __PUTCHAR_LAST SIZE:3 OFFSET:1025
  121         * __GETCHARPOSITION SIZE:3 OFFSET:1028
  122         * CONST_STR_LITERAL_8 SIZE:10 OFFSET:1031
  123         * CONST_STR_LITERAL_9 SIZE:6 OFFSET:1041
  124         * CONST_STR_LITERAL_10 SIZE:6 OFFSET:1047
  125         * CONST_STR_LITERAL_11 SIZE:4 OFFSET:1053
  126                ORG   1000              * SEED                                           1000
  127                DCW   @69105@                                                  5  1004                       8
  128                ORG   1005              * CONST_STR_LITERAL_1                            1005
  129                DCW   @0@                                                      1  1005                       8
  130                DCW   @1@                                                      1  1006                       8
  131                DCW   @2@                                                      1  1007                       8
  132                DCW   @3@                                                      1  1008                       8
  133                DCW   @4@                                                      1  1009                       8
  134                DCW   @5@                                                      1  1010                       8
  135                DCW   @6@                                                      1  1011                       9
  136                DCW   @7@                                                      1  1012                       9
  137                DCW   @8@                                                      1  1013                       9
  138                DCW   @9@                                                      1  1014                       9
  139                DCW   @A@                                                      1  1015                       9
  140                DCW   @B@                                                      1  1016                       9
  141                DCW   @C@                                                      1  1017                       9
  142                DCW   @D@                                                      1  1018                      10
  143                DCW   @E@                                                      1  1019                      10
  144                DCW   @F@                                                      1  1020                      10
  145                DCW   @'@                                                      1  1021                      10
  146                ORG   1022              * __PUTCHAR_POS                                  1022
  147                DCW   @201@                                                    3  1024                      10
1                                                                                                         PAGE    2
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

  148                ORG   1025              * __PUTCHAR_LAST                                 1025
  149                DCW   @200@                                                    3  1027                      10
  150                ORG   1028              * __GETCHARPOSITION                              1028
  151                DCW   @081@                                                    3  1030                      10
  152                ORG   1031              * CONST_STR_LITERAL_8                            1031
  153                DCW   @F@                                                      1  1031                      11
  154                DCW   @I@                                                      1  1032                      11
  155                DCW   @Z@                                                      1  1033                      11
  156                DCW   @Z@                                                      1  1034                      11
  157                DCW   @B@                                                      1  1035                      11
  158                DCW   @U@                                                      1  1036                      11
  159                DCW   @Z@                                                      1  1037                      11
  160                DCW   @Z@                                                      1  1038                      12
  161                DCW   @;@                                                      1  1039                      12
  162                DCW   @'@                                                      1  1040                      12
  163                ORG   1041              * CONST_STR_LITERAL_9                            1041
  164                DCW   @F@                                                      1  1041                      12
  165                DCW   @I@                                                      1  1042                      12
  166                DCW   @Z@                                                      1  1043                      12
  167                DCW   @Z@                                                      1  1044                      12
  168                DCW   @;@                                                      1  1045                      13
  169                DCW   @'@                                                      1  1046                      13
  170                ORG   1047              * CONST_STR_LITERAL_10                           1047
  171                DCW   @B@                                                      1  1047                      13
  172                DCW   @U@                                                      1  1048                      13
  173                DCW   @Z@                                                      1  1049                      13
  174                DCW   @Z@                                                      1  1050                      13
  175                DCW   @;@                                                      1  1051                      13
  176                DCW   @'@                                                      1  1052                      14
  177                ORG   1053              * CONST_STR_LITERAL_11                           1053
  178                DCW   @%@                                                      1  1053                      14
  179                DCW   @D@                                                      1  1054                      14
  180                DCW   @;@                                                      1  1055                      14
  181                DCW   @'@                                                      1  1056                      14
  182         * START POSITION OF PROGRAM CODE
  183                ORG   1057                                                               1057
  184         * SET X2 TO BE THE STACK POINTER (STACK GROWS UPWARD)
  185         START  SBR   X2,399            * SET X2 TO STACK POINTER VALUE        7  1057  H 094 399           14   094     399
  186                MCW   X2,X3             * COPY STACK POINTER IN X3             7  1064  M 094 099           14   094     099
  187                B     LDFAAA            * JUMP TO FUNCTION MAIN                4  1071  B P08               15  2708
  188                H                       * PROGRAM EXECUTED. SYSTEM HALTS       1  1075  .                   15
  189         ***************************************************************************
  190         * FUNCTION : GENRAND
  191         ***************************************************************************
  192         LBAAAA SBR   3&X3              * SAVE RETURN ADDRESS IN REGISTER      4  1076  H 0?3               15   003+3
  193         * SET THE RIGHT WM AND CLEAR THE WRONG ONES
  194                SW    1&X3              * SET WM AT 1&X3                       4  1080  , 0?1               15   001+3
  195                CW    2&X3              * CLEAR WM AT 2&X3                     4  1084  ) 0?2               15   002+3
  196                CW    3&X3              * CLEAR WM AT 3&X3                     4  1088  ) 0?3               15   003+3
  197         ***************************************
1                                                                                                         PAGE    3
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

  198         * BEGIN [BLOCK ENDING AT LCAAAA]
  199         * PUSH (3)
  200                MA    LLHAAA,X2         * ADD 3 TO STACK POINTER               7  1092  # 43O 094           15  8436     094
  201         * MODULO (%) (((42 * SEED) + 19) % 100000)
  202         * CONSTANT (100000 : @100000@)
  203         * PUSH (@100000@:5)
  204                MA    LMHAAA,X2         * ADD 5 TO STACK POINTER               7  1099  # 44O 094           16  8446     094
  205                LCA   LNHAAA,0&X2       * LOAD DATA @100000@ IN STACK          7  1106  L 31M 0!0           16  8314     000+2
  206         * ADDITION ((42 * SEED) + 19)
  207         * MULTIPLY (42 * SEED)
  208         * CONSTANT (42 : @00042@)
  209         * PUSH (@00042@:5)
  210                MA    LMHAAA,X2         * ADD 5 TO STACK POINTER               7  1113  # 44O 094           16  8446     094
  211                LCA   LOHAAA,0&X2       * LOAD DATA @00042@ IN STACK           7  1120  L 40! 0!0           16  8400     000+2
  212         * STATIC VARIABLE (SEED : 1004)
  213         * PUSH (1004:5)
  214                MA    LMHAAA,X2         * ADD 5 TO STACK POINTER               7  1127  # 44O 094           16  8446     094
  215                LCA   1004,0&X2         * LOAD MEMORY 1004 IN STACK            7  1134  L '04 0!0           17  1004     000+2
  216                M     15995&X2,6&X2     * MULTIPLY STACK AT -5 TO STACK AT     7  1141  @ IRE 0!6           17 15995+2   006+2
  217                SW    2&X2              * SET WM IN STACK AT 2                 4  1148  , 0!2               17   002+2
  218                LCA   6&X2,15995&X2     * LOAD STACK AT 6 TO STACK AT -5       7  1152  L 0!6 IRE           17   006+2 15995+2
  219         * POP (5)
  220                MA    LPHAAA,X2         * ADD -5 TO STACK POINTER              7  1159  # 33P 094           17  8337     094
  221         * CONSTANT (19 : @00019@)
  222         * PUSH (@00019@:5)
  223                MA    LMHAAA,X2         * ADD 5 TO STACK POINTER               7  1166  # 44O 094           17  8446     094
  224                LCA   LQHAAA,0&X2       * LOAD DATA @00019@ IN STACK           7  1173  L 37R 0!0           18  8379     000+2
  225                A     0&X2,15995&X2     * ADD STACK TO STACK AT -5             7  1180  A 0!0 IRE           18   000+2 15995+2
  226         * POP (5)
  227                MA    LPHAAA,X2         * ADD -5 TO STACK POINTER              7  1187  # 33P 094           18  8337     094
  228                B     SNPDIV            * JUMP TO SNIPPET SNIP_DIV             4  1194  B ###               18   ###
  229         * POP (5)
  230                MA    LPHAAA,X2         * ADD -5 TO STACK POINTER              7  1198  # 33P 094           18  8337     094
  231         * PUSH (@'04@:3)
  232                MA    LLHAAA,X2         * ADD 3 TO STACK POINTER               7  1205  # 43O 094           18  8436     094
  233                LCA   LRHAAA,0&X2       * LOAD DATA @'04@ IN STACK             7  1212  L 42L 0!0           19  8423     000+2
  234         * ASSIGNMENT (SEED = (((42 * SEED) + 19) % 100000))
  235         * POP (X1:3)
  236                LCA   0&X2,X1           * LOAD STACK IN X1                     7  1219  L 0!0 089           19   000+2   089
  237                MA    LSHAAA,X2         * ADD -3 TO STACK POINTER              7  1226  # 35! 094           19  8350     094
  238         * POP (0+X1:5)
  239                LCA   0&X2,0&X1         * LOAD STACK IN 0&X1                   7  1233  L 0!0 0'0           19   000+2   000+1
  240                MA    LPHAAA,X2         * ADD -5 TO STACK POINTER              7  1240  # 33P 094           19  8337     094
  241         * END ASSIGNMENT (SEED = (((42 * SEED) + 19) % 100000))
  242         * PUT ON STACK RETURN VALUE (SEED)
  243         * STATIC VARIABLE (SEED : 1004)
  244         * PUSH (1004:5)
  245                MA    LMHAAA,X2         * ADD 5 TO STACK POINTER               7  1247  # 44O 094           20  8446     094
  246                LCA   1004,0&X2         * LOAD MEMORY 1004 IN STACK            7  1254  L '04 0!0           20  1004     000+2
  247         * POP (15997+X3:5)
1                                                                                                         PAGE    4
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

  248                LCA   0&X2,15997&X3     * LOAD STACK IN 15997&X3               7  1261  L 0!0 IIG           20   000+2 15997+3
  249                MA    LPHAAA,X2         * ADD -5 TO STACK POINTER              7  1268  # 33P 094           20  8337     094
  250         * POP (3)
  251         LCAAAA MA    LSHAAA,X2         * ADD -3 TO STACK POINTER              7  1275  # 35! 094           20  8350     094
  252         * END [BLOCK ENDING AT LCAAAA]
  253         ***************************************
  254                LCA   3&X3,X1           * LOAD RETURN ADDRESS IN X1            7  1282  L 0?3 089           21   003+3   089
  255                B     0&X1              * JUMP BACK TO CALLER IN X1            4  1289  B 0'0               21   000+1
  256         ***************************************************************************
  257         * END FUNCTION : GENRAND
  258         ***************************************************************************
  259         ***************************************************************************
  260         * FUNCTION : ITOA
  261         ***************************************************************************
  262         LYAAAA SBR   3&X3              * SAVE RETURN ADDRESS IN REGISTER      4  1293  H 0?3               21   003+3
  263         * SET THE RIGHT WM AND CLEAR THE WRONG ONES
  264                SW    1&X3              * SET WM AT 1&X3                       4  1297  , 0?1               21   001+3
  265                CW    2&X3              * CLEAR WM AT 2&X3                     4  1301  ) 0?2               21   002+3
  266                CW    3&X3              * CLEAR WM AT 3&X3                     4  1305  ) 0?3               21   003+3
  267         ***************************************
  268         * BEGIN [BLOCK ENDING AT LZAAAA]
  269         * START SIZE:3 OFFSET:3
  270         * DIGITS SIZE:3 OFFSET:6
  271         * EXP SIZE:5 OFFSET:9
  272                LCA   LTHAAA,9&X3       * LOAD *CHAR 1005 INTO MEMORY 9&X3     7  1309  L 34! 0?9           21  8340     009+3
  273                LCA   LUHAAA,14&X3      * LOAD INT 1 INTO MEMORY 14&X3         7  1316  L 38M 0A4           22  8384     014+3
  274         * PUSH (14)
  275                MA    LVHAAA,X2         * ADD 14 TO STACK POINTER              7  1323  # 36! 094           22  8360     094
  276         * PARAMETER VARIABLE (STR : 15992+X3)
  277         * PUSH (15992+X3:3)
  278                MA    LLHAAA,X2         * ADD 3 TO STACK POINTER               7  1330  # 43O 094           22  8436     094
  279                LCA   15992&X3,0&X2     * LOAD MEMORY 15992&X3 IN STACK        7  1337  L IIB 0!0           22 15992+3   000+2
  280         * PUSH (@006@:3)
  281                MA    LLHAAA,X2         * ADD 3 TO STACK POINTER               7  1344  # 43O 094           22  8436     094
  282                LCA   LWHAAA,0&X2       * LOAD DATA @006@ IN STACK             7  1351  L 36R 0!0           23  8369     000+2
  283                MA    X3,0&X2           * ADD X3 TO STACK                      7  1358  # 099 0!0           23   099     000+2
  284         * ASSIGNMENT (START = STR)
  285         * POP (X1:3)
  286                LCA   0&X2,X1           * LOAD STACK IN X1                     7  1365  L 0!0 089           23   000+2   089
  287                MA    LSHAAA,X2         * ADD -3 TO STACK POINTER              7  1372  # 35! 094           23  8350     094
  288         * POP (0+X1:3)
  289                LCA   0&X2,0&X1         * LOAD STACK IN 0&X1                   7  1379  L 0!0 0'0           23   000+2   000+1
  290                MA    LSHAAA,X2         * ADD -3 TO STACK POINTER              7  1386  # 35! 094           24  8350     094
  291         * END ASSIGNMENT (START = STR)
  292         * IF [IF ((VALUE < 0) THEN [BLOCK ENDING AT LABAAA] ELSE [IF ((VALUE == 0)
  293         * LESS (VALUE < 0)
  294         * PARAMETER VARIABLE (VALUE : 15997+X3)
  295         * PUSH (15997+X3:5)
  296                MA    LMHAAA,X2         * ADD 5 TO STACK POINTER               7  1393  # 44O 094           24  8446     094
  297                LCA   15997&X3,0&X2     * LOAD MEMORY 15997&X3 IN STACK        7  1400  L IIG 0!0           24 15997+3   000+2
1                                                                                                         PAGE    5
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

  298                B     CLNNMN            * JUMP TO SNIPPET CLEAN_NUMBER         4  1407  B ###               24   ###
  299         * CONSTANT (0 : @00000@)
  300         * PUSH (@00000@:5)
  301                MA    LMHAAA,X2         * ADD 5 TO STACK POINTER               7  1411  # 44O 094           24  8446     094
  302                LCA   LXHAAA,0&X2       * LOAD DATA @00000@ IN STACK           7  1418  L 40O 0!0           24  8406     000+2
  303                B     CLNNMN            * JUMP TO SNIPPET CLEAN_NUMBER         4  1425  B ###               25   ###
  304                C     0&X2,15995&X2     * COMPARE STACK TO STACK AT -5         7  1429  C 0!0 IRE           25   000+2 15995+2
  305         * POP (5)
  306                MA    LPHAAA,X2         * ADD -5 TO STACK POINTER              7  1436  # 33P 094           25  8337     094
  307                MCW   LXHAAA,0&X2       * MOVE 0 IN STACK                      7  1443  M 40O 0!0           25  8406     000+2
  308                BL    LTFAAA            * JUMP IF LESS                         5  1450  B U59 T             25  1459
  309                B     LUFAAA            * JUMP TO END                          4  1455  B U66               25  1466
  310         LTFAAA MCW   LUHAAA,0&X2       * MOVE 1 IN STACK                      7  1459  M 38M 0!0           26  8384     000+2
  311         LUFAAA MCS   0&X2,0&X2         * CLEAR WM IN STACK                    7  1466  Z 0!0 0!0           26   000+2   000+2
  312         * POP (5)
  313                MA    LPHAAA,X2         * ADD -5 TO STACK POINTER              7  1473  # 33P 094           26  8337     094
  314                BCE   LDBAAA,5&X2,      * JUMP WHEN FALSE                      8  1480  B W61 0!5           26  1661     005+2
  315         ***************************************
  316         * BEGIN [BLOCK ENDING AT LABAAA]
  317         * CONSTANT ('-' : @-@)
  318         * PUSH (@-@:1)
  319                MA    LYHAAA,X2         * ADD 1 TO STACK POINTER               7  1488  # 43R 094           26  8439     094
  320                LCA   LZHAAA,0&X2       * LOAD DATA @-@ IN STACK               7  1495  L 44! 0!0           27  8440     000+2
  321         * POSTINCREMENT (STR++)
  322         * PUSH (@I9B@:3)
  323                MA    LLHAAA,X2         * ADD 3 TO STACK POINTER               7  1502  # 43O 094           27  8436     094
  324                LCA   LAIAAA,0&X2       * LOAD DATA @I9B@ IN STACK             7  1509  L 41M 0!0           27  8414     000+2
  325                MA    X3,0&X2           * ADD X3 TO STACK                      7  1516  # 099 0!0           27   099     000+2
  326         * POP (X1:3)
  327                LCA   0&X2,X1           * LOAD STACK IN X1                     7  1523  L 0!0 089           27   000+2   089
  328                MA    LSHAAA,X2         * ADD -3 TO STACK POINTER              7  1530  # 35! 094           28  8350     094
  329         * PUSH (0+X1:3)
  330                MA    LLHAAA,X2         * ADD 3 TO STACK POINTER               7  1537  # 43O 094           28  8436     094
  331                LCA   0&X1,0&X2         * LOAD MEMORY 0&X1 IN STACK            7  1544  L 0'0 0!0           28   000+1   000+2
  332                MA    LYHAAA,0&X1       * POSTINCREMENT POINTER AT X1          7  1551  # 43R 0'0           28  8439     000+1
  333         * ASSIGNMENT ((*(STR++)) = '-')
  334         * POP (X1:3)
  335                LCA   0&X2,X1           * LOAD STACK IN X1                     7  1558  L 0!0 089           28   000+2   089
  336                MA    LSHAAA,X2         * ADD -3 TO STACK POINTER              7  1565  # 35! 094           29  8350     094
  337         * POP (0+X1:1)
  338                LCA   0&X2,0&X1         * LOAD STACK IN 0&X1                   7  1572  L 0!0 0'0           29   000+2   000+1
  339                MA    LBIAAA,X2         * ADD -1 TO STACK POINTER              7  1579  # ### 094           29   ###     094
  340         * END ASSIGNMENT ((*(STR++)) = '-')
  341         * NEGATE (-VALUE)
  342         * PARAMETER VARIABLE (VALUE : 15997+X3)
  343         * PUSH (15997+X3:5)
  344                MA    LMHAAA,X2         * ADD 5 TO STACK POINTER               7  1586  # 44O 094           29  8446     094
  345                LCA   15997&X3,0&X2     * LOAD MEMORY 15997&X3 IN STACK        7  1593  L IIG 0!0           29 15997+3   000+2
  346                ZS    0&X2                                                     4  1600  ! 0!0               29   000+2
  347                B     CLNNMN            * JUMP TO SNIPPET CLEAN_NUMBER         4  1604  B ###               30   ###
1                                                                                                         PAGE    6
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

  348         * PUSH (@I9G@:3)
  349                MA    LLHAAA,X2         * ADD 3 TO STACK POINTER               7  1608  # 43O 094           30  8436     094
  350                LCA   LSHAAA,0&X2       * LOAD DATA @I9G@ IN STACK             7  1615  L 35! 0!0           30  8350     000+2
  351                MA    X3,0&X2           * ADD X3 TO STACK                      7  1622  # 099 0!0           30   099     000+2
  352         * ASSIGNMENT (VALUE = (-VALUE))
  353         * POP (X1:3)
  354                LCA   0&X2,X1           * LOAD STACK IN X1                     7  1629  L 0!0 089           30   000+2   089
  355                MA    LSHAAA,X2         * ADD -3 TO STACK POINTER              7  1636  # 35! 094           30  8350     094
  356         * POP (0+X1:5)
  357                LCA   0&X2,0&X1         * LOAD STACK IN 0&X1                   7  1643  L 0!0 0'0           31   000+2   000+1
  358                MA    LPHAAA,X2         * ADD -5 TO STACK POINTER              7  1650  # 33P 094           31  8337     094
  359         * END ASSIGNMENT (VALUE = (-VALUE))
  360         * END [BLOCK ENDING AT LABAAA]
  361         ***************************************
  362         LABAAA B     LGBAAA            * JUMP WHEN TRUE                       4  1657  B Z21               31  1921
  363         * IF [IF ((VALUE == 0) THEN [BLOCK ENDING AT LBBAAA]]
  364         * EQUAL (VALUE == 0)
  365         * PARAMETER VARIABLE (VALUE : 15997+X3)
  366         * PUSH (15997+X3:5)
  367         LDBAAA MA    LMHAAA,X2         * ADD 5 TO STACK POINTER               7  1661  # 44O 094           31  8446     094
  368                LCA   15997&X3,0&X2     * LOAD MEMORY 15997&X3 IN STACK        7  1668  L IIG 0!0           31 15997+3   000+2
  369                B     CLNNMN            * JUMP TO SNIPPET CLEAN_NUMBER         4  1675  B ###               31   ###
  370         * CONSTANT (0 : @00000@)
  371         * PUSH (@00000@:5)
  372                MA    LMHAAA,X2         * ADD 5 TO STACK POINTER               7  1679  # 44O 094           32  8446     094
  373                LCA   LXHAAA,0&X2       * LOAD DATA @00000@ IN STACK           7  1686  L 40O 0!0           32  8406     000+2
  374                B     CLNNMN            * JUMP TO SNIPPET CLEAN_NUMBER         4  1693  B ###               32   ###
  375                C     0&X2,15995&X2     * COMPARE STACK TO STACK AT -5         7  1697  C 0!0 IRE           32   000+2 15995+2
  376         * POP (5)
  377                MA    LPHAAA,X2         * ADD -5 TO STACK POINTER              7  1704  # 33P 094           32  8337     094
  378         * POP (5)
  379                MA    LPHAAA,X2         * ADD -5 TO STACK POINTER              7  1711  # 33P 094           32  8337     094
  380         * PUSH (@00000@:5)
  381                MA    LMHAAA,X2         * ADD 5 TO STACK POINTER               7  1718  # 44O 094           33  8446     094
  382                LCA   LXHAAA,0&X2       * LOAD DATA @00000@ IN STACK           7  1725  L 40O 0!0           33  8406     000+2
  383                BE    LVFAAA            * JUMP IF EQUAL                        5  1732  B X41 S             33  1741
  384                B     LWFAAA            * JUMP TO END                          4  1737  B X48               33  1748
  385         LVFAAA MCW   LUHAAA,0&X2       * MOVE 1 IN STACK                      7  1741  M 38M 0!0           33  8384     000+2
  386         LWFAAA MCS   0&X2,0&X2         * CLEAR WM IN STACK                    7  1748  Z 0!0 0!0           33   000+2   000+2
  387         * POP (5)
  388                MA    LPHAAA,X2         * ADD -5 TO STACK POINTER              7  1755  # 33P 094           34  8337     094
  389                BCE   LGBAAA,5&X2,      * JUMP WHEN FALSE                      8  1762  B Z21 0!5           34  1921     005+2
  390         ***************************************
  391         * BEGIN [BLOCK ENDING AT LBBAAA]
  392         * CONSTANT ('0' : @0@)
  393         * PUSH (@0@:1)
  394                MA    LYHAAA,X2         * ADD 1 TO STACK POINTER               7  1770  # 43R 094           34  8439     094
  395                LCA   LCIAAA,0&X2       * LOAD DATA @0@ IN STACK               7  1777  L 35M 0!0           34  8354     000+2
  396         * SUBSCRIPT (STR[0])
  397         * PARAMETER VARIABLE (STR : 15992+X3)
1                                                                                                         PAGE    7
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

  398         * PUSH (15992+X3:3)
  399                MA    LLHAAA,X2         * ADD 3 TO STACK POINTER               7  1784  # 43O 094           34  8436     094
  400                LCA   15992&X3,0&X2     * LOAD MEMORY 15992&X3 IN STACK        7  1791  L IIB 0!0           35 15992+3   000+2
  401         * END SUBSCRIPT (STR[0])
  402         * ASSIGNMENT ((STR[0]) = '0')
  403         * POP (X1:3)
  404                LCA   0&X2,X1           * LOAD STACK IN X1                     7  1798  L 0!0 089           35   000+2   089
  405                MA    LSHAAA,X2         * ADD -3 TO STACK POINTER              7  1805  # 35! 094           35  8350     094
  406         * POP (0+X1:1)
  407                LCA   0&X2,0&X1         * LOAD STACK IN 0&X1                   7  1812  L 0!0 0'0           35   000+2   000+1
  408                MA    LBIAAA,X2         * ADD -1 TO STACK POINTER              7  1819  # ### 094           35   ###     094
  409         * END ASSIGNMENT ((STR[0]) = '0')
  410         * CONSTANT ('\0' : EOS)
  411         * PUSH (EOS:1)
  412                MA    LYHAAA,X2         * ADD 1 TO STACK POINTER               7  1826  # 43R 094           36  8439     094
  413                LCA   EOS,0&X2          * LOAD MEMORY EOS IN STACK             7  1833  L 345 0!0           36   345     000+2
  414         * SUBSCRIPT (STR[1])
  415         * PARAMETER VARIABLE (STR : 15992+X3)
  416         * PUSH (15992+X3:3)
  417                MA    LLHAAA,X2         * ADD 3 TO STACK POINTER               7  1840  # 43O 094           36  8436     094
  418                LCA   15992&X3,0&X2     * LOAD MEMORY 15992&X3 IN STACK        7  1847  L IIB 0!0           36 15992+3   000+2
  419                A     LUHAAA,0&X2       * ADD OFFSET 1 TO POINT ELEMENT 1      7  1854  A 38M 0!0           36  8384     000+2
  420         * END SUBSCRIPT (STR[1])
  421         * ASSIGNMENT ((STR[1]) = '\0')
  422         * POP (X1:3)
  423                LCA   0&X2,X1           * LOAD STACK IN X1                     7  1861  L 0!0 089           37   000+2   089
  424                MA    LSHAAA,X2         * ADD -3 TO STACK POINTER              7  1868  # 35! 094           37  8350     094
  425         * POP (0+X1:1)
  426                LCA   0&X2,0&X1         * LOAD STACK IN 0&X1                   7  1875  L 0!0 0'0           37   000+2   000+1
  427                MA    LBIAAA,X2         * ADD -1 TO STACK POINTER              7  1882  # ### 094           37   ###     094
  428         * END ASSIGNMENT ((STR[1]) = '\0')
  429         * RETURN TO LZAAAA WITH RETURN VALUE START
  430         * PUT ON STACK RETURN VALUE (START)
  431         * LOCAL VARIABLE (START : 6+X3)
  432         * PUSH (6+X3:3)
  433                MA    LLHAAA,X2         * ADD 3 TO STACK POINTER               7  1889  # 43O 094           37  8436     094
  434                LCA   6&X3,0&X2         * LOAD MEMORY 6&X3 IN STACK            7  1896  L 0?6 0!0           38   006+3   000+2
  435         * POP (15984+X3:3)
  436                LCA   0&X2,15984&X3     * LOAD STACK IN 15984&X3               7  1903  L 0!0 IHD           38   000+2 15984+3
  437                MA    LSHAAA,X2         * ADD -3 TO STACK POINTER              7  1910  # 35! 094           38  8350     094
  438                B     LZAAAA            * JUMP TO END OF FUNCTION BLOCK        4  1917  B O90               38  2690
  439         * END [BLOCK ENDING AT LBBAAA]
  440         ***************************************
  441         * END IF [IF ((VALUE == 0) THEN [BLOCK ENDING AT LBBAAA]]
  442         * END IF [IF ((VALUE < 0) THEN [BLOCK ENDING AT LABAAA] ELSE [IF ((VALUE ==
  443         * WHILE [WHILE ((EXP <= (VALUE / BASE))) [BLOCK ENDING AT LFBAAA] TOP:LGBAA
  444         * LESSOREQUAL (EXP <= (VALUE / BASE))
  445         * LOCAL VARIABLE (EXP : 14+X3)
  446         * PUSH (14+X3:5)
  447         LGBAAA MA    LMHAAA,X2         * ADD 5 TO STACK POINTER               7  1921  # 44O 094           38  8446     094
1                                                                                                         PAGE    8
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

  448                LCA   14&X3,0&X2        * LOAD MEMORY 14&X3 IN STACK           7  1928  L 0A4 0!0           38   014+3   000+2
  449                B     CLNNMN            * JUMP TO SNIPPET CLEAN_NUMBER         4  1935  B ###               39   ###
  450         * DIVIDE (VALUE / BASE)
  451         * PARAMETER VARIABLE (BASE : 15989+X3)
  452         * PUSH (15989+X3:5)
  453                MA    LMHAAA,X2         * ADD 5 TO STACK POINTER               7  1939  # 44O 094           39  8446     094
  454                LCA   15989&X3,0&X2     * LOAD MEMORY 15989&X3 IN STACK        7  1946  L IHI 0!0           39 15989+3   000+2
  455         * PARAMETER VARIABLE (VALUE : 15997+X3)
  456         * PUSH (15997+X3:5)
  457                MA    LMHAAA,X2         * ADD 5 TO STACK POINTER               7  1953  # 44O 094           39  8446     094
  458                LCA   15997&X3,0&X2     * LOAD MEMORY 15997&X3 IN STACK        7  1960  L IIG 0!0           39 15997+3   000+2
  459                B     SNPDIV            * JUMP TO SNIPPET SNIP_DIV             4  1967  B ###               39   ###
  460                MCW   0&X2,15995&X2     * MOVE STACK IN STACK AT -5            7  1971  M 0!0 IRE           40   000+2 15995+2
  461         * POP (5)
  462                MA    LPHAAA,X2         * ADD -5 TO STACK POINTER              7  1978  # 33P 094           40  8337     094
  463                B     CLNNMN            * JUMP TO SNIPPET CLEAN_NUMBER         4  1985  B ###               40   ###
  464                C     0&X2,15995&X2     * COMPARE STACK TO STACK AT -5         7  1989  C 0!0 IRE           40   000+2 15995+2
  465         * POP (5)
  466                MA    LPHAAA,X2         * ADD -5 TO STACK POINTER              7  1996  # 33P 094           40  8337     094
  467                MCW   LUHAAA,0&X2       * MOVE 1 IN STACK                      7  2003  M 38M 0!0           40  8384     000+2
  468                BH    LXFAAA            * JUMP IF LESS OR EQUAL                5  2010  B !19 U             41  2019
  469                B     LYFAAA            * JUMP TO END                          4  2015  B !26               41  2026
  470         LXFAAA MCW   LXHAAA,0&X2       * MOVE 0 IN STACK                      7  2019  M 40O 0!0           41  8406     000+2
  471         LYFAAA MCS   0&X2,0&X2         * CLEAR WM IN STACK                    7  2026  Z 0!0 0!0           41   000+2   000+2
  472         * POP (5)
  473                MA    LPHAAA,X2         * ADD -5 TO STACK POINTER              7  2033  # 33P 094           41  8337     094
  474                BCE   LJBAAA,5&X2,      * JUMP TO BOTTOM OF WHILE              8  2040  B J54 0!5           41  2154     005+2
  475         ***************************************
  476         * BEGIN [BLOCK ENDING AT LFBAAA]
  477         * MULTIPLY (EXP * BASE)
  478         * LOCAL VARIABLE (EXP : 14+X3)
  479         * PUSH (14+X3:5)
  480                MA    LMHAAA,X2         * ADD 5 TO STACK POINTER               7  2048  # 44O 094           42  8446     094
  481                LCA   14&X3,0&X2        * LOAD MEMORY 14&X3 IN STACK           7  2055  L 0A4 0!0           42   014+3   000+2
  482         * PARAMETER VARIABLE (BASE : 15989+X3)
  483         * PUSH (15989+X3:5)
  484                MA    LMHAAA,X2         * ADD 5 TO STACK POINTER               7  2062  # 44O 094           42  8446     094
  485                LCA   15989&X3,0&X2     * LOAD MEMORY 15989&X3 IN STACK        7  2069  L IHI 0!0           42 15989+3   000+2
  486                M     15995&X2,6&X2     * MULTIPLY STACK AT -5 TO STACK AT     7  2076  @ IRE 0!6           42 15995+2   006+2
  487                SW    2&X2              * SET WM IN STACK AT 2                 4  2083  , 0!2               42   002+2
  488                LCA   6&X2,15995&X2     * LOAD STACK AT 6 TO STACK AT -5       7  2087  L 0!6 IRE           43   006+2 15995+2
  489         * POP (5)
  490                MA    LPHAAA,X2         * ADD -5 TO STACK POINTER              7  2094  # 33P 094           43  8337     094
  491         * PUSH (@014@:3)
  492                MA    LLHAAA,X2         * ADD 3 TO STACK POINTER               7  2101  # 43O 094           43  8436     094
  493                LCA   LVHAAA,0&X2       * LOAD DATA @014@ IN STACK             7  2108  L 36! 0!0           43  8360     000+2
  494                MA    X3,0&X2           * ADD X3 TO STACK                      7  2115  # 099 0!0           43   099     000+2
  495         * ASSIGNMENT (EXP = (EXP * BASE))
  496         * POP (X1:3)
  497                LCA   0&X2,X1           * LOAD STACK IN X1                     7  2122  L 0!0 089           44   000+2   089
1                                                                                                         PAGE    9
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

  498                MA    LSHAAA,X2         * ADD -3 TO STACK POINTER              7  2129  # 35! 094           44  8350     094
  499         * POP (0+X1:5)
  500                LCA   0&X2,0&X1         * LOAD STACK IN 0&X1                   7  2136  L 0!0 0'0           44   000+2   000+1
  501                MA    LPHAAA,X2         * ADD -5 TO STACK POINTER              7  2143  # 33P 094           44  8337     094
  502         * END ASSIGNMENT (EXP = (EXP * BASE))
  503         * END [BLOCK ENDING AT LFBAAA]
  504         ***************************************
  505         LFBAAA B     LGBAAA            * JUMP TO TOP OF WHILE                 4  2150  B Z21               44  1921
  506         * END WHILE [WHILE ((EXP <= (VALUE / BASE))) [BLOCK ENDING AT LFBAAA] TOP:L
  507         * WHILE [WHILE (EXP) [BLOCK ENDING AT LIBAAA] TOP:LJBAAA BOTTOM:LKBAAA]
  508         * LOCAL VARIABLE (EXP : 14+X3)
  509         * PUSH (14+X3:5)
  510         LJBAAA MA    LMHAAA,X2         * ADD 5 TO STACK POINTER               7  2154  # 44O 094           44  8446     094
  511                LCA   14&X3,0&X2        * LOAD MEMORY 14&X3 IN STACK           7  2161  L 0A4 0!0           45   014+3   000+2
  512                MCS   0&X2,0&X2         * CLEAR WM IN STACK                    7  2168  Z 0!0 0!0           45   000+2   000+2
  513         * POP (5)
  514                MA    LPHAAA,X2         * ADD -5 TO STACK POINTER              7  2175  # 33P 094           45  8337     094
  515                BCE   LKBAAA,5&X2,      * JUMP TO BOTTOM OF WHILE              8  2182  B O06 0!5           45  2606     005+2
  516         ***************************************
  517         * BEGIN [BLOCK ENDING AT LIBAAA]
  518         * SUBSCRIPT (DIGITS[(VALUE / EXP)])
  519         * LOCAL VARIABLE (DIGITS : 9+X3)
  520         * PUSH (9+X3:3)
  521                MA    LLHAAA,X2         * ADD 3 TO STACK POINTER               7  2190  # 43O 094           45  8436     094
  522                LCA   9&X3,0&X2         * LOAD MEMORY 9&X3 IN STACK            7  2197  L 0?9 0!0           46   009+3   000+2
  523         * DIVIDE (VALUE / EXP)
  524         * LOCAL VARIABLE (EXP : 14+X3)
  525         * PUSH (14+X3:5)
  526                MA    LMHAAA,X2         * ADD 5 TO STACK POINTER               7  2204  # 44O 094           46  8446     094
  527                LCA   14&X3,0&X2        * LOAD MEMORY 14&X3 IN STACK           7  2211  L 0A4 0!0           46   014+3   000+2
  528         * PARAMETER VARIABLE (VALUE : 15997+X3)
  529         * PUSH (15997+X3:5)
  530                MA    LMHAAA,X2         * ADD 5 TO STACK POINTER               7  2218  # 44O 094           46  8446     094
  531                LCA   15997&X3,0&X2     * LOAD MEMORY 15997&X3 IN STACK        7  2225  L IIG 0!0           46 15997+3   000+2
  532                B     SNPDIV            * JUMP TO SNIPPET SNIP_DIV             4  2232  B ###               46   ###
  533                MCW   0&X2,15995&X2     * MOVE STACK IN STACK AT -5            7  2236  M 0!0 IRE           47   000+2 15995+2
  534         * POP (5)
  535                MA    LPHAAA,X2         * ADD -5 TO STACK POINTER              7  2243  # 33P 094           47  8337     094
  536         * PUT RAW INDEX ON THE STACK
  537         * PUSH (@00001@:5)
  538                MA    LMHAAA,X2         * ADD 5 TO STACK POINTER               7  2250  # 44O 094           47  8446     094
  539                LCA   LUHAAA,0&X2       * LOAD DATA @00001@ IN STACK           7  2257  L 38M 0!0           47  8384     000+2
  540                M     15995&X2,6&X2     * MULTIPLY STACK AT -5 TO STACK AT     7  2264  @ IRE 0!6           47 15995+2   006+2
  541                SW    2&X2              * SET WM IN STACK AT 2                 4  2271  , 0!2               47   002+2
  542                LCA   6&X2,15995&X2     * LOAD STACK AT 6 IN STACK AT -5       7  2275  L 0!6 IRE           48   006+2 15995+2
  543         * POP (5)
  544                MA    LPHAAA,X2         * ADD -5 TO STACK POINTER              7  2282  # 33P 094           48  8337     094
  545         * STACK TOP IS NOW ARRAY INDEX
  546                B     NMNPTR            * JUMP TO SNIPPET NUMBER_TO_POINTE     4  2289  B ###               48   ###
  547                MA    0&X2,15997&X2     * ADD STACK TO STACK AT -3             7  2293  # 0!0 IRG           48   000+2 15997+2
1                                                                                                         PAGE   10
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

  548         * POP (3)
  549                MA    LSHAAA,X2         * ADD -3 TO STACK POINTER              7  2300  # 35! 094           48  8350     094
  550         * STACK TOP IS LOCATION IN ARRAY NOW
  551         * END SUBSCRIPT (DIGITS[(VALUE / EXP)])
  552         * POP (X1:3)
  553                LCA   0&X2,X1           * LOAD STACK IN X1                     7  2307  L 0!0 089           48   000+2   089
  554                MA    LSHAAA,X2         * ADD -3 TO STACK POINTER              7  2314  # 35! 094           49  8350     094
  555         * PUSH (0+X1:1)
  556                MA    LYHAAA,X2         * ADD 1 TO STACK POINTER               7  2321  # 43R 094           49  8439     094
  557                LCA   0&X1,0&X2         * LOAD MEMORY 0&X1 IN STACK            7  2328  L 0'0 0!0           49   000+1   000+2
  558         * POSTINCREMENT (STR++)
  559         * PUSH (@I9B@:3)
  560                MA    LLHAAA,X2         * ADD 3 TO STACK POINTER               7  2335  # 43O 094           49  8436     094
  561                LCA   LAIAAA,0&X2       * LOAD DATA @I9B@ IN STACK             7  2342  L 41M 0!0           49  8414     000+2
  562                MA    X3,0&X2           * ADD X3 TO STACK                      7  2349  # 099 0!0           50   099     000+2
  563         * POP (X1:3)
  564                LCA   0&X2,X1           * LOAD STACK IN X1                     7  2356  L 0!0 089           50   000+2   089
  565                MA    LSHAAA,X2         * ADD -3 TO STACK POINTER              7  2363  # 35! 094           50  8350     094
  566         * PUSH (0+X1:3)
  567                MA    LLHAAA,X2         * ADD 3 TO STACK POINTER               7  2370  # 43O 094           50  8436     094
  568                LCA   0&X1,0&X2         * LOAD MEMORY 0&X1 IN STACK            7  2377  L 0'0 0!0           50   000+1   000+2
  569                MA    LYHAAA,0&X1       * POSTINCREMENT POINTER AT X1          7  2384  # 43R 0'0           51  8439     000+1
  570         * ASSIGNMENT ((*(STR++)) = (DIGITS[(VALUE / EXP)]))
  571         * POP (X1:3)
  572                LCA   0&X2,X1           * LOAD STACK IN X1                     7  2391  L 0!0 089           51   000+2   089
  573                MA    LSHAAA,X2         * ADD -3 TO STACK POINTER              7  2398  # 35! 094           51  8350     094
  574         * POP (0+X1:1)
  575                LCA   0&X2,0&X1         * LOAD STACK IN 0&X1                   7  2405  L 0!0 0'0           51   000+2   000+1
  576                MA    LBIAAA,X2         * ADD -1 TO STACK POINTER              7  2412  # ### 094           51   ###     094
  577         * END ASSIGNMENT ((*(STR++)) = (DIGITS[(VALUE / EXP)]))
  578         * MODULO (%) (VALUE % EXP)
  579         * LOCAL VARIABLE (EXP : 14+X3)
  580         * PUSH (14+X3:5)
  581                MA    LMHAAA,X2         * ADD 5 TO STACK POINTER               7  2419  # 44O 094           52  8446     094
  582                LCA   14&X3,0&X2        * LOAD MEMORY 14&X3 IN STACK           7  2426  L 0A4 0!0           52   014+3   000+2
  583         * PARAMETER VARIABLE (VALUE : 15997+X3)
  584         * PUSH (15997+X3:5)
  585                MA    LMHAAA,X2         * ADD 5 TO STACK POINTER               7  2433  # 44O 094           52  8446     094
  586                LCA   15997&X3,0&X2     * LOAD MEMORY 15997&X3 IN STACK        7  2440  L IIG 0!0           52 15997+3   000+2
  587                B     SNPDIV            * JUMP TO SNIPPET SNIP_DIV             4  2447  B ###               52   ###
  588         * POP (5)
  589                MA    LPHAAA,X2         * ADD -5 TO STACK POINTER              7  2451  # 33P 094           52  8337     094
  590         * PUSH (@I9G@:3)
  591                MA    LLHAAA,X2         * ADD 3 TO STACK POINTER               7  2458  # 43O 094           53  8436     094
  592                LCA   LSHAAA,0&X2       * LOAD DATA @I9G@ IN STACK             7  2465  L 35! 0!0           53  8350     000+2
  593                MA    X3,0&X2           * ADD X3 TO STACK                      7  2472  # 099 0!0           53   099     000+2
  594         * ASSIGNMENT (VALUE = (VALUE % EXP))
  595         * POP (X1:3)
  596                LCA   0&X2,X1           * LOAD STACK IN X1                     7  2479  L 0!0 089           53   000+2   089
  597                MA    LSHAAA,X2         * ADD -3 TO STACK POINTER              7  2486  # 35! 094           53  8350     094
1                                                                                                         PAGE   11
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

  598         * POP (0+X1:5)
  599                LCA   0&X2,0&X1         * LOAD STACK IN 0&X1                   7  2493  L 0!0 0'0           54   000+2   000+1
  600                MA    LPHAAA,X2         * ADD -5 TO STACK POINTER              7  2500  # 33P 094           54  8337     094
  601         * END ASSIGNMENT (VALUE = (VALUE % EXP))
  602         * DIVIDE (EXP / BASE)
  603         * PARAMETER VARIABLE (BASE : 15989+X3)
  604         * PUSH (15989+X3:5)
  605                MA    LMHAAA,X2         * ADD 5 TO STACK POINTER               7  2507  # 44O 094           54  8446     094
  606                LCA   15989&X3,0&X2     * LOAD MEMORY 15989&X3 IN STACK        7  2514  L IHI 0!0           54 15989+3   000+2
  607         * LOCAL VARIABLE (EXP : 14+X3)
  608         * PUSH (14+X3:5)
  609                MA    LMHAAA,X2         * ADD 5 TO STACK POINTER               7  2521  # 44O 094           54  8446     094
  610                LCA   14&X3,0&X2        * LOAD MEMORY 14&X3 IN STACK           7  2528  L 0A4 0!0           55   014+3   000+2
  611                B     SNPDIV            * JUMP TO SNIPPET SNIP_DIV             4  2535  B ###               55   ###
  612                MCW   0&X2,15995&X2     * MOVE STACK IN STACK AT -5            7  2539  M 0!0 IRE           55   000+2 15995+2
  613         * POP (5)
  614                MA    LPHAAA,X2         * ADD -5 TO STACK POINTER              7  2546  # 33P 094           55  8337     094
  615         * PUSH (@014@:3)
  616                MA    LLHAAA,X2         * ADD 3 TO STACK POINTER               7  2553  # 43O 094           55  8436     094
  617                LCA   LVHAAA,0&X2       * LOAD DATA @014@ IN STACK             7  2560  L 36! 0!0           55  8360     000+2
  618                MA    X3,0&X2           * ADD X3 TO STACK                      7  2567  # 099 0!0           56   099     000+2
  619         * ASSIGNMENT (EXP = (EXP / BASE))
  620         * POP (X1:3)
  621                LCA   0&X2,X1           * LOAD STACK IN X1                     7  2574  L 0!0 089           56   000+2   089
  622                MA    LSHAAA,X2         * ADD -3 TO STACK POINTER              7  2581  # 35! 094           56  8350     094
  623         * POP (0+X1:5)
  624                LCA   0&X2,0&X1         * LOAD STACK IN 0&X1                   7  2588  L 0!0 0'0           56   000+2   000+1
  625                MA    LPHAAA,X2         * ADD -5 TO STACK POINTER              7  2595  # 33P 094           56  8337     094
  626         * END ASSIGNMENT (EXP = (EXP / BASE))
  627         * END [BLOCK ENDING AT LIBAAA]
  628         ***************************************
  629         LIBAAA B     LJBAAA            * JUMP TO TOP OF WHILE                 4  2602  B J54               56  2154
  630         * END WHILE [WHILE (EXP) [BLOCK ENDING AT LIBAAA] TOP:LJBAAA BOTTOM:LKBAAA]
  631         * CONSTANT ('\0' : EOS)
  632         * PUSH (EOS:1)
  633         LKBAAA MA    LYHAAA,X2         * ADD 1 TO STACK POINTER               7  2606  # 43R 094           57  8439     094
  634                LCA   EOS,0&X2          * LOAD MEMORY EOS IN STACK             7  2613  L 345 0!0           57   345     000+2
  635         * PARAMETER VARIABLE (STR : 15992+X3)
  636         * PUSH (15992+X3:3)
  637                MA    LLHAAA,X2         * ADD 3 TO STACK POINTER               7  2620  # 43O 094           57  8436     094
  638                LCA   15992&X3,0&X2     * LOAD MEMORY 15992&X3 IN STACK        7  2627  L IIB 0!0           57 15992+3   000+2
  639         * ASSIGNMENT ((*STR) = '\0')
  640         * POP (X1:3)
  641                LCA   0&X2,X1           * LOAD STACK IN X1                     7  2634  L 0!0 089           57   000+2   089
  642                MA    LSHAAA,X2         * ADD -3 TO STACK POINTER              7  2641  # 35! 094           58  8350     094
  643         * POP (0+X1:1)
  644                LCA   0&X2,0&X1         * LOAD STACK IN 0&X1                   7  2648  L 0!0 0'0           58   000+2   000+1
  645                MA    LBIAAA,X2         * ADD -1 TO STACK POINTER              7  2655  # ### 094           58   ###     094
  646         * END ASSIGNMENT ((*STR) = '\0')
  647         * PUT ON STACK RETURN VALUE (START)
1                                                                                                         PAGE   12
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

  648         * LOCAL VARIABLE (START : 6+X3)
  649         * PUSH (6+X3:3)
  650                MA    LLHAAA,X2         * ADD 3 TO STACK POINTER               7  2662  # 43O 094           58  8436     094
  651                LCA   6&X3,0&X2         * LOAD MEMORY 6&X3 IN STACK            7  2669  L 0?6 0!0           58   006+3   000+2
  652         * POP (15984+X3:3)
  653                LCA   0&X2,15984&X3     * LOAD STACK IN 15984&X3               7  2676  L 0!0 IHD           59   000+2 15984+3
  654                MA    LSHAAA,X2         * ADD -3 TO STACK POINTER              7  2683  # 35! 094           59  8350     094
  655         * POP (14)
  656         LZAAAA MA    LDIAAA,X2         * ADD -14 TO STACK POINTER             7  2690  # 42O 094           59  8426     094
  657         * END [BLOCK ENDING AT LZAAAA]
  658         ***************************************
  659                LCA   3&X3,X1           * LOAD RETURN ADDRESS IN X1            7  2697  L 0?3 089           59   003+3   089
  660                B     0&X1              * JUMP BACK TO CALLER IN X1            4  2704  B 0'0               59   000+1
  661         ***************************************************************************
  662         * END FUNCTION : ITOA
  663         ***************************************************************************
  664         ***************************************************************************
  665         * FUNCTION : MAIN
  666         ***************************************************************************
  667         LDFAAA SBR   3&X3              * SAVE RETURN ADDRESS IN REGISTER      4  2708  H 0?3               59   003+3
  668         * SET THE RIGHT WM AND CLEAR THE WRONG ONES
  669                SW    1&X3              * SET WM AT 1&X3                       4  2712  , 0?1               60   001+3
  670                CW    2&X3              * CLEAR WM AT 2&X3                     4  2716  ) 0?2               60   002+3
  671                CW    3&X3              * CLEAR WM AT 3&X3                     4  2720  ) 0?3               60   003+3
  672         ***************************************
  673         * BEGIN [BLOCK ENDING AT LEFAAA]
  674         * I SIZE:5 OFFSET:3
  675         * PUSH (8)
  676                MA    LEIAAA,X2         * ADD 8 TO STACK POINTER               7  2724  # 36O 094           60  8366     094
  677         * FOR [FOR ((I = 1); (I <= 100); (++I)) [BLOCK ENDING AT LFFAAA] TOP:LQFAAA
  678         * CONSTANT (1 : @00001@)
  679         * PUSH (@00001@:5)
  680                MA    LMHAAA,X2         * ADD 5 TO STACK POINTER               7  2731  # 44O 094           60  8446     094
  681                LCA   LUHAAA,0&X2       * LOAD DATA @00001@ IN STACK           7  2738  L 38M 0!0           60  8384     000+2
  682         * PUSH (@008@:3)
  683                MA    LLHAAA,X2         * ADD 3 TO STACK POINTER               7  2745  # 43O 094           61  8436     094
  684                LCA   LEIAAA,0&X2       * LOAD DATA @008@ IN STACK             7  2752  L 36O 0!0           61  8366     000+2
  685                MA    X3,0&X2           * ADD X3 TO STACK                      7  2759  # 099 0!0           61   099     000+2
  686         * ASSIGNMENT (I = 1)
  687         * POP (X1:3)
  688                LCA   0&X2,X1           * LOAD STACK IN X1                     7  2766  L 0!0 089           61   000+2   089
  689                MA    LSHAAA,X2         * ADD -3 TO STACK POINTER              7  2773  # 35! 094           61  8350     094
  690         * POP (0+X1:5)
  691                LCA   0&X2,0&X1         * LOAD STACK IN 0&X1                   7  2780  L 0!0 0'0           62   000+2   000+1
  692                MA    LPHAAA,X2         * ADD -5 TO STACK POINTER              7  2787  # 33P 094           62  8337     094
  693         * END ASSIGNMENT (I = 1)
  694         * LESSOREQUAL (I <= 100)
  695         * LOCAL VARIABLE (I : 8+X3)
  696         * PUSH (8+X3:5)
  697         LQFAAA MA    LMHAAA,X2         * ADD 5 TO STACK POINTER               7  2794  # 44O 094           62  8446     094
1                                                                                                         PAGE   13
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

  698                LCA   8&X3,0&X2         * LOAD MEMORY 8&X3 IN STACK            7  2801  L 0?8 0!0           62   008+3   000+2
  699                B     CLNNMN            * JUMP TO SNIPPET CLEAN_NUMBER         4  2808  B ###               62   ###
  700         * CONSTANT (100 : @00100@)
  701         * PUSH (@00100@:5)
  702                MA    LMHAAA,X2         * ADD 5 TO STACK POINTER               7  2812  # 44O 094           62  8446     094
  703                LCA   LFIAAA,0&X2       * LOAD DATA @00100@ IN STACK           7  2819  L 38R 0!0           63  8389     000+2
  704                B     CLNNMN            * JUMP TO SNIPPET CLEAN_NUMBER         4  2826  B ###               63   ###
  705                C     0&X2,15995&X2     * COMPARE STACK TO STACK AT -5         7  2830  C 0!0 IRE           63   000+2 15995+2
  706         * POP (5)
  707                MA    LPHAAA,X2         * ADD -5 TO STACK POINTER              7  2837  # 33P 094           63  8337     094
  708                MCW   LUHAAA,0&X2       * MOVE 1 IN STACK                      7  2844  M 38M 0!0           63  8384     000+2
  709                BH    LZFAAA            * JUMP IF LESS OR EQUAL                5  2851  B Q60 U             63  2860
  710                B     LAGAAA            * JUMP TO END                          4  2856  B Q67               64  2867
  711         LZFAAA MCW   LXHAAA,0&X2       * MOVE 0 IN STACK                      7  2860  M 40O 0!0           64  8406     000+2
  712         LAGAAA MCS   0&X2,0&X2         * CLEAR WM IN STACK                    7  2867  Z 0!0 0!0           64   000+2   000+2
  713         * POP (5)
  714                MA    LPHAAA,X2         * ADD -5 TO STACK POINTER              7  2874  # 33P 094           64  8337     094
  715                BCE   LEFAAA,5&X2,      * JUMP TO BOTTOM OF FOR                8  2881  B H47 0!5           64  3847     005+2
  716         ***************************************
  717         * BEGIN [BLOCK ENDING AT LFFAAA]
  718         * IF [IF ((((I % 3) == 0) && ((I % 5) == 0)) THEN [BLOCK ENDING AT LGFAAA]
  719         * AND (((I % 3) == 0) && ((I % 5) == 0))
  720         * PUSH (@00001@:5)
  721                MA    LMHAAA,X2         * ADD 5 TO STACK POINTER               7  2889  # 44O 094           65  8446     094
  722                LCA   LUHAAA,0&X2       * LOAD DATA @00001@ IN STACK           7  2896  L 38M 0!0           65  8384     000+2
  723         * EQUAL ((I % 3) == 0)
  724         * MODULO (%) (I % 3)
  725         * CONSTANT (3 : @00003@)
  726         * PUSH (@00003@:5)
  727                MA    LMHAAA,X2         * ADD 5 TO STACK POINTER               7  2903  # 44O 094           65  8446     094
  728                LCA   LGIAAA,0&X2       * LOAD DATA @00003@ IN STACK           7  2910  L 39N 0!0           65  8395     000+2
  729         * LOCAL VARIABLE (I : 8+X3)
  730         * PUSH (8+X3:5)
  731                MA    LMHAAA,X2         * ADD 5 TO STACK POINTER               7  2917  # 44O 094           65  8446     094
  732                LCA   8&X3,0&X2         * LOAD MEMORY 8&X3 IN STACK            7  2924  L 0?8 0!0           66   008+3   000+2
  733                B     SNPDIV            * JUMP TO SNIPPET SNIP_DIV             4  2931  B ###               66   ###
  734         * POP (5)
  735                MA    LPHAAA,X2         * ADD -5 TO STACK POINTER              7  2935  # 33P 094           66  8337     094
  736                B     CLNNMN            * JUMP TO SNIPPET CLEAN_NUMBER         4  2942  B ###               66   ###
  737         * CONSTANT (0 : @00000@)
  738         * PUSH (@00000@:5)
  739                MA    LMHAAA,X2         * ADD 5 TO STACK POINTER               7  2946  # 44O 094           66  8446     094
  740                LCA   LXHAAA,0&X2       * LOAD DATA @00000@ IN STACK           7  2953  L 40O 0!0           66  8406     000+2
  741                B     CLNNMN            * JUMP TO SNIPPET CLEAN_NUMBER         4  2960  B ###               67   ###
  742                C     0&X2,15995&X2     * COMPARE STACK TO STACK AT -5         7  2964  C 0!0 IRE           67   000+2 15995+2
  743         * POP (5)
  744                MA    LPHAAA,X2         * ADD -5 TO STACK POINTER              7  2971  # 33P 094           67  8337     094
  745         * POP (5)
  746                MA    LPHAAA,X2         * ADD -5 TO STACK POINTER              7  2978  # 33P 094           67  8337     094
  747         * PUSH (@00000@:5)
1                                                                                                         PAGE   14
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

  748                MA    LMHAAA,X2         * ADD 5 TO STACK POINTER               7  2985  # 44O 094           67  8446     094
  749                LCA   LXHAAA,0&X2       * LOAD DATA @00000@ IN STACK           7  2992  L 40O 0!0           67  8406     000+2
  750                BE    LDGAAA            * JUMP IF EQUAL                        5  2999  B ?08 S             68  3008
  751                B     LEGAAA            * JUMP TO END                          4  3004  B ?15               68  3015
  752         LDGAAA MCW   LUHAAA,0&X2       * MOVE 1 IN STACK                      7  3008  M 38M 0!0           68  8384     000+2
  753         LEGAAA MCS   0&X2,0&X2         * CLEAR WM IN STACK                    7  3015  Z 0!0 0!0           68   000+2   000+2
  754         * POP (5)
  755                MA    LPHAAA,X2         * ADD -5 TO STACK POINTER              7  3022  # 33P 094           68  8337     094
  756                BCE   LBGAAA,5&X2,      * JUMP TO ZERO IF EQUAL                8  3029  B A75 0!5           68  3175     005+2
  757         * EQUAL ((I % 5) == 0)
  758         * MODULO (%) (I % 5)
  759         * CONSTANT (5 : @00005@)
  760         * PUSH (@00005@:5)
  761                MA    LMHAAA,X2         * ADD 5 TO STACK POINTER               7  3037  # 44O 094           69  8446     094
  762                LCA   LHIAAA,0&X2       * LOAD DATA @00005@ IN STACK           7  3044  L 37M 0!0           69  8374     000+2
  763         * LOCAL VARIABLE (I : 8+X3)
  764         * PUSH (8+X3:5)
  765                MA    LMHAAA,X2         * ADD 5 TO STACK POINTER               7  3051  # 44O 094           69  8446     094
  766                LCA   8&X3,0&X2         * LOAD MEMORY 8&X3 IN STACK            7  3058  L 0?8 0!0           69   008+3   000+2
  767                B     SNPDIV            * JUMP TO SNIPPET SNIP_DIV             4  3065  B ###               69   ###
  768         * POP (5)
  769                MA    LPHAAA,X2         * ADD -5 TO STACK POINTER              7  3069  # 33P 094           69  8337     094
  770                B     CLNNMN            * JUMP TO SNIPPET CLEAN_NUMBER         4  3076  B ###               70   ###
  771         * CONSTANT (0 : @00000@)
  772         * PUSH (@00000@:5)
  773                MA    LMHAAA,X2         * ADD 5 TO STACK POINTER               7  3080  # 44O 094           70  8446     094
  774                LCA   LXHAAA,0&X2       * LOAD DATA @00000@ IN STACK           7  3087  L 40O 0!0           70  8406     000+2
  775                B     CLNNMN            * JUMP TO SNIPPET CLEAN_NUMBER         4  3094  B ###               70   ###
  776                C     0&X2,15995&X2     * COMPARE STACK TO STACK AT -5         7  3098  C 0!0 IRE           70   000+2 15995+2
  777         * POP (5)
  778                MA    LPHAAA,X2         * ADD -5 TO STACK POINTER              7  3105  # 33P 094           70  8337     094
  779         * POP (5)
  780                MA    LPHAAA,X2         * ADD -5 TO STACK POINTER              7  3112  # 33P 094           71  8337     094
  781         * PUSH (@00000@:5)
  782                MA    LMHAAA,X2         * ADD 5 TO STACK POINTER               7  3119  # 44O 094           71  8446     094
  783                LCA   LXHAAA,0&X2       * LOAD DATA @00000@ IN STACK           7  3126  L 40O 0!0           71  8406     000+2
  784                BE    LFGAAA            * JUMP IF EQUAL                        5  3133  B A42 S             71  3142
  785                B     LGGAAA            * JUMP TO END                          4  3138  B A49               71  3149
  786         LFGAAA MCW   LUHAAA,0&X2       * MOVE 1 IN STACK                      7  3142  M 38M 0!0           71  8384     000+2
  787         LGGAAA MCS   0&X2,0&X2         * CLEAR WM                             7  3149  Z 0!0 0!0           72   000+2   000+2
  788         * POP (5)
  789                MA    LPHAAA,X2         * ADD -5 TO STACK POINTER              7  3156  # 33P 094           72  8337     094
  790                BCE   LBGAAA,5&X2,      * JUMP TO ZERO IF EQUAL                8  3163  B A75 0!5           72  3175     005+2
  791                B     LCGAAA            * JUMP TO END                          4  3171  B A82               72  3182
  792         LBGAAA MCW   LXHAAA,0&X2       * MOVE 0 IN STACK                      7  3175  M 40O 0!0           72  8406     000+2
  793         LCGAAA MCS   0&X2,0&X2         * CLEAR WM IN STACK                    7  3182  Z 0!0 0!0           73   000+2   000+2
  794         * POP (5)
  795                MA    LPHAAA,X2         * ADD -5 TO STACK POINTER              7  3189  # 33P 094           73  8337     094
  796                BCE   LOFAAA,5&X2,      * JUMP WHEN FALSE                      8  3196  B B82 0!5           73  3282     005+2
  797         ***************************************
1                                                                                                         PAGE   15
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

  798         * BEGIN [BLOCK ENDING AT LGFAAA]
  799         * FUNCTION CALL PRINTF(CONST_STR_LITERAL_8)
  800         * PUSH (5)
  801                MA    LMHAAA,X2         * ADD 5 TO STACK POINTER               7  3204  # 44O 094           73  8446     094
  802         * STATIC ARRAY (CONST_STR_LITERAL_8:CHAR [10])
  803         * PUSH (@'31@:3)
  804                MA    LLHAAA,X2         * ADD 3 TO STACK POINTER               7  3211  # 43O 094           73  8436     094
  805                LCA   LIIAAA,0&X2       * LOAD DATA @'31@ IN STACK             7  3218  L 32! 0!0           74  8320     000+2
  806         * CREATE A STACK FRAME WITH X3 POINTER TO IT
  807         * PUSH (X3:3)
  808                MA    LLHAAA,X2         * ADD 3 TO STACK POINTER               7  3225  # 43O 094           74  8436     094
  809                LCA   X3,0&X2           * LOAD X3 IN STACK                     7  3232  L 099 0!0           74   099     000+2
  810                MCW   X2,X3             * MOVE X2 IN X3                        7  3239  M 094 099           74   094     099
  811                B     LAEAAA            * JUMP TO FUNCTION PRINTF              4  3246  B H65               74  3865
  812         * POP (X3:3)
  813                LCA   0&X2,X3           * LOAD STACK IN X3                     7  3250  L 0!0 099           74   000+2   099
  814                MA    LSHAAA,X2         * ADD -3 TO STACK POINTER              7  3257  # 35! 094           75  8350     094
  815         * POP (3)
  816                MA    LSHAAA,X2         * ADD -3 TO STACK POINTER              7  3264  # 35! 094           75  8350     094
  817         * POP (5)
  818                MA    LPHAAA,X2         * ADD -5 TO STACK POINTER              7  3271  # 33P 094           75  8337     094
  819         * END FUNCTION CALL PRINTF(CONST_STR_LITERAL_8)
  820         * END [BLOCK ENDING AT LGFAAA]
  821         ***************************************
  822         LGFAAA B     LSFAAA            * JUMP WHEN TRUE                       4  3278  B H01               75  3801
  823         * IF [IF (((I % 3) == 0) THEN [BLOCK ENDING AT LHFAAA] ELSE [IF (((I % 5) =
  824         * EQUAL ((I % 3) == 0)
  825         * MODULO (%) (I % 3)
  826         * CONSTANT (3 : @00003@)
  827         * PUSH (@00003@:5)
  828         LOFAAA MA    LMHAAA,X2         * ADD 5 TO STACK POINTER               7  3282  # 44O 094           75  8446     094
  829                LCA   LGIAAA,0&X2       * LOAD DATA @00003@ IN STACK           7  3289  L 39N 0!0           75  8395     000+2
  830         * LOCAL VARIABLE (I : 8+X3)
  831         * PUSH (8+X3:5)
  832                MA    LMHAAA,X2         * ADD 5 TO STACK POINTER               7  3296  # 44O 094           76  8446     094
  833                LCA   8&X3,0&X2         * LOAD MEMORY 8&X3 IN STACK            7  3303  L 0?8 0!0           76   008+3   000+2
  834                B     SNPDIV            * JUMP TO SNIPPET SNIP_DIV             4  3310  B ###               76   ###
  835         * POP (5)
  836                MA    LPHAAA,X2         * ADD -5 TO STACK POINTER              7  3314  # 33P 094           76  8337     094
  837                B     CLNNMN            * JUMP TO SNIPPET CLEAN_NUMBER         4  3321  B ###               76   ###
  838         * CONSTANT (0 : @00000@)
  839         * PUSH (@00000@:5)
  840                MA    LMHAAA,X2         * ADD 5 TO STACK POINTER               7  3325  # 44O 094           76  8446     094
  841                LCA   LXHAAA,0&X2       * LOAD DATA @00000@ IN STACK           7  3332  L 40O 0!0           77  8406     000+2
  842                B     CLNNMN            * JUMP TO SNIPPET CLEAN_NUMBER         4  3339  B ###               77   ###
  843                C     0&X2,15995&X2     * COMPARE STACK TO STACK AT -5         7  3343  C 0!0 IRE           77   000+2 15995+2
  844         * POP (5)
  845                MA    LPHAAA,X2         * ADD -5 TO STACK POINTER              7  3350  # 33P 094           77  8337     094
  846         * POP (5)
  847                MA    LPHAAA,X2         * ADD -5 TO STACK POINTER              7  3357  # 33P 094           77  8337     094
1                                                                                                         PAGE   16
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

  848         * PUSH (@00000@:5)
  849                MA    LMHAAA,X2         * ADD 5 TO STACK POINTER               7  3364  # 44O 094           77  8446     094
  850                LCA   LXHAAA,0&X2       * LOAD DATA @00000@ IN STACK           7  3371  L 40O 0!0           78  8406     000+2
  851                BE    LHGAAA            * JUMP IF EQUAL                        5  3378  B C87 S             78  3387
  852                B     LIGAAA            * JUMP TO END                          4  3383  B C94               78  3394
  853         LHGAAA MCW   LUHAAA,0&X2       * MOVE 1 IN STACK                      7  3387  M 38M 0!0           78  8384     000+2
  854         LIGAAA MCS   0&X2,0&X2         * CLEAR WM IN STACK                    7  3394  Z 0!0 0!0           78   000+2   000+2
  855         * POP (5)
  856                MA    LPHAAA,X2         * ADD -5 TO STACK POINTER              7  3401  # 33P 094           78  8337     094
  857                BCE   LMFAAA,5&X2,      * JUMP WHEN FALSE                      8  3408  B D94 0!5           79  3494     005+2
  858         ***************************************
  859         * BEGIN [BLOCK ENDING AT LHFAAA]
  860         * FUNCTION CALL PRINTF(CONST_STR_LITERAL_9)
  861         * PUSH (5)
  862                MA    LMHAAA,X2         * ADD 5 TO STACK POINTER               7  3416  # 44O 094           79  8446     094
  863         * STATIC ARRAY (CONST_STR_LITERAL_9:CHAR [6])
  864         * PUSH (@'41@:3)
  865                MA    LLHAAA,X2         * ADD 3 TO STACK POINTER               7  3423  # 43O 094           79  8436     094
  866                LCA   LJIAAA,0&X2       * LOAD DATA @'41@ IN STACK             7  3430  L 32O 0!0           79  8326     000+2
  867         * CREATE A STACK FRAME WITH X3 POINTER TO IT
  868         * PUSH (X3:3)
  869                MA    LLHAAA,X2         * ADD 3 TO STACK POINTER               7  3437  # 43O 094           79  8436     094
  870                LCA   X3,0&X2           * LOAD X3 IN STACK                     7  3444  L 099 0!0           80   099     000+2
  871                MCW   X2,X3             * MOVE X2 IN X3                        7  3451  M 094 099           80   094     099
  872                B     LAEAAA            * JUMP TO FUNCTION PRINTF              4  3458  B H65               80  3865
  873         * POP (X3:3)
  874                LCA   0&X2,X3           * LOAD STACK IN X3                     7  3462  L 0!0 099           80   000+2   099
  875                MA    LSHAAA,X2         * ADD -3 TO STACK POINTER              7  3469  # 35! 094           80  8350     094
  876         * POP (3)
  877                MA    LSHAAA,X2         * ADD -3 TO STACK POINTER              7  3476  # 35! 094           80  8350     094
  878         * POP (5)
  879                MA    LPHAAA,X2         * ADD -5 TO STACK POINTER              7  3483  # 33P 094           81  8337     094
  880         * END FUNCTION CALL PRINTF(CONST_STR_LITERAL_9)
  881         * END [BLOCK ENDING AT LHFAAA]
  882         ***************************************
  883         LHFAAA B     LSFAAA            * JUMP WHEN TRUE                       4  3490  B H01               81  3801
  884         * IF [IF (((I % 5) == 0) THEN [BLOCK ENDING AT LIFAAA] ELSE [BLOCK ENDING A
  885         * EQUAL ((I % 5) == 0)
  886         * MODULO (%) (I % 5)
  887         * CONSTANT (5 : @00005@)
  888         * PUSH (@00005@:5)
  889         LMFAAA MA    LMHAAA,X2         * ADD 5 TO STACK POINTER               7  3494  # 44O 094           81  8446     094
  890                LCA   LHIAAA,0&X2       * LOAD DATA @00005@ IN STACK           7  3501  L 37M 0!0           81  8374     000+2
  891         * LOCAL VARIABLE (I : 8+X3)
  892         * PUSH (8+X3:5)
  893                MA    LMHAAA,X2         * ADD 5 TO STACK POINTER               7  3508  # 44O 094           81  8446     094
  894                LCA   8&X3,0&X2         * LOAD MEMORY 8&X3 IN STACK            7  3515  L 0?8 0!0           81   008+3   000+2
  895                B     SNPDIV            * JUMP TO SNIPPET SNIP_DIV             4  3522  B ###               82   ###
  896         * POP (5)
  897                MA    LPHAAA,X2         * ADD -5 TO STACK POINTER              7  3526  # 33P 094           82  8337     094
1                                                                                                         PAGE   17
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

  898                B     CLNNMN            * JUMP TO SNIPPET CLEAN_NUMBER         4  3533  B ###               82   ###
  899         * CONSTANT (0 : @00000@)
  900         * PUSH (@00000@:5)
  901                MA    LMHAAA,X2         * ADD 5 TO STACK POINTER               7  3537  # 44O 094           82  8446     094
  902                LCA   LXHAAA,0&X2       * LOAD DATA @00000@ IN STACK           7  3544  L 40O 0!0           82  8406     000+2
  903                B     CLNNMN            * JUMP TO SNIPPET CLEAN_NUMBER         4  3551  B ###               82   ###
  904                C     0&X2,15995&X2     * COMPARE STACK TO STACK AT -5         7  3555  C 0!0 IRE           83   000+2 15995+2
  905         * POP (5)
  906                MA    LPHAAA,X2         * ADD -5 TO STACK POINTER              7  3562  # 33P 094           83  8337     094
  907         * POP (5)
  908                MA    LPHAAA,X2         * ADD -5 TO STACK POINTER              7  3569  # 33P 094           83  8337     094
  909         * PUSH (@00000@:5)
  910                MA    LMHAAA,X2         * ADD 5 TO STACK POINTER               7  3576  # 44O 094           83  8446     094
  911                LCA   LXHAAA,0&X2       * LOAD DATA @00000@ IN STACK           7  3583  L 40O 0!0           83  8406     000+2
  912                BE    LJGAAA            * JUMP IF EQUAL                        5  3590  B E99 S             84  3599
  913                B     LKGAAA            * JUMP TO END                          4  3595  B F06               84  3606
  914         LJGAAA MCW   LUHAAA,0&X2       * MOVE 1 IN STACK                      7  3599  M 38M 0!0           84  8384     000+2
  915         LKGAAA MCS   0&X2,0&X2         * CLEAR WM IN STACK                    7  3606  Z 0!0 0!0           84   000+2   000+2
  916         * POP (5)
  917                MA    LPHAAA,X2         * ADD -5 TO STACK POINTER              7  3613  # 33P 094           84  8337     094
  918                BCE   LKFAAA,5&X2,      * JUMP WHEN FALSE                      8  3620  B G06 0!5           84  3706     005+2
  919         ***************************************
  920         * BEGIN [BLOCK ENDING AT LIFAAA]
  921         * FUNCTION CALL PRINTF(CONST_STR_LITERAL_10)
  922         * PUSH (5)
  923                MA    LMHAAA,X2         * ADD 5 TO STACK POINTER               7  3628  # 44O 094           85  8446     094
  924         * STATIC ARRAY (CONST_STR_LITERAL_10:CHAR [6])
  925         * PUSH (@'47@:3)
  926                MA    LLHAAA,X2         * ADD 3 TO STACK POINTER               7  3635  # 43O 094           85  8436     094
  927                LCA   LKIAAA,0&X2       * LOAD DATA @'47@ IN STACK             7  3642  L 35L 0!0           85  8353     000+2
  928         * CREATE A STACK FRAME WITH X3 POINTER TO IT
  929         * PUSH (X3:3)
  930                MA    LLHAAA,X2         * ADD 3 TO STACK POINTER               7  3649  # 43O 094           85  8436     094
  931                LCA   X3,0&X2           * LOAD X3 IN STACK                     7  3656  L 099 0!0           85   099     000+2
  932                MCW   X2,X3             * MOVE X2 IN X3                        7  3663  M 094 099           86   094     099
  933                B     LAEAAA            * JUMP TO FUNCTION PRINTF              4  3670  B H65               86  3865
  934         * POP (X3:3)
  935                LCA   0&X2,X3           * LOAD STACK IN X3                     7  3674  L 0!0 099           86   000+2   099
  936                MA    LSHAAA,X2         * ADD -3 TO STACK POINTER              7  3681  # 35! 094           86  8350     094
  937         * POP (3)
  938                MA    LSHAAA,X2         * ADD -3 TO STACK POINTER              7  3688  # 35! 094           86  8350     094
  939         * POP (5)
  940                MA    LPHAAA,X2         * ADD -5 TO STACK POINTER              7  3695  # 33P 094           86  8337     094
  941         * END FUNCTION CALL PRINTF(CONST_STR_LITERAL_10)
  942         * END [BLOCK ENDING AT LIFAAA]
  943         ***************************************
  944         LIFAAA B     LSFAAA            * JUMP WHEN TRUE                       4  3702  B H01               87  3801
  945         ***************************************
  946         * BEGIN [BLOCK ENDING AT LJFAAA]
  947         * FUNCTION CALL PRINTF(CONST_STR_LITERAL_11, I)
1                                                                                                         PAGE   18
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

  948         * PUSH (5)
  949         LKFAAA MA    LMHAAA,X2         * ADD 5 TO STACK POINTER               7  3706  # 44O 094           87  8446     094
  950         * LOCAL VARIABLE (I : 8+X3)
  951         * PUSH (8+X3:5)
  952                MA    LMHAAA,X2         * ADD 5 TO STACK POINTER               7  3713  # 44O 094           87  8446     094
  953                LCA   8&X3,0&X2         * LOAD MEMORY 8&X3 IN STACK            7  3720  L 0?8 0!0           87   008+3   000+2
  954         * STATIC ARRAY (CONST_STR_LITERAL_11:CHAR [4])
  955         * PUSH (@'53@:3)
  956                MA    LLHAAA,X2         * ADD 3 TO STACK POINTER               7  3727  # 43O 094           87  8436     094
  957                LCA   LLIAAA,0&X2       * LOAD DATA @'53@ IN STACK             7  3734  L 32L 0!0           87  8323     000+2
  958         * CREATE A STACK FRAME WITH X3 POINTER TO IT
  959         * PUSH (X3:3)
  960                MA    LLHAAA,X2         * ADD 3 TO STACK POINTER               7  3741  # 43O 094           88  8436     094
  961                LCA   X3,0&X2           * LOAD X3 IN STACK                     7  3748  L 099 0!0           88   099     000+2
  962                MCW   X2,X3             * MOVE X2 IN X3                        7  3755  M 094 099           88   094     099
  963                B     LAEAAA            * JUMP TO FUNCTION PRINTF              4  3762  B H65               88  3865
  964         * POP (X3:3)
  965                LCA   0&X2,X3           * LOAD STACK IN X3                     7  3766  L 0!0 099           88   000+2   099
  966                MA    LSHAAA,X2         * ADD -3 TO STACK POINTER              7  3773  # 35! 094           88  8350     094
  967         * POP (3)
  968                MA    LSHAAA,X2         * ADD -3 TO STACK POINTER              7  3780  # 35! 094           89  8350     094
  969         * POP (5)
  970                MA    LPHAAA,X2         * ADD -5 TO STACK POINTER              7  3787  # 33P 094           89  8337     094
  971         * POP (5)
  972                MA    LPHAAA,X2         * ADD -5 TO STACK POINTER              7  3794  # 33P 094           89  8337     094
  973         * END FUNCTION CALL PRINTF(CONST_STR_LITERAL_11, I)
  974         * END [BLOCK ENDING AT LJFAAA]
  975         ***************************************
  976         * END IF [IF (((I % 5) == 0) THEN [BLOCK ENDING AT LIFAAA] ELSE [BLOCK ENDI
  977         * END IF [IF (((I % 3) == 0) THEN [BLOCK ENDING AT LHFAAA] ELSE [IF (((I %
  978         * END IF [IF ((((I % 3) == 0) && ((I % 5) == 0)) THEN [BLOCK ENDING AT LGFA
  979         * END [BLOCK ENDING AT LFFAAA]
  980         ***************************************
  981         * PREINCREMENT((++I)
  982         * PUSH (@008@:3)
  983         LSFAAA MA    LLHAAA,X2         * ADD 3 TO STACK POINTER               7  3801  # 43O 094           89  8436     094
  984                LCA   LEIAAA,0&X2       * LOAD DATA @008@ IN STACK             7  3808  L 36O 0!0           89  8366     000+2
  985                MA    X3,0&X2           * ADD X3 TO STACK                      7  3815  # 099 0!0           90   099     000+2
  986         * POP (X1:3)
  987                LCA   0&X2,X1           * LOAD STACK IN X1                     7  3822  L 0!0 089           90   000+2   089
  988                MA    LSHAAA,X2         * ADD -3 TO STACK POINTER              7  3829  # 35! 094           90  8350     094
  989                A     LUHAAA,0&X1       * PREINCREMENT MEMORY AT X1            7  3836  A 38M 0'0           90  8384     000+1
  990                B     LQFAAA            * JUMP TO TOP OF FOR                   4  3843  B P94               90  2794
  991         * END FOR [FOR ((I = 1); (I <= 100); (++I)) [BLOCK ENDING AT LFFAAA] TOP:LQ
  992         * POP (8)
  993         LEFAAA MA    LAIAAA,X2         * ADD -8 TO STACK POINTER              7  3847  # 41M 094           90  8414     094
  994         * END [BLOCK ENDING AT LEFAAA]
  995         ***************************************
  996                LCA   3&X3,X1           * LOAD RETURN ADDRESS IN X1            7  3854  L 0?3 089           91   003+3   089
  997                B     0&X1              * JUMP BACK TO CALLER IN X1            4  3861  B 0'0               91   000+1
1                                                                                                         PAGE   19
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

  998         ***************************************************************************
  999         * END FUNCTION : MAIN
 1000         ***************************************************************************
 1001         ***************************************************************************
 1002         * FUNCTION : PRINTF
 1003         ***************************************************************************
 1004         LAEAAA SBR   3&X3              * SAVE RETURN ADDRESS IN REGISTER      4  3865  H 0?3               91   003+3
 1005         * SET THE RIGHT WM AND CLEAR THE WRONG ONES
 1006                SW    1&X3              * SET WM AT 1&X3                       4  3869  , 0?1               91   001+3
 1007                CW    2&X3              * CLEAR WM AT 2&X3                     4  3873  ) 0?2               91   002+3
 1008                CW    3&X3              * CLEAR WM AT 3&X3                     4  3877  ) 0?3               91   003+3
 1009         ***************************************
 1010         * BEGIN [BLOCK ENDING AT LBEAAA]
 1011         * ARG SIZE:3 OFFSET:3
 1012         * C SIZE:1 OFFSET:6
 1013         * ADDRP SIZE:3 OFFSET:7
 1014         * ADDRC SIZE:1 OFFSET:10
 1015         * PUSH (11)
 1016                MA    LMIAAA,X2         * ADD 11 TO STACK POINTER              7  3881  # 42! 094           91  8420     094
 1017         * ADDITION (( &CFORMAT_STR ) + 15997)
 1018         * ADDRESSOF ( &CFORMAT_STR )
 1019         * PUSH (@I9G@:3)
 1020                MA    LLHAAA,X2         * ADD 3 TO STACK POINTER               7  3888  # 43O 094           92  8436     094
 1021                LCA   LSHAAA,0&X2       * LOAD DATA @I9G@ IN STACK             7  3895  L 35! 0!0           92  8350     000+2
 1022                MA    X3,0&X2           * ADD X3 TO STACK                      7  3902  # 099 0!0           92   099     000+2
 1023         * CONSTANT (15997 : @I9G@)
 1024         * PUSH (@I9G@:3)
 1025                MA    LLHAAA,X2         * ADD 3 TO STACK POINTER               7  3909  # 43O 094           92  8436     094
 1026                LCA   LSHAAA,0&X2       * LOAD DATA @I9G@ IN STACK             7  3916  L 35! 0!0           92  8350     000+2
 1027                MA    0&X2,15997&X2     * ADD STACK TO STACK AT -3             7  3923  # 0!0 IRG           93   000+2 15997+2
 1028         * POP (3)
 1029                MA    LSHAAA,X2         * ADD -3 TO STACK POINTER              7  3930  # 35! 094           93  8350     094
 1030         * PUSH (@006@:3)
 1031                MA    LLHAAA,X2         * ADD 3 TO STACK POINTER               7  3937  # 43O 094           93  8436     094
 1032                LCA   LWHAAA,0&X2       * LOAD DATA @006@ IN STACK             7  3944  L 36R 0!0           93  8369     000+2
 1033                MA    X3,0&X2           * ADD X3 TO STACK                      7  3951  # 099 0!0           93   099     000+2
 1034         * ASSIGNMENT (ARG = ((*CHAR) (( &CFORMAT_STR ) + 15997)))
 1035         * POP (X1:3)
 1036                LCA   0&X2,X1           * LOAD STACK IN X1                     7  3958  L 0!0 089           94   000+2   089
 1037                MA    LSHAAA,X2         * ADD -3 TO STACK POINTER              7  3965  # 35! 094           94  8350     094
 1038         * POP (0+X1:3)
 1039                LCA   0&X2,0&X1         * LOAD STACK IN 0&X1                   7  3972  L 0!0 0'0           94   000+2   000+1
 1040                MA    LSHAAA,X2         * ADD -3 TO STACK POINTER              7  3979  # 35! 094           94  8350     094
 1041         * END ASSIGNMENT (ARG = ((*CHAR) (( &CFORMAT_STR ) + 15997)))
 1042         * WHILE [WHILE (((C = (*(CFORMAT_STR++))) != '\0')) [BLOCK ENDING AT LCEAAA
 1043         * NOTEQUAL (!=) ((C = (*(CFORMAT_STR++))) != '\0')
 1044         * DEREFERENCEEXPRESSION (*(CFORMAT_STR++))
 1045         * POSTINCREMENT (CFORMAT_STR++)
 1046         * PUSH (@I9G@:3)
 1047         LXEAAA MA    LLHAAA,X2         * ADD 3 TO STACK POINTER               7  3986  # 43O 094           94  8436     094
1                                                                                                         PAGE   20
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 1048                LCA   LSHAAA,0&X2       * LOAD DATA @I9G@ IN STACK             7  3993  L 35! 0!0           95  8350     000+2
 1049                MA    X3,0&X2           * ADD X3 TO STACK                      7  4000  # 099 0!0           95   099     000+2
 1050         * POP (X1:3)
 1051                LCA   0&X2,X1           * LOAD STACK IN X1                     7  4007  L 0!0 089           95   000+2   089
 1052                MA    LSHAAA,X2         * ADD -3 TO STACK POINTER              7  4014  # 35! 094           95  8350     094
 1053         * PUSH (0+X1:3)
 1054                MA    LLHAAA,X2         * ADD 3 TO STACK POINTER               7  4021  # 43O 094           95  8436     094
 1055                LCA   0&X1,0&X2         * LOAD MEMORY 0&X1 IN STACK            7  4028  L 0'0 0!0           96   000+1   000+2
 1056                MA    LYHAAA,0&X1       * POSTINCREMENT POINTER AT X1          7  4035  # 43R 0'0           96  8439     000+1
 1057         * POP (X1:3)
 1058                LCA   0&X2,X1           * LOAD STACK IN X1                     7  4042  L 0!0 089           96   000+2   089
 1059                MA    LSHAAA,X2         * ADD -3 TO STACK POINTER              7  4049  # 35! 094           96  8350     094
 1060         * PUSH (0+X1:1)
 1061                MA    LYHAAA,X2         * ADD 1 TO STACK POINTER               7  4056  # 43R 094           96  8439     094
 1062                LCA   0&X1,0&X2         * LOAD MEMORY 0&X1 IN STACK            7  4063  L 0'0 0!0           97   000+1   000+2
 1063         * END DEREFERENCEEXPRESSION (*(CFORMAT_STR++))
 1064         * PUSH (@007@:3)
 1065                MA    LLHAAA,X2         * ADD 3 TO STACK POINTER               7  4070  # 43O 094           97  8436     094
 1066                LCA   LNIAAA,0&X2       * LOAD DATA @007@ IN STACK             7  4077  L 44L 0!0           97  8443     000+2
 1067                MA    X3,0&X2           * ADD X3 TO STACK                      7  4084  # 099 0!0           97   099     000+2
 1068         * ASSIGNMENT (C = (*(CFORMAT_STR++)))
 1069         * POP (X1:3)
 1070                LCA   0&X2,X1           * LOAD STACK IN X1                     7  4091  L 0!0 089           97   000+2   089
 1071                MA    LSHAAA,X2         * ADD -3 TO STACK POINTER              7  4098  # 35! 094           98  8350     094
 1072                LCA   0&X2,0&X1         * LOAD STACK IN MEMORY X1              7  4105  L 0!0 0'0           98   000+2   000+1
 1073         * END ASSIGNMENT (C = (*(CFORMAT_STR++)))
 1074         * CONSTANT ('\0' : EOS)
 1075         * PUSH (EOS:1)
 1076                MA    LYHAAA,X2         * ADD 1 TO STACK POINTER               7  4112  # 43R 094           98  8439     094
 1077                LCA   EOS,0&X2          * LOAD MEMORY EOS IN STACK             7  4119  L 345 0!0           98   345     000+2
 1078                C     0&X2,15999&X2     * COMPARE STACK TO STACK AT -1         7  4126  C 0!0 IRI           98   000+2 15999+2
 1079         * POP (1)
 1080                MA    LBIAAA,X2         * ADD -1 TO STACK POINTER              7  4133  # ### 094           99   ###     094
 1081         * POP (1)
 1082                MA    LBIAAA,X2         * ADD -1 TO STACK POINTER              7  4140  # ### 094           99   ###     094
 1083         * PUSH (@00001@:5)
 1084                MA    LMHAAA,X2         * ADD 5 TO STACK POINTER               7  4147  # 44O 094           99  8446     094
 1085                LCA   LUHAAA,0&X2       * LOAD DATA @00001@ IN STACK           7  4154  L 38M 0!0           99  8384     000+2
 1086                BE    LLGAAA            * JUMP IF EQUAL                        5  4161  B 17' S             99  4170
 1087                B     LMGAAA            * JUMP TO END                          4  4166  B 17X               99  4177
 1088         LLGAAA MCW   LXHAAA,0&X2       * MOVE 0 IN STACK                      7  4170  M 40O 0!0          100  8406     000+2
 1089         LMGAAA MCS   0&X2,0&X2         * CLEAR WM IN STACK                    7  4177  Z 0!0 0!0          100   000+2   000+2
 1090         * POP (5)
 1091                MA    LPHAAA,X2         * ADD -5 TO STACK POINTER              7  4184  # 33P 094          100  8337     094
 1092                BCE   LBEAAA,5&X2,      * JUMP TO BOTTOM OF WHILE              8  4191  B J6T 0!5          100  6163     005+2
 1093         ***************************************
 1094         * BEGIN [BLOCK ENDING AT LCEAAA]
 1095         * IF [IF ((C != '%') THEN [BLOCK ENDING AT LDEAAA] ELSE [BLOCK ENDING AT LE
 1096         * NOTEQUAL (!=) (C != '%')
 1097         * LOCAL VARIABLE (C : 7+X3)
1                                                                                                         PAGE   21
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 1098         * PUSH (7+X3:1)
 1099                MA    LYHAAA,X2         * ADD 1 TO STACK POINTER               7  4199  # 43R 094          100  8439     094
 1100                LCA   7&X3,0&X2         * LOAD MEMORY 7&X3 IN STACK            7  4206  L 0?7 0!0          101   007+3   000+2
 1101         * CONSTANT ('%' : @%@)
 1102         * PUSH (@%@:1)
 1103                MA    LYHAAA,X2         * ADD 1 TO STACK POINTER               7  4213  # 43R 094          101  8439     094
 1104                LCA   LOIAAA,0&X2       * LOAD DATA @%@ IN STACK               7  4220  L 44P 0!0          101  8447     000+2
 1105                C     0&X2,15999&X2     * COMPARE STACK TO STACK AT -1         7  4227  C 0!0 IRI          101   000+2 15999+2
 1106         * POP (1)
 1107                MA    LBIAAA,X2         * ADD -1 TO STACK POINTER              7  4234  # ### 094          101   ###     094
 1108         * POP (1)
 1109                MA    LBIAAA,X2         * ADD -1 TO STACK POINTER              7  4241  # ### 094          102   ###     094
 1110         * PUSH (@00001@:5)
 1111                MA    LMHAAA,X2         * ADD 5 TO STACK POINTER               7  4248  # 44O 094          102  8446     094
 1112                LCA   LUHAAA,0&X2       * LOAD DATA @00001@ IN STACK           7  4255  L 38M 0!0          102  8384     000+2
 1113                BE    LNGAAA            * JUMP IF EQUAL                        5  4262  B 27/ S            102  4271
 1114                B     LOGAAA            * JUMP TO END                          4  4267  B 27Y              102  4278
 1115         LNGAAA MCW   LXHAAA,0&X2       * MOVE 0 IN STACK                      7  4271  M 40O 0!0          102  8406     000+2
 1116         LOGAAA MCS   0&X2,0&X2         * CLEAR WM IN STACK                    7  4278  Z 0!0 0!0          103   000+2   000+2
 1117         * POP (5)
 1118                MA    LPHAAA,X2         * ADD -5 TO STACK POINTER              7  4285  # 33P 094          103  8337     094
 1119                BCE   LVEAAA,5&X2,      * JUMP WHEN FALSE                      8  4292  B 37Y 0!5          103  4378     005+2
 1120         ***************************************
 1121         * BEGIN [BLOCK ENDING AT LDEAAA]
 1122         * FUNCTION CALL PUTCHAR(C)
 1123         * PUSH (5)
 1124                MA    LMHAAA,X2         * ADD 5 TO STACK POINTER               7  4300  # 44O 094          103  8446     094
 1125         * LOCAL VARIABLE (C : 7+X3)
 1126         * PUSH (7+X3:1)
 1127                MA    LYHAAA,X2         * ADD 1 TO STACK POINTER               7  4307  # 43R 094          103  8439     094
 1128                LCA   7&X3,0&X2         * LOAD MEMORY 7&X3 IN STACK            7  4314  L 0?7 0!0          104   007+3   000+2
 1129         * CREATE A STACK FRAME WITH X3 POINTER TO IT
 1130         * PUSH (X3:3)
 1131                MA    LLHAAA,X2         * ADD 3 TO STACK POINTER               7  4321  # 43O 094          104  8436     094
 1132                LCA   X3,0&X2           * LOAD X3 IN STACK                     7  4328  L 099 0!0          104   099     000+2
 1133                MCW   X2,X3             * MOVE X2 IN X3                        7  4335  M 094 099          104   094     099
 1134                B     LWCAAA            * JUMP TO FUNCTION PUTCHAR             4  4342  B J8/              104  6181
 1135         * POP (X3:3)
 1136                LCA   0&X2,X3           * LOAD STACK IN X3                     7  4346  L 0!0 099          104   000+2   099
 1137                MA    LSHAAA,X2         * ADD -3 TO STACK POINTER              7  4353  # 35! 094          105  8350     094
 1138         * POP (1)
 1139                MA    LBIAAA,X2         * ADD -1 TO STACK POINTER              7  4360  # ### 094          105   ###     094
 1140         * POP (5)
 1141                MA    LPHAAA,X2         * ADD -5 TO STACK POINTER              7  4367  # 33P 094          105  8337     094
 1142         * END FUNCTION CALL PUTCHAR(C)
 1143         * END [BLOCK ENDING AT LDEAAA]
 1144         ***************************************
 1145         LDEAAA B     LCEAAA            * JUMP WHEN TRUE                       4  4374  B J5Z              105  6159
 1146         ***************************************
 1147         * BEGIN [BLOCK ENDING AT LEEAAA]
1                                                                                                         PAGE   22
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 1148         * DEREFERENCEEXPRESSION (*(CFORMAT_STR++))
 1149         * POSTINCREMENT (CFORMAT_STR++)
 1150         * PUSH (@I9G@:3)
 1151         LVEAAA MA    LLHAAA,X2         * ADD 3 TO STACK POINTER               7  4378  # 43O 094          105  8436     094
 1152                LCA   LSHAAA,0&X2       * LOAD DATA @I9G@ IN STACK             7  4385  L 35! 0!0          105  8350     000+2
 1153                MA    X3,0&X2           * ADD X3 TO STACK                      7  4392  # 099 0!0          106   099     000+2
 1154         * POP (X1:3)
 1155                LCA   0&X2,X1           * LOAD STACK IN X1                     7  4399  L 0!0 089          106   000+2   089
 1156                MA    LSHAAA,X2         * ADD -3 TO STACK POINTER              7  4406  # 35! 094          106  8350     094
 1157         * PUSH (0+X1:3)
 1158                MA    LLHAAA,X2         * ADD 3 TO STACK POINTER               7  4413  # 43O 094          106  8436     094
 1159                LCA   0&X1,0&X2         * LOAD MEMORY 0&X1 IN STACK            7  4420  L 0'0 0!0          106   000+1   000+2
 1160                MA    LYHAAA,0&X1       * POSTINCREMENT POINTER AT X1          7  4427  # 43R 0'0          107  8439     000+1
 1161         * POP (X1:3)
 1162                LCA   0&X2,X1           * LOAD STACK IN X1                     7  4434  L 0!0 089          107   000+2   089
 1163                MA    LSHAAA,X2         * ADD -3 TO STACK POINTER              7  4441  # 35! 094          107  8350     094
 1164         * PUSH (0+X1:1)
 1165                MA    LYHAAA,X2         * ADD 1 TO STACK POINTER               7  4448  # 43R 094          107  8439     094
 1166                LCA   0&X1,0&X2         * LOAD MEMORY 0&X1 IN STACK            7  4455  L 0'0 0!0          107   000+1   000+2
 1167         * END DEREFERENCEEXPRESSION (*(CFORMAT_STR++))
 1168         * PUSH (@007@:3)
 1169                MA    LLHAAA,X2         * ADD 3 TO STACK POINTER               7  4462  # 43O 094          108  8436     094
 1170                LCA   LNIAAA,0&X2       * LOAD DATA @007@ IN STACK             7  4469  L 44L 0!0          108  8443     000+2
 1171                MA    X3,0&X2           * ADD X3 TO STACK                      7  4476  # 099 0!0          108   099     000+2
 1172         * ASSIGNMENT (C = (*(CFORMAT_STR++)))
 1173         * POP (X1:3)
 1174                LCA   0&X2,X1           * LOAD STACK IN X1                     7  4483  L 0!0 089          108   000+2   089
 1175                MA    LSHAAA,X2         * ADD -3 TO STACK POINTER              7  4490  # 35! 094          108  8350     094
 1176         * POP (0+X1:1)
 1177                LCA   0&X2,0&X1         * LOAD STACK IN 0&X1                   7  4497  L 0!0 0'0          109   000+2   000+1
 1178                MA    LBIAAA,X2         * ADD -1 TO STACK POINTER              7  4504  # ### 094          109   ###     094
 1179         * END ASSIGNMENT (C = (*(CFORMAT_STR++)))
 1180         * IF [IF ((C == '%') THEN [BLOCK ENDING AT LFEAAA] ELSE [IF ((C == 'C') THE
 1181         * EQUAL (C == '%')
 1182         * LOCAL VARIABLE (C : 7+X3)
 1183         * PUSH (7+X3:1)
 1184                MA    LYHAAA,X2         * ADD 1 TO STACK POINTER               7  4511  # 43R 094          109  8439     094
 1185                LCA   7&X3,0&X2         * LOAD MEMORY 7&X3 IN STACK            7  4518  L 0?7 0!0          109   007+3   000+2
 1186         * CONSTANT ('%' : @%@)
 1187         * PUSH (@%@:1)
 1188                MA    LYHAAA,X2         * ADD 1 TO STACK POINTER               7  4525  # 43R 094          109  8439     094
 1189                LCA   LOIAAA,0&X2       * LOAD DATA @%@ IN STACK               7  4532  L 44P 0!0          110  8447     000+2
 1190                C     0&X2,15999&X2     * COMPARE STACK TO STACK AT -1         7  4539  C 0!0 IRI          110   000+2 15999+2
 1191         * POP (1)
 1192                MA    LBIAAA,X2         * ADD -1 TO STACK POINTER              7  4546  # ### 094          110   ###     094
 1193         * POP (1)
 1194                MA    LBIAAA,X2         * ADD -1 TO STACK POINTER              7  4553  # ### 094          110   ###     094
 1195         * PUSH (@00000@:5)
 1196                MA    LMHAAA,X2         * ADD 5 TO STACK POINTER               7  4560  # 44O 094          110  8446     094
 1197                LCA   LXHAAA,0&X2       * LOAD DATA @00000@ IN STACK           7  4567  L 40O 0!0          111  8406     000+2
1                                                                                                         PAGE   23
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 1198                BE    LPGAAA            * JUMP IF EQUAL                        5  4574  B 58T S            111  4583
 1199                B     LQGAAA            * JUMP TO END                          4  4579  B 59'              111  4590
 1200         LPGAAA MCW   LUHAAA,0&X2       * MOVE 1 IN STACK                      7  4583  M 38M 0!0          111  8384     000+2
 1201         LQGAAA MCS   0&X2,0&X2         * CLEAR WM IN STACK                    7  4590  Z 0!0 0!0          111   000+2   000+2
 1202         * POP (5)
 1203                MA    LPHAAA,X2         * ADD -5 TO STACK POINTER              7  4597  # 33P 094          111  8337     094
 1204                BCE   LTEAAA,5&X2,      * JUMP WHEN FALSE                      8  4604  B 69' 0!5          112  4690     005+2
 1205         ***************************************
 1206         * BEGIN [BLOCK ENDING AT LFEAAA]
 1207         * FUNCTION CALL PUTCHAR('%')
 1208         * PUSH (5)
 1209                MA    LMHAAA,X2         * ADD 5 TO STACK POINTER               7  4612  # 44O 094          112  8446     094
 1210         * CONSTANT ('%' : @%@)
 1211         * PUSH (@%@:1)
 1212                MA    LYHAAA,X2         * ADD 1 TO STACK POINTER               7  4619  # 43R 094          112  8439     094
 1213                LCA   LOIAAA,0&X2       * LOAD DATA @%@ IN STACK               7  4626  L 44P 0!0          112  8447     000+2
 1214         * CREATE A STACK FRAME WITH X3 POINTER TO IT
 1215         * PUSH (X3:3)
 1216                MA    LLHAAA,X2         * ADD 3 TO STACK POINTER               7  4633  # 43O 094          112  8436     094
 1217                LCA   X3,0&X2           * LOAD X3 IN STACK                     7  4640  L 099 0!0          113   099     000+2
 1218                MCW   X2,X3             * MOVE X2 IN X3                        7  4647  M 094 099          113   094     099
 1219                B     LWCAAA            * JUMP TO FUNCTION PUTCHAR             4  4654  B J8/              113  6181
 1220         * POP (X3:3)
 1221                LCA   0&X2,X3           * LOAD STACK IN X3                     7  4658  L 0!0 099          113   000+2   099
 1222                MA    LSHAAA,X2         * ADD -3 TO STACK POINTER              7  4665  # 35! 094          113  8350     094
 1223         * POP (1)
 1224                MA    LBIAAA,X2         * ADD -1 TO STACK POINTER              7  4672  # ### 094          113   ###     094
 1225         * POP (5)
 1226                MA    LPHAAA,X2         * ADD -5 TO STACK POINTER              7  4679  # 33P 094          114  8337     094
 1227         * END FUNCTION CALL PUTCHAR('%')
 1228         * END [BLOCK ENDING AT LFEAAA]
 1229         ***************************************
 1230         LFEAAA B     LCEAAA            * JUMP WHEN TRUE                       4  4686  B J5Z              114  6159
 1231         * IF [IF ((C == 'C') THEN [BLOCK ENDING AT LGEAAA] ELSE [IF ((C == 'S') THE
 1232         * EQUAL (C == 'C')
 1233         * LOCAL VARIABLE (C : 7+X3)
 1234         * PUSH (7+X3:1)
 1235         LTEAAA MA    LYHAAA,X2         * ADD 1 TO STACK POINTER               7  4690  # 43R 094          114  8439     094
 1236                LCA   7&X3,0&X2         * LOAD MEMORY 7&X3 IN STACK            7  4697  L 0?7 0!0          114   007+3   000+2
 1237         * CONSTANT ('C' : @C@)
 1238         * PUSH (@C@:1)
 1239                MA    LYHAAA,X2         * ADD 1 TO STACK POINTER               7  4704  # 43R 094          114  8439     094
 1240                LCA   LPIAAA,0&X2       * LOAD DATA @C@ IN STACK               7  4711  L 39! 0!0          114  8390     000+2
 1241                C     0&X2,15999&X2     * COMPARE STACK TO STACK AT -1         7  4718  C 0!0 IRI          115   000+2 15999+2
 1242         * POP (1)
 1243                MA    LBIAAA,X2         * ADD -1 TO STACK POINTER              7  4725  # ### 094          115   ###     094
 1244         * POP (1)
 1245                MA    LBIAAA,X2         * ADD -1 TO STACK POINTER              7  4732  # ### 094          115   ###     094
 1246         * PUSH (@00000@:5)
 1247                MA    LMHAAA,X2         * ADD 5 TO STACK POINTER               7  4739  # 44O 094          115  8446     094
1                                                                                                         PAGE   24
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 1248                LCA   LXHAAA,0&X2       * LOAD DATA @00000@ IN STACK           7  4746  L 40O 0!0          115  8406     000+2
 1249                BE    LRGAAA            * JUMP IF EQUAL                        5  4753  B 76S S            116  4762
 1250                B     LSGAAA            * JUMP TO END                          4  4758  B 76Z              116  4769
 1251         LRGAAA MCW   LUHAAA,0&X2       * MOVE 1 IN STACK                      7  4762  M 38M 0!0          116  8384     000+2
 1252         LSGAAA MCS   0&X2,0&X2         * CLEAR WM IN STACK                    7  4769  Z 0!0 0!0          116   000+2   000+2
 1253         * POP (5)
 1254                MA    LPHAAA,X2         * ADD -5 TO STACK POINTER              7  4776  # 33P 094          116  8337     094
 1255                BCE   LREAAA,5&X2,      * JUMP WHEN FALSE                      8  4783  B 98Y 0!5          116  4988     005+2
 1256         ***************************************
 1257         * BEGIN [BLOCK ENDING AT LGEAAA]
 1258         * FUNCTION CALL PUTCHAR((*ARG))
 1259         * PUSH (5)
 1260                MA    LMHAAA,X2         * ADD 5 TO STACK POINTER               7  4791  # 44O 094          117  8446     094
 1261         * DEREFERENCEEXPRESSION (*ARG)
 1262         * LOCAL VARIABLE (ARG : 6+X3)
 1263         * PUSH (6+X3:3)
 1264                MA    LLHAAA,X2         * ADD 3 TO STACK POINTER               7  4798  # 43O 094          117  8436     094
 1265                LCA   6&X3,0&X2         * LOAD MEMORY 6&X3 IN STACK            7  4805  L 0?6 0!0          117   006+3   000+2
 1266         * POP (X1:3)
 1267                LCA   0&X2,X1           * LOAD STACK IN X1                     7  4812  L 0!0 089          117   000+2   089
 1268                MA    LSHAAA,X2         * ADD -3 TO STACK POINTER              7  4819  # 35! 094          117  8350     094
 1269         * PUSH (0+X1:1)
 1270                MA    LYHAAA,X2         * ADD 1 TO STACK POINTER               7  4826  # 43R 094          118  8439     094
 1271                LCA   0&X1,0&X2         * LOAD MEMORY 0&X1 IN STACK            7  4833  L 0'0 0!0          118   000+1   000+2
 1272         * END DEREFERENCEEXPRESSION (*ARG)
 1273         * CREATE A STACK FRAME WITH X3 POINTER TO IT
 1274         * PUSH (X3:3)
 1275                MA    LLHAAA,X2         * ADD 3 TO STACK POINTER               7  4840  # 43O 094          118  8436     094
 1276                LCA   X3,0&X2           * LOAD X3 IN STACK                     7  4847  L 099 0!0          118   099     000+2
 1277                MCW   X2,X3             * MOVE X2 IN X3                        7  4854  M 094 099          118   094     099
 1278                B     LWCAAA            * JUMP TO FUNCTION PUTCHAR             4  4861  B J8/              118  6181
 1279         * POP (X3:3)
 1280                LCA   0&X2,X3           * LOAD STACK IN X3                     7  4865  L 0!0 099          119   000+2   099
 1281                MA    LSHAAA,X2         * ADD -3 TO STACK POINTER              7  4872  # 35! 094          119  8350     094
 1282         * POP (1)
 1283                MA    LBIAAA,X2         * ADD -1 TO STACK POINTER              7  4879  # ### 094          119   ###     094
 1284         * POP (5)
 1285                MA    LPHAAA,X2         * ADD -5 TO STACK POINTER              7  4886  # 33P 094          119  8337     094
 1286         * END FUNCTION CALL PUTCHAR((*ARG))
 1287         * ADDITION (ARG + 15999)
 1288         * LOCAL VARIABLE (ARG : 6+X3)
 1289         * PUSH (6+X3:3)
 1290                MA    LLHAAA,X2         * ADD 3 TO STACK POINTER               7  4893  # 43O 094          119  8436     094
 1291                LCA   6&X3,0&X2         * LOAD MEMORY 6&X3 IN STACK            7  4900  L 0?6 0!0          120   006+3   000+2
 1292         * CONSTANT (15999 : @I9I@)
 1293         * PUSH (@I9I@:3)
 1294                MA    LLHAAA,X2         * ADD 3 TO STACK POINTER               7  4907  # 43O 094          120  8436     094
 1295                LCA   LBIAAA,0&X2       * LOAD DATA @I9I@ IN STACK             7  4914  L ### 0!0          120   ###     000+2
 1296                MA    0&X2,15997&X2     * ADD STACK TO STACK AT -3             7  4921  # 0!0 IRG          120   000+2 15997+2
 1297         * POP (3)
1                                                                                                         PAGE   25
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 1298                MA    LSHAAA,X2         * ADD -3 TO STACK POINTER              7  4928  # 35! 094          120  8350     094
 1299         * PUSH (@006@:3)
 1300                MA    LLHAAA,X2         * ADD 3 TO STACK POINTER               7  4935  # 43O 094          121  8436     094
 1301                LCA   LWHAAA,0&X2       * LOAD DATA @006@ IN STACK             7  4942  L 36R 0!0          121  8369     000+2
 1302                MA    X3,0&X2           * ADD X3 TO STACK                      7  4949  # 099 0!0          121   099     000+2
 1303         * ASSIGNMENT (ARG = (ARG + 15999))
 1304         * POP (X1:3)
 1305                LCA   0&X2,X1           * LOAD STACK IN X1                     7  4956  L 0!0 089          121   000+2   089
 1306                MA    LSHAAA,X2         * ADD -3 TO STACK POINTER              7  4963  # 35! 094          121  8350     094
 1307         * POP (0+X1:3)
 1308                LCA   0&X2,0&X1         * LOAD STACK IN 0&X1                   7  4970  L 0!0 0'0          122   000+2   000+1
 1309                MA    LSHAAA,X2         * ADD -3 TO STACK POINTER              7  4977  # 35! 094          122  8350     094
 1310         * END ASSIGNMENT (ARG = (ARG + 15999))
 1311         * END [BLOCK ENDING AT LGEAAA]
 1312         ***************************************
 1313         LGEAAA B     LCEAAA            * JUMP WHEN TRUE                       4  4984  B J5Z              122  6159
 1314         * IF [IF ((C == 'S') THEN [BLOCK ENDING AT LHEAAA] ELSE [IF ((C == 'D') THE
 1315         * EQUAL (C == 'S')
 1316         * LOCAL VARIABLE (C : 7+X3)
 1317         * PUSH (7+X3:1)
 1318         LREAAA MA    LYHAAA,X2         * ADD 1 TO STACK POINTER               7  4988  # 43R 094          122  8439     094
 1319                LCA   7&X3,0&X2         * LOAD MEMORY 7&X3 IN STACK            7  4995  L 0?7 0!0          122   007+3   000+2
 1320         * CONSTANT ('S' : @S@)
 1321         * PUSH (@S@:1)
 1322                MA    LYHAAA,X2         * ADD 1 TO STACK POINTER               7  5002  # 43R 094          122  8439     094
 1323                LCA   LQIAAA,0&X2       * LOAD DATA @S@ IN STACK               7  5009  L 34M 0!0          123  8344     000+2
 1324                C     0&X2,15999&X2     * COMPARE STACK TO STACK AT -1         7  5016  C 0!0 IRI          123   000+2 15999+2
 1325         * POP (1)
 1326                MA    LBIAAA,X2         * ADD -1 TO STACK POINTER              7  5023  # ### 094          123   ###     094
 1327         * POP (1)
 1328                MA    LBIAAA,X2         * ADD -1 TO STACK POINTER              7  5030  # ### 094          123   ###     094
 1329         * PUSH (@00000@:5)
 1330                MA    LMHAAA,X2         * ADD 5 TO STACK POINTER               7  5037  # 44O 094          123  8446     094
 1331                LCA   LXHAAA,0&X2       * LOAD DATA @00000@ IN STACK           7  5044  L 40O 0!0          124  8406     000+2
 1332                BE    LTGAAA            * JUMP IF EQUAL                        5  5051  B '6' S            124  5060
 1333                B     LUGAAA            * JUMP TO END                          4  5056  B '6X              124  5067
 1334         LTGAAA MCW   LUHAAA,0&X2       * MOVE 1 IN STACK                      7  5060  M 38M 0!0          124  8384     000+2
 1335         LUGAAA MCS   0&X2,0&X2         * CLEAR WM IN STACK                    7  5067  Z 0!0 0!0          124   000+2   000+2
 1336         * POP (5)
 1337                MA    LPHAAA,X2         * ADD -5 TO STACK POINTER              7  5074  # 33P 094          124  8337     094
 1338                BCE   LPEAAA,5&X2,      * JUMP WHEN FALSE                      8  5081  B S8W 0!5          125  5286     005+2
 1339         ***************************************
 1340         * BEGIN [BLOCK ENDING AT LHEAAA]
 1341         * FUNCTION CALL PUTS((*((**CHAR) ARG)))
 1342         * PUSH (5)
 1343                MA    LMHAAA,X2         * ADD 5 TO STACK POINTER               7  5089  # 44O 094          125  8446     094
 1344         * DEREFERENCEEXPRESSION (*((**CHAR) ARG))
 1345         * LOCAL VARIABLE (ARG : 6+X3)
 1346         * PUSH (6+X3:3)
 1347                MA    LLHAAA,X2         * ADD 3 TO STACK POINTER               7  5096  # 43O 094          125  8436     094
1                                                                                                         PAGE   26
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 1348                LCA   6&X3,0&X2         * LOAD MEMORY 6&X3 IN STACK            7  5103  L 0?6 0!0          125   006+3   000+2
 1349         * POP (X1:3)
 1350                LCA   0&X2,X1           * LOAD STACK IN X1                     7  5110  L 0!0 089          125   000+2   089
 1351                MA    LSHAAA,X2         * ADD -3 TO STACK POINTER              7  5117  # 35! 094          126  8350     094
 1352         * PUSH (0+X1:3)
 1353                MA    LLHAAA,X2         * ADD 3 TO STACK POINTER               7  5124  # 43O 094          126  8436     094
 1354                LCA   0&X1,0&X2         * LOAD MEMORY 0&X1 IN STACK            7  5131  L 0'0 0!0          126   000+1   000+2
 1355         * END DEREFERENCEEXPRESSION (*((**CHAR) ARG))
 1356         * CREATE A STACK FRAME WITH X3 POINTER TO IT
 1357         * PUSH (X3:3)
 1358                MA    LLHAAA,X2         * ADD 3 TO STACK POINTER               7  5138  # 43O 094          126  8436     094
 1359                LCA   X3,0&X2           * LOAD X3 IN STACK                     7  5145  L 099 0!0          126   099     000+2
 1360                MCW   X2,X3             * MOVE X2 IN X3                        7  5152  M 094 099          127   094     099
 1361                B     LHDAAA            * JUMP TO FUNCTION PUTS                4  5159  B R3Z              127  6939
 1362         * POP (X3:3)
 1363                LCA   0&X2,X3           * LOAD STACK IN X3                     7  5163  L 0!0 099          127   000+2   099
 1364                MA    LSHAAA,X2         * ADD -3 TO STACK POINTER              7  5170  # 35! 094          127  8350     094
 1365         * POP (3)
 1366                MA    LSHAAA,X2         * ADD -3 TO STACK POINTER              7  5177  # 35! 094          127  8350     094
 1367         * POP (5)
 1368                MA    LPHAAA,X2         * ADD -5 TO STACK POINTER              7  5184  # 33P 094          127  8337     094
 1369         * END FUNCTION CALL PUTS((*((**CHAR) ARG)))
 1370         * ADDITION (ARG + 15997)
 1371         * LOCAL VARIABLE (ARG : 6+X3)
 1372         * PUSH (6+X3:3)
 1373                MA    LLHAAA,X2         * ADD 3 TO STACK POINTER               7  5191  # 43O 094          128  8436     094
 1374                LCA   6&X3,0&X2         * LOAD MEMORY 6&X3 IN STACK            7  5198  L 0?6 0!0          128   006+3   000+2
 1375         * CONSTANT (15997 : @I9G@)
 1376         * PUSH (@I9G@:3)
 1377                MA    LLHAAA,X2         * ADD 3 TO STACK POINTER               7  5205  # 43O 094          128  8436     094
 1378                LCA   LSHAAA,0&X2       * LOAD DATA @I9G@ IN STACK             7  5212  L 35! 0!0          128  8350     000+2
 1379                MA    0&X2,15997&X2     * ADD STACK TO STACK AT -3             7  5219  # 0!0 IRG          128   000+2 15997+2
 1380         * POP (3)
 1381                MA    LSHAAA,X2         * ADD -3 TO STACK POINTER              7  5226  # 35! 094          129  8350     094
 1382         * PUSH (@006@:3)
 1383                MA    LLHAAA,X2         * ADD 3 TO STACK POINTER               7  5233  # 43O 094          129  8436     094
 1384                LCA   LWHAAA,0&X2       * LOAD DATA @006@ IN STACK             7  5240  L 36R 0!0          129  8369     000+2
 1385                MA    X3,0&X2           * ADD X3 TO STACK                      7  5247  # 099 0!0          129   099     000+2
 1386         * ASSIGNMENT (ARG = (ARG + 15997))
 1387         * POP (X1:3)
 1388                LCA   0&X2,X1           * LOAD STACK IN X1                     7  5254  L 0!0 089          129   000+2   089
 1389                MA    LSHAAA,X2         * ADD -3 TO STACK POINTER              7  5261  # 35! 094          130  8350     094
 1390         * POP (0+X1:3)
 1391                LCA   0&X2,0&X1         * LOAD STACK IN 0&X1                   7  5268  L 0!0 0'0          130   000+2   000+1
 1392                MA    LSHAAA,X2         * ADD -3 TO STACK POINTER              7  5275  # 35! 094          130  8350     094
 1393         * END ASSIGNMENT (ARG = (ARG + 15997))
 1394         * END [BLOCK ENDING AT LHEAAA]
 1395         ***************************************
 1396         LHEAAA B     LCEAAA            * JUMP WHEN TRUE                       4  5282  B J5Z              130  6159
 1397         * IF [IF ((C == 'D') THEN [BLOCK ENDING AT LIEAAA] ELSE [IF ((C == 'P') THE
1                                                                                                         PAGE   27
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 1398         * EQUAL (C == 'D')
 1399         * LOCAL VARIABLE (C : 7+X3)
 1400         * PUSH (7+X3:1)
 1401         LPEAAA MA    LYHAAA,X2         * ADD 1 TO STACK POINTER               7  5286  # 43R 094          130  8439     094
 1402                LCA   7&X3,0&X2         * LOAD MEMORY 7&X3 IN STACK            7  5293  L 0?7 0!0          130   007+3   000+2
 1403         * CONSTANT ('D' : @D@)
 1404         * PUSH (@D@:1)
 1405                MA    LYHAAA,X2         * ADD 1 TO STACK POINTER               7  5300  # 43R 094          131  8439     094
 1406                LCA   LRIAAA,0&X2       * LOAD DATA @D@ IN STACK               7  5307  L 44Q 0!0          131  8448     000+2
 1407                C     0&X2,15999&X2     * COMPARE STACK TO STACK AT -1         7  5314  C 0!0 IRI          131   000+2 15999+2
 1408         * POP (1)
 1409                MA    LBIAAA,X2         * ADD -1 TO STACK POINTER              7  5321  # ### 094          131   ###     094
 1410         * POP (1)
 1411                MA    LBIAAA,X2         * ADD -1 TO STACK POINTER              7  5328  # ### 094          131   ###     094
 1412         * PUSH (@00000@:5)
 1413                MA    LMHAAA,X2         * ADD 5 TO STACK POINTER               7  5335  # 44O 094          132  8446     094
 1414                LCA   LXHAAA,0&X2       * LOAD DATA @00000@ IN STACK           7  5342  L 40O 0!0          132  8406     000+2
 1415                BE    LVGAAA            * JUMP IF EQUAL                        5  5349  B T5Y S            132  5358
 1416                B     LWGAAA            * JUMP TO END                          4  5354  B T6V              132  5365
 1417         LVGAAA MCW   LUHAAA,0&X2       * MOVE 1 IN STACK                      7  5358  M 38M 0!0          132  8384     000+2
 1418         LWGAAA MCS   0&X2,0&X2         * CLEAR WM IN STACK                    7  5365  Z 0!0 0!0          132   000+2   000+2
 1419         * POP (5)
 1420                MA    LPHAAA,X2         * ADD -5 TO STACK POINTER              7  5372  # 33P 094          133  8337     094
 1421                BCE   LNEAAA,5&X2,      * JUMP WHEN FALSE                      8  5379  B X2Y 0!5          133  5728     005+2
 1422         ***************************************
 1423         * BEGIN [BLOCK ENDING AT LIEAAA]
 1424         * A SIZE:7 OFFSET:11
 1425         * PUSH (7)
 1426                MA    LNIAAA,X2         * ADD 7 TO STACK POINTER               7  5387  # 44L 094          133  8443     094
 1427         * FUNCTION CALL ITOA((*((*INT) ARG)), A, 10)
 1428         * PUSH (3)
 1429                MA    LLHAAA,X2         * ADD 3 TO STACK POINTER               7  5394  # 43O 094          133  8436     094
 1430         * CONSTANT (10 : @00010@)
 1431         * PUSH (@00010@:5)
 1432                MA    LMHAAA,X2         * ADD 5 TO STACK POINTER               7  5401  # 44O 094          133  8446     094
 1433                LCA   LSIAAA,0&X2       * LOAD DATA @00010@ IN STACK           7  5408  L 41J 0!0          134  8411     000+2
 1434         * LOCAL ARRAY (A:CHAR [7])
 1435         * PUSH (@012@:3)
 1436                MA    LLHAAA,X2         * ADD 3 TO STACK POINTER               7  5415  # 43O 094          134  8436     094
 1437                LCA   LTIAAA,0&X2       * LOAD DATA @012@ IN STACK             7  5422  L 36L 0!0          134  8363     000+2
 1438                MA    X3,0&X2           * ADD X3 TO STACK                      7  5429  # 099 0!0          134   099     000+2
 1439         * DEREFERENCEEXPRESSION (*((*INT) ARG))
 1440         * LOCAL VARIABLE (ARG : 6+X3)
 1441         * PUSH (6+X3:3)
 1442                MA    LLHAAA,X2         * ADD 3 TO STACK POINTER               7  5436  # 43O 094          134  8436     094
 1443                LCA   6&X3,0&X2         * LOAD MEMORY 6&X3 IN STACK            7  5443  L 0?6 0!0          135   006+3   000+2
 1444         * POP (X1:3)
 1445                LCA   0&X2,X1           * LOAD STACK IN X1                     7  5450  L 0!0 089          135   000+2   089
 1446                MA    LSHAAA,X2         * ADD -3 TO STACK POINTER              7  5457  # 35! 094          135  8350     094
 1447         * PUSH (0+X1:5)
1                                                                                                         PAGE   28
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 1448                MA    LMHAAA,X2         * ADD 5 TO STACK POINTER               7  5464  # 44O 094          135  8446     094
 1449                LCA   0&X1,0&X2         * LOAD MEMORY 0&X1 IN STACK            7  5471  L 0'0 0!0          135   000+1   000+2
 1450         * END DEREFERENCEEXPRESSION (*((*INT) ARG))
 1451         * CREATE A STACK FRAME WITH X3 POINTER TO IT
 1452         * PUSH (X3:3)
 1453                MA    LLHAAA,X2         * ADD 3 TO STACK POINTER               7  5478  # 43O 094          136  8436     094
 1454                LCA   X3,0&X2           * LOAD X3 IN STACK                     7  5485  L 099 0!0          136   099     000+2
 1455                MCW   X2,X3             * MOVE X2 IN X3                        7  5492  M 094 099          136   094     099
 1456                B     LYAAAA            * JUMP TO FUNCTION ITOA                4  5499  B S93              136  1293
 1457         * POP (X3:3)
 1458                LCA   0&X2,X3           * LOAD STACK IN X3                     7  5503  L 0!0 099          136   000+2   099
 1459                MA    LSHAAA,X2         * ADD -3 TO STACK POINTER              7  5510  # 35! 094          136  8350     094
 1460         * POP (5)
 1461                MA    LPHAAA,X2         * ADD -5 TO STACK POINTER              7  5517  # 33P 094          137  8337     094
 1462         * POP (3)
 1463                MA    LSHAAA,X2         * ADD -3 TO STACK POINTER              7  5524  # 35! 094          137  8350     094
 1464         * POP (5)
 1465                MA    LPHAAA,X2         * ADD -5 TO STACK POINTER              7  5531  # 33P 094          137  8337     094
 1466         * POP (3)
 1467                MA    LSHAAA,X2         * ADD -3 TO STACK POINTER              7  5538  # 35! 094          137  8350     094
 1468         * END FUNCTION CALL ITOA((*((*INT) ARG)), A, 10)
 1469         * FUNCTION CALL PUTS(A)
 1470         * PUSH (5)
 1471                MA    LMHAAA,X2         * ADD 5 TO STACK POINTER               7  5545  # 44O 094          137  8446     094
 1472         * LOCAL ARRAY (A:CHAR [7])
 1473         * PUSH (@012@:3)
 1474                MA    LLHAAA,X2         * ADD 3 TO STACK POINTER               7  5552  # 43O 094          138  8436     094
 1475                LCA   LTIAAA,0&X2       * LOAD DATA @012@ IN STACK             7  5559  L 36L 0!0          138  8363     000+2
 1476                MA    X3,0&X2           * ADD X3 TO STACK                      7  5566  # 099 0!0          138   099     000+2
 1477         * CREATE A STACK FRAME WITH X3 POINTER TO IT
 1478         * PUSH (X3:3)
 1479                MA    LLHAAA,X2         * ADD 3 TO STACK POINTER               7  5573  # 43O 094          138  8436     094
 1480                LCA   X3,0&X2           * LOAD X3 IN STACK                     7  5580  L 099 0!0          138   099     000+2
 1481                MCW   X2,X3             * MOVE X2 IN X3                        7  5587  M 094 099          139   094     099
 1482                B     LHDAAA            * JUMP TO FUNCTION PUTS                4  5594  B R3Z              139  6939
 1483         * POP (X3:3)
 1484                LCA   0&X2,X3           * LOAD STACK IN X3                     7  5598  L 0!0 099          139   000+2   099
 1485                MA    LSHAAA,X2         * ADD -3 TO STACK POINTER              7  5605  # 35! 094          139  8350     094
 1486         * POP (3)
 1487                MA    LSHAAA,X2         * ADD -3 TO STACK POINTER              7  5612  # 35! 094          139  8350     094
 1488         * POP (5)
 1489                MA    LPHAAA,X2         * ADD -5 TO STACK POINTER              7  5619  # 33P 094          139  8337     094
 1490         * END FUNCTION CALL PUTS(A)
 1491         * ADDITION (ARG + 15995)
 1492         * LOCAL VARIABLE (ARG : 6+X3)
 1493         * PUSH (6+X3:3)
 1494                MA    LLHAAA,X2         * ADD 3 TO STACK POINTER               7  5626  # 43O 094          140  8436     094
 1495                LCA   6&X3,0&X2         * LOAD MEMORY 6&X3 IN STACK            7  5633  L 0?6 0!0          140   006+3   000+2
 1496         * CONSTANT (15995 : @I9E@)
 1497         * PUSH (@I9E@:3)
1                                                                                                         PAGE   29
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 1498                MA    LLHAAA,X2         * ADD 3 TO STACK POINTER               7  5640  # 43O 094          140  8436     094
 1499                LCA   LPHAAA,0&X2       * LOAD DATA @I9E@ IN STACK             7  5647  L 33P 0!0          140  8337     000+2
 1500                MA    0&X2,15997&X2     * ADD STACK TO STACK AT -3             7  5654  # 0!0 IRG          140   000+2 15997+2
 1501         * POP (3)
 1502                MA    LSHAAA,X2         * ADD -3 TO STACK POINTER              7  5661  # 35! 094          141  8350     094
 1503         * PUSH (@006@:3)
 1504                MA    LLHAAA,X2         * ADD 3 TO STACK POINTER               7  5668  # 43O 094          141  8436     094
 1505                LCA   LWHAAA,0&X2       * LOAD DATA @006@ IN STACK             7  5675  L 36R 0!0          141  8369     000+2
 1506                MA    X3,0&X2           * ADD X3 TO STACK                      7  5682  # 099 0!0          141   099     000+2
 1507         * ASSIGNMENT (ARG = (ARG + 15995))
 1508         * POP (X1:3)
 1509                LCA   0&X2,X1           * LOAD STACK IN X1                     7  5689  L 0!0 089          141   000+2   089
 1510                MA    LSHAAA,X2         * ADD -3 TO STACK POINTER              7  5696  # 35! 094          142  8350     094
 1511         * POP (0+X1:3)
 1512                LCA   0&X2,0&X1         * LOAD STACK IN 0&X1                   7  5703  L 0!0 0'0          142   000+2   000+1
 1513                MA    LSHAAA,X2         * ADD -3 TO STACK POINTER              7  5710  # 35! 094          142  8350     094
 1514         * END ASSIGNMENT (ARG = (ARG + 15995))
 1515         * POP (7)
 1516         LIEAAA MA    LUIAAA,X2         * ADD -7 TO STACK POINTER              7  5717  # 33M 094          142  8334     094
 1517         * END [BLOCK ENDING AT LIEAAA]
 1518         ***************************************
 1519                B     LCEAAA            * JUMP WHEN TRUE                       4  5724  B J5Z              142  6159
 1520         * IF [IF ((C == 'P') THEN [BLOCK ENDING AT LJEAAA] ELSE [BLOCK ENDING AT LK
 1521         * EQUAL (C == 'P')
 1522         * LOCAL VARIABLE (C : 7+X3)
 1523         * PUSH (7+X3:1)
 1524         LNEAAA MA    LYHAAA,X2         * ADD 1 TO STACK POINTER               7  5728  # 43R 094          142  8439     094
 1525                LCA   7&X3,0&X2         * LOAD MEMORY 7&X3 IN STACK            7  5735  L 0?7 0!0          143   007+3   000+2
 1526         * CONSTANT ('P' : @P@)
 1527         * PUSH (@P@:1)
 1528                MA    LYHAAA,X2         * ADD 1 TO STACK POINTER               7  5742  # 43R 094          143  8439     094
 1529                LCA   LVIAAA,0&X2       * LOAD DATA @P@ IN STACK               7  5749  L 43! 0!0          143  8430     000+2
 1530                C     0&X2,15999&X2     * COMPARE STACK TO STACK AT -1         7  5756  C 0!0 IRI          143   000+2 15999+2
 1531         * POP (1)
 1532                MA    LBIAAA,X2         * ADD -1 TO STACK POINTER              7  5763  # ### 094          143   ###     094
 1533         * POP (1)
 1534                MA    LBIAAA,X2         * ADD -1 TO STACK POINTER              7  5770  # ### 094          144   ###     094
 1535         * PUSH (@00000@:5)
 1536                MA    LMHAAA,X2         * ADD 5 TO STACK POINTER               7  5777  # 44O 094          144  8446     094
 1537                LCA   LXHAAA,0&X2       * LOAD DATA @00000@ IN STACK           7  5784  L 40O 0!0          144  8406     000+2
 1538                BE    LXGAAA            * JUMP IF EQUAL                        5  5791  B Y0' S            144  5800
 1539                B     LYGAAA            * JUMP TO END                          4  5796  B Y0X              144  5807
 1540         LXGAAA MCW   LUHAAA,0&X2       * MOVE 1 IN STACK                      7  5800  M 38M 0!0          144  8384     000+2
 1541         LYGAAA MCS   0&X2,0&X2         * CLEAR WM IN STACK                    7  5807  Z 0!0 0!0          145   000+2   000+2
 1542         * POP (5)
 1543                MA    LPHAAA,X2         * ADD -5 TO STACK POINTER              7  5814  # 33P 094          145  8337     094
 1544                BCE   LLEAAA,5&X2,      * JUMP WHEN FALSE                      8  5821  B J5V 0!5          145  6155     005+2
 1545         ***************************************
 1546         * BEGIN [BLOCK ENDING AT LJEAAA]
 1547         * LOCAL VARIABLE (ARG : 6+X3)
1                                                                                                         PAGE   30
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 1548         * PUSH (6+X3:3)
 1549                MA    LLHAAA,X2         * ADD 3 TO STACK POINTER               7  5829  # 43O 094          145  8436     094
 1550                LCA   6&X3,0&X2         * LOAD MEMORY 6&X3 IN STACK            7  5836  L 0?6 0!0          145   006+3   000+2
 1551         * PUSH (@010@:3)
 1552                MA    LLHAAA,X2         * ADD 3 TO STACK POINTER               7  5843  # 43O 094          146  8436     094
 1553                LCA   LWIAAA,0&X2       * LOAD DATA @010@ IN STACK             7  5850  L 34P 0!0          146  8347     000+2
 1554                MA    X3,0&X2           * ADD X3 TO STACK                      7  5857  # 099 0!0          146   099     000+2
 1555         * ASSIGNMENT (ADDRP = ARG)
 1556         * POP (X1:3)
 1557                LCA   0&X2,X1           * LOAD STACK IN X1                     7  5864  L 0!0 089          146   000+2   089
 1558                MA    LSHAAA,X2         * ADD -3 TO STACK POINTER              7  5871  # 35! 094          146  8350     094
 1559         * POP (0+X1:3)
 1560                LCA   0&X2,0&X1         * LOAD STACK IN 0&X1                   7  5878  L 0!0 0'0          147   000+2   000+1
 1561                MA    LSHAAA,X2         * ADD -3 TO STACK POINTER              7  5885  # 35! 094          147  8350     094
 1562         * END ASSIGNMENT (ADDRP = ARG)
 1563         * DEREFERENCEEXPRESSION (*ADDRP)
 1564         * LOCAL VARIABLE (ADDRP : 10+X3)
 1565         * PUSH (10+X3:3)
 1566                MA    LLHAAA,X2         * ADD 3 TO STACK POINTER               7  5892  # 43O 094          147  8436     094
 1567                LCA   10&X3,0&X2        * LOAD MEMORY 10&X3 IN STACK           7  5899  L 0A0 0!0          147   010+3   000+2
 1568         * POP (X1:3)
 1569                LCA   0&X2,X1           * LOAD STACK IN X1                     7  5906  L 0!0 089          147   000+2   089
 1570                MA    LSHAAA,X2         * ADD -3 TO STACK POINTER              7  5913  # 35! 094          148  8350     094
 1571         * PUSH (0+X1:1)
 1572                MA    LYHAAA,X2         * ADD 1 TO STACK POINTER               7  5920  # 43R 094          148  8439     094
 1573                LCA   0&X1,0&X2         * LOAD MEMORY 0&X1 IN STACK            7  5927  L 0'0 0!0          148   000+1   000+2
 1574         * END DEREFERENCEEXPRESSION (*ADDRP)
 1575         * PUSH (@011@:3)
 1576                MA    LLHAAA,X2         * ADD 3 TO STACK POINTER               7  5934  # 43O 094          148  8436     094
 1577                LCA   LMIAAA,0&X2       * LOAD DATA @011@ IN STACK             7  5941  L 42! 0!0          148  8420     000+2
 1578                MA    X3,0&X2           * ADD X3 TO STACK                      7  5948  # 099 0!0          149   099     000+2
 1579         * ASSIGNMENT (ADDRC = (*ADDRP))
 1580         * POP (X1:3)
 1581                LCA   0&X2,X1           * LOAD STACK IN X1                     7  5955  L 0!0 089          149   000+2   089
 1582                MA    LSHAAA,X2         * ADD -3 TO STACK POINTER              7  5962  # 35! 094          149  8350     094
 1583         * POP (0+X1:1)
 1584                LCA   0&X2,0&X1         * LOAD STACK IN 0&X1                   7  5969  L 0!0 0'0          149   000+2   000+1
 1585                MA    LBIAAA,X2         * ADD -1 TO STACK POINTER              7  5976  # ### 094          149   ###     094
 1586         * END ASSIGNMENT (ADDRC = (*ADDRP))
 1587         * FUNCTION CALL PUTCHAR(ADDRC)
 1588         * PUSH (5)
 1589                MA    LMHAAA,X2         * ADD 5 TO STACK POINTER               7  5983  # 44O 094          150  8446     094
 1590         * LOCAL VARIABLE (ADDRC : 11+X3)
 1591         * PUSH (11+X3:1)
 1592                MA    LYHAAA,X2         * ADD 1 TO STACK POINTER               7  5990  # 43R 094          150  8439     094
 1593                LCA   11&X3,0&X2        * LOAD MEMORY 11&X3 IN STACK           7  5997  L 0A1 0!0          150   011+3   000+2
 1594         * CREATE A STACK FRAME WITH X3 POINTER TO IT
 1595         * PUSH (X3:3)
 1596                MA    LLHAAA,X2         * ADD 3 TO STACK POINTER               7  6004  # 43O 094          150  8436     094
 1597                LCA   X3,0&X2           * LOAD X3 IN STACK                     7  6011  L 099 0!0          150   099     000+2
1                                                                                                         PAGE   31
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 1598                MCW   X2,X3             * MOVE X2 IN X3                        7  6018  M 094 099          151   094     099
 1599                B     LWCAAA            * JUMP TO FUNCTION PUTCHAR             4  6025  B J8/              151  6181
 1600         * POP (X3:3)
 1601                LCA   0&X2,X3           * LOAD STACK IN X3                     7  6029  L 0!0 099          151   000+2   099
 1602                MA    LSHAAA,X2         * ADD -3 TO STACK POINTER              7  6036  # 35! 094          151  8350     094
 1603         * POP (1)
 1604                MA    LBIAAA,X2         * ADD -1 TO STACK POINTER              7  6043  # ### 094          151   ###     094
 1605         * POP (5)
 1606                MA    LPHAAA,X2         * ADD -5 TO STACK POINTER              7  6050  # 33P 094          151  8337     094
 1607         * END FUNCTION CALL PUTCHAR(ADDRC)
 1608         * START ASM BLOCK
 1609                W                       * START ASM BLOCK                      1  6057  2                  152
 1610         * END ASM BLOCK
 1611         * START ASM BLOCK
 1612                W                       * START ASM BLOCK                      1  6058  2                  152
 1613         * END ASM BLOCK
 1614         * START ASM BLOCK
 1615                W                       * START ASM BLOCK                      1  6059  2                  152
 1616         * END ASM BLOCK
 1617         * ADDITION (ARG + 15999)
 1618         * LOCAL VARIABLE (ARG : 6+X3)
 1619         * PUSH (6+X3:3)
 1620                MA    LLHAAA,X2         * ADD 3 TO STACK POINTER               7  6060  # 43O 094          152  8436     094
 1621                LCA   6&X3,0&X2         * LOAD MEMORY 6&X3 IN STACK            7  6067  L 0?6 0!0          152   006+3   000+2
 1622         * CONSTANT (15999 : @I9I@)
 1623         * PUSH (@I9I@:3)
 1624                MA    LLHAAA,X2         * ADD 3 TO STACK POINTER               7  6074  # 43O 094          152  8436     094
 1625                LCA   LBIAAA,0&X2       * LOAD DATA @I9I@ IN STACK             7  6081  L ### 0!0          152   ###     000+2
 1626                MA    0&X2,15997&X2     * ADD STACK TO STACK AT -3             7  6088  # 0!0 IRG          153   000+2 15997+2
 1627         * POP (3)
 1628                MA    LSHAAA,X2         * ADD -3 TO STACK POINTER              7  6095  # 35! 094          153  8350     094
 1629         * PUSH (@006@:3)
 1630                MA    LLHAAA,X2         * ADD 3 TO STACK POINTER               7  6102  # 43O 094          153  8436     094
 1631                LCA   LWHAAA,0&X2       * LOAD DATA @006@ IN STACK             7  6109  L 36R 0!0          153  8369     000+2
 1632                MA    X3,0&X2           * ADD X3 TO STACK                      7  6116  # 099 0!0          153   099     000+2
 1633         * ASSIGNMENT (ARG = (ARG + 15999))
 1634         * POP (X1:3)
 1635                LCA   0&X2,X1           * LOAD STACK IN X1                     7  6123  L 0!0 089          154   000+2   089
 1636                MA    LSHAAA,X2         * ADD -3 TO STACK POINTER              7  6130  # 35! 094          154  8350     094
 1637         * POP (0+X1:3)
 1638                LCA   0&X2,0&X1         * LOAD STACK IN 0&X1                   7  6137  L 0!0 0'0          154   000+2   000+1
 1639                MA    LSHAAA,X2         * ADD -3 TO STACK POINTER              7  6144  # 35! 094          154  8350     094
 1640         * END ASSIGNMENT (ARG = (ARG + 15999))
 1641         * END [BLOCK ENDING AT LJEAAA]
 1642         ***************************************
 1643         LJEAAA B     LCEAAA            * JUMP WHEN TRUE                       4  6151  B J5Z              154  6159
 1644         ***************************************
 1645         * BEGIN [BLOCK ENDING AT LKEAAA]
 1646         * RETURN TO LEEAAA WITH NO RETURN VALUE
 1647         LLEAAA B     LCEAAA            * JUMP TO END OF FUNCTION BLOCK        4  6155  B J5Z              154  6159
1                                                                                                         PAGE   32
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 1648         * END [BLOCK ENDING AT LKEAAA]
 1649         ***************************************
 1650         * END IF [IF ((C == 'P') THEN [BLOCK ENDING AT LJEAAA] ELSE [BLOCK ENDING A
 1651         * END IF [IF ((C == 'D') THEN [BLOCK ENDING AT LIEAAA] ELSE [IF ((C == 'P')
 1652         * END IF [IF ((C == 'S') THEN [BLOCK ENDING AT LHEAAA] ELSE [IF ((C == 'D')
 1653         * END IF [IF ((C == 'C') THEN [BLOCK ENDING AT LGEAAA] ELSE [IF ((C == 'S')
 1654         * END IF [IF ((C == '%') THEN [BLOCK ENDING AT LFEAAA] ELSE [IF ((C == 'C')
 1655         * END [BLOCK ENDING AT LEEAAA]
 1656         ***************************************
 1657         * END IF [IF ((C != '%') THEN [BLOCK ENDING AT LDEAAA] ELSE [BLOCK ENDING A
 1658         * END [BLOCK ENDING AT LCEAAA]
 1659         ***************************************
 1660         LCEAAA B     LXEAAA            * JUMP TO TOP OF WHILE                 4  6159  B I86              155  3986
 1661         * END WHILE [WHILE (((C = (*(CFORMAT_STR++))) != '\0')) [BLOCK ENDING AT LC
 1662         * POP (11)
 1663         LBEAAA MA    LXIAAA,X2         * ADD -11 TO STACK POINTER             7  6163  # 31P 094          155  8317     094
 1664         * END [BLOCK ENDING AT LBEAAA]
 1665         ***************************************
 1666                LCA   3&X3,X1           * LOAD RETURN ADDRESS IN X1            7  6170  L 0?3 089          155   003+3   089
 1667                B     0&X1              * JUMP BACK TO CALLER IN X1            4  6177  B 0'0              155   000+1
 1668         ***************************************************************************
 1669         * END FUNCTION : PRINTF
 1670         ***************************************************************************
 1671         ***************************************************************************
 1672         * FUNCTION : PUTCHAR
 1673         ***************************************************************************
 1674         LWCAAA SBR   3&X3              * SAVE RETURN ADDRESS IN REGISTER      4  6181  H 0?3              155   003+3
 1675         * SET THE RIGHT WM AND CLEAR THE WRONG ONES
 1676                SW    1&X3              * SET WM AT 1&X3                       4  6185  , 0?1              155   001+3
 1677                CW    2&X3              * CLEAR WM AT 2&X3                     4  6189  ) 0?2              155   002+3
 1678                CW    3&X3              * CLEAR WM AT 3&X3                     4  6193  ) 0?3              156   003+3
 1679         ***************************************
 1680         * BEGIN [BLOCK ENDING AT LXCAAA]
 1681         * PUSH (3)
 1682                MA    LLHAAA,X2         * ADD 3 TO STACK POINTER               7  6197  # 43O 094          156  8436     094
 1683         * IF [IF ((C != '\N') THEN [BLOCK ENDING AT LYCAAA] ELSE [BLOCK ENDING AT L
 1684         * NOTEQUAL (!=) (C != '\N')
 1685         * PARAMETER VARIABLE (C : 15997+X3)
 1686         * PUSH (15997+X3:1)
 1687                MA    LYHAAA,X2         * ADD 1 TO STACK POINTER               7  6204  # 43R 094          156  8439     094
 1688                LCA   15997&X3,0&X2     * LOAD MEMORY 15997&X3 IN STACK        7  6211  L IIG 0!0          156 15997+3   000+2
 1689         * CONSTANT ('\N' : EOL)
 1690         * PUSH (EOL:1)
 1691                MA    LYHAAA,X2         * ADD 1 TO STACK POINTER               7  6218  # 43R 094          156  8439     094
 1692                LCA   EOL,0&X2          * LOAD MEMORY EOL IN STACK             7  6225  L 346 0!0          156   346     000+2
 1693                C     0&X2,15999&X2     * COMPARE STACK TO STACK AT -1         7  6232  C 0!0 IRI          157   000+2 15999+2
 1694         * POP (1)
 1695                MA    LBIAAA,X2         * ADD -1 TO STACK POINTER              7  6239  # ### 094          157   ###     094
 1696         * POP (1)
 1697                MA    LBIAAA,X2         * ADD -1 TO STACK POINTER              7  6246  # ### 094          157   ###     094
1                                                                                                         PAGE   33
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 1698         * PUSH (@00001@:5)
 1699                MA    LMHAAA,X2         * ADD 5 TO STACK POINTER               7  6253  # 44O 094          157  8446     094
 1700                LCA   LUHAAA,0&X2       * LOAD DATA @00001@ IN STACK           7  6260  L 38M 0!0          157  8384     000+2
 1701                BE    LZGAAA            * JUMP IF EQUAL                        5  6267  B K7W S            158  6276
 1702                B     LAHAAA            * JUMP TO END                          4  6272  B K8T              158  6283
 1703         LZGAAA MCW   LXHAAA,0&X2       * MOVE 0 IN STACK                      7  6276  M 40O 0!0          158  8406     000+2
 1704         LAHAAA MCS   0&X2,0&X2         * CLEAR WM IN STACK                    7  6283  Z 0!0 0!0          158   000+2   000+2
 1705         * POP (5)
 1706                MA    LPHAAA,X2         * ADD -5 TO STACK POINTER              7  6290  # 33P 094          158  8337     094
 1707                BCE   LBDAAA,5&X2,      * JUMP WHEN FALSE                      8  6297  B M0' 0!5          158  6400     005+2
 1708         ***************************************
 1709         * BEGIN [BLOCK ENDING AT LYCAAA]
 1710         * PARAMETER VARIABLE (C : 15997+X3)
 1711         * PUSH (15997+X3:1)
 1712                MA    LYHAAA,X2         * ADD 1 TO STACK POINTER               7  6305  # 43R 094          159  8439     094
 1713                LCA   15997&X3,0&X2     * LOAD MEMORY 15997&X3 IN STACK        7  6312  L IIG 0!0          159 15997+3   000+2
 1714         * POSTINCREMENT (__PUTCHAR_POS++)
 1715         * PUSH (@'24@:3)
 1716                MA    LLHAAA,X2         * ADD 3 TO STACK POINTER               7  6319  # 43O 094          159  8436     094
 1717                LCA   LYIAAA,0&X2       * LOAD DATA @'24@ IN STACK             7  6326  L 42R 0!0          159  8429     000+2
 1718         * POP (X1:3)
 1719                LCA   0&X2,X1           * LOAD STACK IN X1                     7  6333  L 0!0 089          159   000+2   089
 1720                MA    LSHAAA,X2         * ADD -3 TO STACK POINTER              7  6340  # 35! 094          160  8350     094
 1721         * PUSH (0+X1:3)
 1722                MA    LLHAAA,X2         * ADD 3 TO STACK POINTER               7  6347  # 43O 094          160  8436     094
 1723                LCA   0&X1,0&X2         * LOAD MEMORY 0&X1 IN STACK            7  6354  L 0'0 0!0          160   000+1   000+2
 1724                MA    LYHAAA,0&X1       * POSTINCREMENT POINTER AT X1          7  6361  # 43R 0'0          160  8439     000+1
 1725         * ASSIGNMENT ((*(__PUTCHAR_POS++)) = C)
 1726         * POP (X1:3)
 1727                LCA   0&X2,X1           * LOAD STACK IN X1                     7  6368  L 0!0 089          160   000+2   089
 1728                MA    LSHAAA,X2         * ADD -3 TO STACK POINTER              7  6375  # 35! 094          161  8350     094
 1729         * POP (0+X1:1)
 1730                LCA   0&X2,0&X1         * LOAD STACK IN 0&X1                   7  6382  L 0!0 0'0          161   000+2   000+1
 1731                MA    LBIAAA,X2         * ADD -1 TO STACK POINTER              7  6389  # ### 094          161   ###     094
 1732         * END ASSIGNMENT ((*(__PUTCHAR_POS++)) = C)
 1733         * END [BLOCK ENDING AT LYCAAA]
 1734         ***************************************
 1735         LYCAAA B     LEDAAA            * JUMP WHEN TRUE                       4  6396  B P0X              161  6707
 1736         ***************************************
 1737         * BEGIN [BLOCK ENDING AT LZCAAA]
 1738         * WHILE [WHILE ((((INT) __PUTCHAR_LAST) >= ((INT) __PUTCHAR_POS))) [BLOCK E
 1739         * STATIC VARIABLE (__PUTCHAR_LAST : 1027)
 1740         * PUSH (1027:3)
 1741         LBDAAA MA    LLHAAA,X2         * ADD 3 TO STACK POINTER               7  6400  # 43O 094          161  8436     094
 1742                LCA   1027,0&X2         * LOAD MEMORY 1027 IN STACK            7  6407  L '27 0!0          161  1027     000+2
 1743         * CAST POINTER(__PUTCHAR_LAST) TO NUMBER
 1744                B     PTRNMN            * JUMP TO SNIPPET POINTER_TO_NUMBE     4  6414  B ###              162   ###
 1745         * STATIC VARIABLE (__PUTCHAR_POS : 1024)
 1746         * PUSH (1024:3)
 1747                MA    LLHAAA,X2         * ADD 3 TO STACK POINTER               7  6418  # 43O 094          162  8436     094
1                                                                                                         PAGE   34
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 1748                LCA   1024,0&X2         * LOAD MEMORY 1024 IN STACK            7  6425  L '24 0!0          162  1024     000+2
 1749         * CAST POINTER(__PUTCHAR_POS) TO NUMBER
 1750                B     PTRNMN            * JUMP TO SNIPPET POINTER_TO_NUMBE     4  6432  B ###              162   ###
 1751         * GREATEROREQUAL (((INT) __PUTCHAR_LAST) >= ((INT) __PUTCHAR_POS))
 1752                B     CLNNMN            * JUMP TO SNIPPET CLEAN_NUMBER         4  6436  B ###              162   ###
 1753                C     0&X2,15995&X2     * COMPARE STACK TO STACK AT -5         7  6440  C 0!0 IRE          162   000+2 15995+2
 1754         * POP (5)
 1755                MA    LPHAAA,X2         * ADD -5 TO STACK POINTER              7  6447  # 33P 094          163  8337     094
 1756                MCW   LUHAAA,0&X2       * MOVE 1 IN STACK                      7  6454  M 38M 0!0          163  8384     000+2
 1757                BL    LBHAAA            * JUMP IF GREATER OR EQUAL             5  6461  B M7' T            163  6470
 1758                B     LCHAAA            * JUMP TO END                          4  6466  B M7X              163  6477
 1759         LBHAAA MCW   LXHAAA,0&X2       * MOVE 1 IN STACK                      7  6470  M 40O 0!0          163  8406     000+2
 1760         LCHAAA MCS   0&X2,0&X2         * CLEAR WM IN STACK                    7  6477  Z 0!0 0!0          163   000+2   000+2
 1761         * POP (5)
 1762                MA    LPHAAA,X2         * ADD -5 TO STACK POINTER              7  6484  # 33P 094          164  8337     094
 1763                BCE   LCDAAA,5&X2,      * JUMP TO BOTTOM OF WHILE              8  6491  B N9U 0!5          164  6594     005+2
 1764         ***************************************
 1765         * BEGIN [BLOCK ENDING AT LADAAA]
 1766         * CONSTANT (' ' : @ @)
 1767         * PUSH (@ @:1)
 1768                MA    LYHAAA,X2         * ADD 1 TO STACK POINTER               7  6499  # 43R 094          164  8439     094
 1769                LCA   LZIAAA,0&X2       * LOAD DATA @ @ IN STACK               7  6506  L 40J 0!0          164  8401     000+2
 1770         * POSTDECREMENT (__PUTCHAR_LAST--)
 1771         * PUSH (@'27@:3)
 1772                MA    LLHAAA,X2         * ADD 3 TO STACK POINTER               7  6513  # 43O 094          164  8436     094
 1773                LCA   LAJAAA,0&X2       * LOAD DATA @'27@ IN STACK             7  6520  L 34L 0!0          165  8343     000+2
 1774         * POP (X1:3)
 1775                LCA   0&X2,X1           * LOAD STACK IN X1                     7  6527  L 0!0 089          165   000+2   089
 1776                MA    LSHAAA,X2         * ADD -3 TO STACK POINTER              7  6534  # 35! 094          165  8350     094
 1777         * PUSH (0+X1:3)
 1778                MA    LLHAAA,X2         * ADD 3 TO STACK POINTER               7  6541  # 43O 094          165  8436     094
 1779                LCA   0&X1,0&X2         * LOAD MEMORY 0&X1 IN STACK            7  6548  L 0'0 0!0          165   000+1   000+2
 1780                MA    LBIAAA,0&X1       * POSTDECREMENT POINTER AT X1          7  6555  # ### 0'0          166   ###     000+1
 1781         * ASSIGNMENT ((*(__PUTCHAR_LAST--)) = ' ')
 1782         * POP (X1:3)
 1783                LCA   0&X2,X1           * LOAD STACK IN X1                     7  6562  L 0!0 089          166   000+2   089
 1784                MA    LSHAAA,X2         * ADD -3 TO STACK POINTER              7  6569  # 35! 094          166  8350     094
 1785         * POP (0+X1:1)
 1786                LCA   0&X2,0&X1         * LOAD STACK IN 0&X1                   7  6576  L 0!0 0'0          166   000+2   000+1
 1787                MA    LBIAAA,X2         * ADD -1 TO STACK POINTER              7  6583  # ### 094          166   ###     094
 1788         * END ASSIGNMENT ((*(__PUTCHAR_LAST--)) = ' ')
 1789         * END [BLOCK ENDING AT LADAAA]
 1790         ***************************************
 1791         LADAAA B     LBDAAA            * JUMP TO TOP OF WHILE                 4  6590  B M0'              166  6400
 1792         * END WHILE [WHILE ((((INT) __PUTCHAR_LAST) >= ((INT) __PUTCHAR_POS))) [BLO
 1793         * STATIC VARIABLE (__PUTCHAR_POS : 1024)
 1794         * PUSH (1024:3)
 1795         LCDAAA MA    LLHAAA,X2         * ADD 3 TO STACK POINTER               7  6594  # 43O 094          167  8436     094
 1796                LCA   1024,0&X2         * LOAD MEMORY 1024 IN STACK            7  6601  L '24 0!0          167  1024     000+2
 1797         * PUSH (@'27@:3)
1                                                                                                         PAGE   35
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 1798                MA    LLHAAA,X2         * ADD 3 TO STACK POINTER               7  6608  # 43O 094          167  8436     094
 1799                LCA   LAJAAA,0&X2       * LOAD DATA @'27@ IN STACK             7  6615  L 34L 0!0          167  8343     000+2
 1800         * ASSIGNMENT (__PUTCHAR_LAST = __PUTCHAR_POS)
 1801         * POP (X1:3)
 1802                LCA   0&X2,X1           * LOAD STACK IN X1                     7  6622  L 0!0 089          167   000+2   089
 1803                MA    LSHAAA,X2         * ADD -3 TO STACK POINTER              7  6629  # 35! 094          168  8350     094
 1804         * POP (0+X1:3)
 1805                LCA   0&X2,0&X1         * LOAD STACK IN 0&X1                   7  6636  L 0!0 0'0          168   000+2   000+1
 1806                MA    LSHAAA,X2         * ADD -3 TO STACK POINTER              7  6643  # 35! 094          168  8350     094
 1807         * END ASSIGNMENT (__PUTCHAR_LAST = __PUTCHAR_POS)
 1808         * CONSTANT (201 : @201@)
 1809         * PUSH (@201@:3)
 1810                MA    LLHAAA,X2         * ADD 3 TO STACK POINTER               7  6650  # 43O 094          168  8436     094
 1811                LCA   LBJAAA,0&X2       * LOAD DATA @201@ IN STACK             7  6657  L 43L 0!0          168  8433     000+2
 1812         * PUSH (@'24@:3)
 1813                MA    LLHAAA,X2         * ADD 3 TO STACK POINTER               7  6664  # 43O 094          169  8436     094
 1814                LCA   LYIAAA,0&X2       * LOAD DATA @'24@ IN STACK             7  6671  L 42R 0!0          169  8429     000+2
 1815         * ASSIGNMENT (__PUTCHAR_POS = 201)
 1816         * POP (X1:3)
 1817                LCA   0&X2,X1           * LOAD STACK IN X1                     7  6678  L 0!0 089          169   000+2   089
 1818                MA    LSHAAA,X2         * ADD -3 TO STACK POINTER              7  6685  # 35! 094          169  8350     094
 1819         * POP (0+X1:3)
 1820                LCA   0&X2,0&X1         * LOAD STACK IN 0&X1                   7  6692  L 0!0 0'0          169   000+2   000+1
 1821                MA    LSHAAA,X2         * ADD -3 TO STACK POINTER              7  6699  # 35! 094          170  8350     094
 1822         * END ASSIGNMENT (__PUTCHAR_POS = 201)
 1823         * START ASM BLOCK
 1824                W                       * START ASM BLOCK                      1  6706  2                  170
 1825         * END ASM BLOCK
 1826         * END [BLOCK ENDING AT LZCAAA]
 1827         ***************************************
 1828         * END IF [IF ((C != '\N') THEN [BLOCK ENDING AT LYCAAA] ELSE [BLOCK ENDING
 1829         * IF [IF ((__PUTCHAR_POS == 333) THEN [BLOCK ENDING AT LFDAAA]]
 1830         * EQUAL (__PUTCHAR_POS == 333)
 1831         * STATIC VARIABLE (__PUTCHAR_POS : 1024)
 1832         * PUSH (1024:3)
 1833         LEDAAA MA    LLHAAA,X2         * ADD 3 TO STACK POINTER               7  6707  # 43O 094          170  8436     094
 1834                LCA   1024,0&X2         * LOAD MEMORY 1024 IN STACK            7  6714  L '24 0!0          170  1024     000+2
 1835         * CONSTANT (333 : @333@)
 1836         * PUSH (@333@:3)
 1837                MA    LLHAAA,X2         * ADD 3 TO STACK POINTER               7  6721  # 43O 094          170  8436     094
 1838                LCA   LCJAAA,0&X2       * LOAD DATA @333@ IN STACK             7  6728  L 35P 0!0          170  8357     000+2
 1839                C     0&X2,15997&X2     * COMPARE STACK TO STACK AT -3         7  6735  C 0!0 IRG          171   000+2 15997+2
 1840         * POP (3)
 1841                MA    LSHAAA,X2         * ADD -3 TO STACK POINTER              7  6742  # 35! 094          171  8350     094
 1842         * POP (3)
 1843                MA    LSHAAA,X2         * ADD -3 TO STACK POINTER              7  6749  # 35! 094          171  8350     094
 1844         * PUSH (@00000@:5)
 1845                MA    LMHAAA,X2         * ADD 5 TO STACK POINTER               7  6756  # 44O 094          171  8446     094
 1846                LCA   LXHAAA,0&X2       * LOAD DATA @00000@ IN STACK           7  6763  L 40O 0!0          171  8406     000+2
 1847                BE    LDHAAA            * JUMP IF EQUAL                        5  6770  B P7Z S            172  6779
1                                                                                                         PAGE   36
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 1848                B     LEHAAA            * JUMP TO END                          4  6775  B P8W              172  6786
 1849         LDHAAA MCW   LUHAAA,0&X2       * MOVE 1 IN STACK                      7  6779  M 38M 0!0          172  8384     000+2
 1850         LEHAAA MCS   0&X2,0&X2         * CLEAR WM IN STACK                    7  6786  Z 0!0 0!0          172   000+2   000+2
 1851         * POP (5)
 1852                MA    LPHAAA,X2         * ADD -5 TO STACK POINTER              7  6793  # 33P 094          172  8337     094
 1853                BCE   LXCAAA,5&X2,      * JUMP WHEN FALSE                      8  6800  B R2/ 0!5          172  6921     005+2
 1854         ***************************************
 1855         * BEGIN [BLOCK ENDING AT LFDAAA]
 1856         * STATIC VARIABLE (__PUTCHAR_POS : 1024)
 1857         * PUSH (1024:3)
 1858                MA    LLHAAA,X2         * ADD 3 TO STACK POINTER               7  6808  # 43O 094          173  8436     094
 1859                LCA   1024,0&X2         * LOAD MEMORY 1024 IN STACK            7  6815  L '24 0!0          173  1024     000+2
 1860         * PUSH (@'27@:3)
 1861                MA    LLHAAA,X2         * ADD 3 TO STACK POINTER               7  6822  # 43O 094          173  8436     094
 1862                LCA   LAJAAA,0&X2       * LOAD DATA @'27@ IN STACK             7  6829  L 34L 0!0          173  8343     000+2
 1863         * ASSIGNMENT (__PUTCHAR_LAST = __PUTCHAR_POS)
 1864         * POP (X1:3)
 1865                LCA   0&X2,X1           * LOAD STACK IN X1                     7  6836  L 0!0 089          173   000+2   089
 1866                MA    LSHAAA,X2         * ADD -3 TO STACK POINTER              7  6843  # 35! 094          174  8350     094
 1867         * POP (0+X1:3)
 1868                LCA   0&X2,0&X1         * LOAD STACK IN 0&X1                   7  6850  L 0!0 0'0          174   000+2   000+1
 1869                MA    LSHAAA,X2         * ADD -3 TO STACK POINTER              7  6857  # 35! 094          174  8350     094
 1870         * END ASSIGNMENT (__PUTCHAR_LAST = __PUTCHAR_POS)
 1871         * CONSTANT (201 : @201@)
 1872         * PUSH (@201@:3)
 1873                MA    LLHAAA,X2         * ADD 3 TO STACK POINTER               7  6864  # 43O 094          174  8436     094
 1874                LCA   LBJAAA,0&X2       * LOAD DATA @201@ IN STACK             7  6871  L 43L 0!0          174  8433     000+2
 1875         * PUSH (@'24@:3)
 1876                MA    LLHAAA,X2         * ADD 3 TO STACK POINTER               7  6878  # 43O 094          175  8436     094
 1877                LCA   LYIAAA,0&X2       * LOAD DATA @'24@ IN STACK             7  6885  L 42R 0!0          175  8429     000+2
 1878         * ASSIGNMENT (__PUTCHAR_POS = 201)
 1879         * POP (X1:3)
 1880                LCA   0&X2,X1           * LOAD STACK IN X1                     7  6892  L 0!0 089          175   000+2   089
 1881                MA    LSHAAA,X2         * ADD -3 TO STACK POINTER              7  6899  # 35! 094          175  8350     094
 1882         * POP (0+X1:3)
 1883                LCA   0&X2,0&X1         * LOAD STACK IN 0&X1                   7  6906  L 0!0 0'0          175   000+2   000+1
 1884                MA    LSHAAA,X2         * ADD -3 TO STACK POINTER              7  6913  # 35! 094          176  8350     094
 1885         * END ASSIGNMENT (__PUTCHAR_POS = 201)
 1886         * START ASM BLOCK
 1887                W                       * START ASM BLOCK                      1  6920  2                  176
 1888         * END ASM BLOCK
 1889         * END [BLOCK ENDING AT LFDAAA]
 1890         ***************************************
 1891         * END IF [IF ((__PUTCHAR_POS == 333) THEN [BLOCK ENDING AT LFDAAA]]
 1892         * POP (3)
 1893         LXCAAA MA    LSHAAA,X2         * ADD -3 TO STACK POINTER              7  6921  # 35! 094          176  8350     094
 1894         * END [BLOCK ENDING AT LXCAAA]
 1895         ***************************************
 1896                LCA   3&X3,X1           * LOAD RETURN ADDRESS IN X1            7  6928  L 0?3 089          176   003+3   089
 1897                B     0&X1              * JUMP BACK TO CALLER IN X1            4  6935  B 0'0              176   000+1
1                                                                                                         PAGE   37
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 1898         ***************************************************************************
 1899         * END FUNCTION : PUTCHAR
 1900         ***************************************************************************
 1901         ***************************************************************************
 1902         * FUNCTION : PUTS
 1903         ***************************************************************************
 1904         LHDAAA SBR   3&X3              * SAVE RETURN ADDRESS IN REGISTER      4  6939  H 0?3              176   003+3
 1905         * SET THE RIGHT WM AND CLEAR THE WRONG ONES
 1906                SW    1&X3              * SET WM AT 1&X3                       4  6943  , 0?1              176   001+3
 1907                CW    2&X3              * CLEAR WM AT 2&X3                     4  6947  ) 0?2              177   002+3
 1908                CW    3&X3              * CLEAR WM AT 3&X3                     4  6951  ) 0?3              177   003+3
 1909         ***************************************
 1910         * BEGIN [BLOCK ENDING AT LIDAAA]
 1911         * PUSH (3)
 1912                MA    LLHAAA,X2         * ADD 3 TO STACK POINTER               7  6955  # 43O 094          177  8436     094
 1913         * WHILE [WHILE (((*S) != '\0')) [BLOCK ENDING AT LJDAAA] TOP:LKDAAA BOTTOM:
 1914         * NOTEQUAL (!=) ((*S) != '\0')
 1915         * DEREFERENCEEXPRESSION (*S)
 1916         * PARAMETER VARIABLE (S : 15997+X3)
 1917         * PUSH (15997+X3:3)
 1918         LKDAAA MA    LLHAAA,X2         * ADD 3 TO STACK POINTER               7  6962  # 43O 094          177  8436     094
 1919                LCA   15997&X3,0&X2     * LOAD MEMORY 15997&X3 IN STACK        7  6969  L IIG 0!0          177 15997+3   000+2
 1920         * POP (X1:3)
 1921                LCA   0&X2,X1           * LOAD STACK IN X1                     7  6976  L 0!0 089          177   000+2   089
 1922                MA    LSHAAA,X2         * ADD -3 TO STACK POINTER              7  6983  # 35! 094          178  8350     094
 1923         * PUSH (0+X1:1)
 1924                MA    LYHAAA,X2         * ADD 1 TO STACK POINTER               7  6990  # 43R 094          178  8439     094
 1925                LCA   0&X1,0&X2         * LOAD MEMORY 0&X1 IN STACK            7  6997  L 0'0 0!0          178   000+1   000+2
 1926         * END DEREFERENCEEXPRESSION (*S)
 1927         * CONSTANT ('\0' : EOS)
 1928         * PUSH (EOS:1)
 1929                MA    LYHAAA,X2         * ADD 1 TO STACK POINTER               7  7004  # 43R 094          178  8439     094
 1930                LCA   EOS,0&X2          * LOAD MEMORY EOS IN STACK             7  7011  L 345 0!0          178   345     000+2
 1931                C     0&X2,15999&X2     * COMPARE STACK TO STACK AT -1         7  7018  C 0!0 IRI          179   000+2 15999+2
 1932         * POP (1)
 1933                MA    LBIAAA,X2         * ADD -1 TO STACK POINTER              7  7025  # ### 094          179   ###     094
 1934         * POP (1)
 1935                MA    LBIAAA,X2         * ADD -1 TO STACK POINTER              7  7032  # ### 094          179   ###     094
 1936         * PUSH (@00001@:5)
 1937                MA    LMHAAA,X2         * ADD 5 TO STACK POINTER               7  7039  # 44O 094          179  8446     094
 1938                LCA   LUHAAA,0&X2       * LOAD DATA @00001@ IN STACK           7  7046  L 38M 0!0          179  8384     000+2
 1939                BE    LFHAAA            * JUMP IF EQUAL                        5  7053  B ?6S S            180  7062
 1940                B     LGHAAA            * JUMP TO END                          4  7058  B ?6Z              180  7069
 1941         LFHAAA MCW   LXHAAA,0&X2       * MOVE 0 IN STACK                      7  7062  M 40O 0!0          180  8406     000+2
 1942         LGHAAA MCS   0&X2,0&X2         * CLEAR WM IN STACK                    7  7069  Z 0!0 0!0          180   000+2   000+2
 1943         * POP (5)
 1944                MA    LPHAAA,X2         * ADD -5 TO STACK POINTER              7  7076  # 33P 094          180  8337     094
 1945                BCE   LIDAAA,5&X2,      * JUMP TO BOTTOM OF WHILE              8  7083  B B3Z 0!5          180  7239     005+2
 1946         ***************************************
 1947         * BEGIN [BLOCK ENDING AT LJDAAA]
1                                                                                                         PAGE   38
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 1948         * FUNCTION CALL PUTCHAR((*(S++)))
 1949         * PUSH (5)
 1950                MA    LMHAAA,X2         * ADD 5 TO STACK POINTER               7  7091  # 44O 094          181  8446     094
 1951         * DEREFERENCEEXPRESSION (*(S++))
 1952         * POSTINCREMENT (S++)
 1953         * PUSH (@I9G@:3)
 1954                MA    LLHAAA,X2         * ADD 3 TO STACK POINTER               7  7098  # 43O 094          181  8436     094
 1955                LCA   LSHAAA,0&X2       * LOAD DATA @I9G@ IN STACK             7  7105  L 35! 0!0          181  8350     000+2
 1956                MA    X3,0&X2           * ADD X3 TO STACK                      7  7112  # 099 0!0          181   099     000+2
 1957         * POP (X1:3)
 1958                LCA   0&X2,X1           * LOAD STACK IN X1                     7  7119  L 0!0 089          181   000+2   089
 1959                MA    LSHAAA,X2         * ADD -3 TO STACK POINTER              7  7126  # 35! 094          182  8350     094
 1960         * PUSH (0+X1:3)
 1961                MA    LLHAAA,X2         * ADD 3 TO STACK POINTER               7  7133  # 43O 094          182  8436     094
 1962                LCA   0&X1,0&X2         * LOAD MEMORY 0&X1 IN STACK            7  7140  L 0'0 0!0          182   000+1   000+2
 1963                MA    LYHAAA,0&X1       * POSTINCREMENT POINTER AT X1          7  7147  # 43R 0'0          182  8439     000+1
 1964         * POP (X1:3)
 1965                LCA   0&X2,X1           * LOAD STACK IN X1                     7  7154  L 0!0 089          182   000+2   089
 1966                MA    LSHAAA,X2         * ADD -3 TO STACK POINTER              7  7161  # 35! 094          183  8350     094
 1967         * PUSH (0+X1:1)
 1968                MA    LYHAAA,X2         * ADD 1 TO STACK POINTER               7  7168  # 43R 094          183  8439     094
 1969                LCA   0&X1,0&X2         * LOAD MEMORY 0&X1 IN STACK            7  7175  L 0'0 0!0          183   000+1   000+2
 1970         * END DEREFERENCEEXPRESSION (*(S++))
 1971         * CREATE A STACK FRAME WITH X3 POINTER TO IT
 1972         * PUSH (X3:3)
 1973                MA    LLHAAA,X2         * ADD 3 TO STACK POINTER               7  7182  # 43O 094          183  8436     094
 1974                LCA   X3,0&X2           * LOAD X3 IN STACK                     7  7189  L 099 0!0          183   099     000+2
 1975                MCW   X2,X3             * MOVE X2 IN X3                        7  7196  M 094 099          184   094     099
 1976                B     LWCAAA            * JUMP TO FUNCTION PUTCHAR             4  7203  B J8/              184  6181
 1977         * POP (X3:3)
 1978                LCA   0&X2,X3           * LOAD STACK IN X3                     7  7207  L 0!0 099          184   000+2   099
 1979                MA    LSHAAA,X2         * ADD -3 TO STACK POINTER              7  7214  # 35! 094          184  8350     094
 1980         * POP (1)
 1981                MA    LBIAAA,X2         * ADD -1 TO STACK POINTER              7  7221  # ### 094          184   ###     094
 1982         * POP (5)
 1983                MA    LPHAAA,X2         * ADD -5 TO STACK POINTER              7  7228  # 33P 094          184  8337     094
 1984         * END FUNCTION CALL PUTCHAR((*(S++)))
 1985         * END [BLOCK ENDING AT LJDAAA]
 1986         ***************************************
 1987         LJDAAA B     LKDAAA            * JUMP TO TOP OF WHILE                 4  7235  B R6S              185  6962
 1988         * END WHILE [WHILE (((*S) != '\0')) [BLOCK ENDING AT LJDAAA] TOP:LKDAAA BOT
 1989         * POP (3)
 1990         LIDAAA MA    LSHAAA,X2         * ADD -3 TO STACK POINTER              7  7239  # 35! 094          185  8350     094
 1991         * END [BLOCK ENDING AT LIDAAA]
 1992         ***************************************
 1993                LCA   3&X3,X1           * LOAD RETURN ADDRESS IN X1            7  7246  L 0?3 089          185   003+3   089
 1994                B     0&X1              * JUMP BACK TO CALLER IN X1            4  7253  B 0'0              185   000+1
 1995         ***************************************************************************
 1996         * END FUNCTION : PUTS
 1997         ***************************************************************************
1                                                                                                         PAGE   39
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 1998         ***************************************************************************
 1999         * FUNCTION : STRCPY
 2000         ***************************************************************************
 2001         LJAAAA SBR   3&X3              * SAVE RETURN ADDRESS IN REGISTER      4  7257  H 0?3              185   003+3
 2002         * SET THE RIGHT WM AND CLEAR THE WRONG ONES
 2003                SW    1&X3              * SET WM AT 1&X3                       4  7261  , 0?1              185   001+3
 2004                CW    2&X3              * CLEAR WM AT 2&X3                     4  7265  ) 0?2              185   002+3
 2005                CW    3&X3              * CLEAR WM AT 3&X3                     4  7269  ) 0?3              186   003+3
 2006         ***************************************
 2007         * BEGIN [BLOCK ENDING AT LKAAAA]
 2008         * PUSH (3)
 2009                MA    LLHAAA,X2         * ADD 3 TO STACK POINTER               7  7273  # 43O 094          186  8436     094
 2010         * WHILE [WHILE ((((*(DEST++)) = (*(SRC++))) != '\0')) [] TOP:LLAAAA BOTTOM:
 2011         * NOTEQUAL (!=) (((*(DEST++)) = (*(SRC++))) != '\0')
 2012         * DEREFERENCEEXPRESSION (*(SRC++))
 2013         * POSTINCREMENT (SRC++)
 2014         * PUSH (@I9D@:3)
 2015         LLAAAA MA    LLHAAA,X2         * ADD 3 TO STACK POINTER               7  7280  # 43O 094          186  8436     094
 2016                LCA   LDJAAA,0&X2       * LOAD DATA @I9D@ IN STACK             7  7287  L 41P 0!0          186  8417     000+2
 2017                MA    X3,0&X2           * ADD X3 TO STACK                      7  7294  # 099 0!0          186   099     000+2
 2018         * POP (X1:3)
 2019                LCA   0&X2,X1           * LOAD STACK IN X1                     7  7301  L 0!0 089          186   000+2   089
 2020                MA    LSHAAA,X2         * ADD -3 TO STACK POINTER              7  7308  # 35! 094          187  8350     094
 2021         * PUSH (0+X1:3)
 2022                MA    LLHAAA,X2         * ADD 3 TO STACK POINTER               7  7315  # 43O 094          187  8436     094
 2023                LCA   0&X1,0&X2         * LOAD MEMORY 0&X1 IN STACK            7  7322  L 0'0 0!0          187   000+1   000+2
 2024                MA    LYHAAA,0&X1       * POSTINCREMENT POINTER AT X1          7  7329  # 43R 0'0          187  8439     000+1
 2025         * POP (X1:3)
 2026                LCA   0&X2,X1           * LOAD STACK IN X1                     7  7336  L 0!0 089          187   000+2   089
 2027                MA    LSHAAA,X2         * ADD -3 TO STACK POINTER              7  7343  # 35! 094          188  8350     094
 2028         * PUSH (0+X1:1)
 2029                MA    LYHAAA,X2         * ADD 1 TO STACK POINTER               7  7350  # 43R 094          188  8439     094
 2030                LCA   0&X1,0&X2         * LOAD MEMORY 0&X1 IN STACK            7  7357  L 0'0 0!0          188   000+1   000+2
 2031         * END DEREFERENCEEXPRESSION (*(SRC++))
 2032         * POSTINCREMENT (DEST++)
 2033         * PUSH (@I9G@:3)
 2034                MA    LLHAAA,X2         * ADD 3 TO STACK POINTER               7  7364  # 43O 094          188  8436     094
 2035                LCA   LSHAAA,0&X2       * LOAD DATA @I9G@ IN STACK             7  7371  L 35! 0!0          188  8350     000+2
 2036                MA    X3,0&X2           * ADD X3 TO STACK                      7  7378  # 099 0!0          189   099     000+2
 2037         * POP (X1:3)
 2038                LCA   0&X2,X1           * LOAD STACK IN X1                     7  7385  L 0!0 089          189   000+2   089
 2039                MA    LSHAAA,X2         * ADD -3 TO STACK POINTER              7  7392  # 35! 094          189  8350     094
 2040         * PUSH (0+X1:3)
 2041                MA    LLHAAA,X2         * ADD 3 TO STACK POINTER               7  7399  # 43O 094          189  8436     094
 2042                LCA   0&X1,0&X2         * LOAD MEMORY 0&X1 IN STACK            7  7406  L 0'0 0!0          189   000+1   000+2
 2043                MA    LYHAAA,0&X1       * POSTINCREMENT POINTER AT X1          7  7413  # 43R 0'0          190  8439     000+1
 2044         * ASSIGNMENT ((*(DEST++)) = (*(SRC++)))
 2045         * POP (X1:3)
 2046                LCA   0&X2,X1           * LOAD STACK IN X1                     7  7420  L 0!0 089          190   000+2   089
 2047                MA    LSHAAA,X2         * ADD -3 TO STACK POINTER              7  7427  # 35! 094          190  8350     094
1                                                                                                         PAGE   40
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 2048                LCA   0&X2,0&X1         * LOAD STACK IN MEMORY X1              7  7434  L 0!0 0'0          190   000+2   000+1
 2049         * END ASSIGNMENT ((*(DEST++)) = (*(SRC++)))
 2050         * CONSTANT ('\0' : EOS)
 2051         * PUSH (EOS:1)
 2052                MA    LYHAAA,X2         * ADD 1 TO STACK POINTER               7  7441  # 43R 094          190  8439     094
 2053                LCA   EOS,0&X2          * LOAD MEMORY EOS IN STACK             7  7448  L 345 0!0          191   345     000+2
 2054                C     0&X2,15999&X2     * COMPARE STACK TO STACK AT -1         7  7455  C 0!0 IRI          191   000+2 15999+2
 2055         * POP (1)
 2056                MA    LBIAAA,X2         * ADD -1 TO STACK POINTER              7  7462  # ### 094          191   ###     094
 2057         * POP (1)
 2058                MA    LBIAAA,X2         * ADD -1 TO STACK POINTER              7  7469  # ### 094          191   ###     094
 2059         * PUSH (@00001@:5)
 2060                MA    LMHAAA,X2         * ADD 5 TO STACK POINTER               7  7476  # 44O 094          191  8446     094
 2061                LCA   LUHAAA,0&X2       * LOAD DATA @00001@ IN STACK           7  7483  L 38M 0!0          192  8384     000+2
 2062                BE    LHHAAA            * JUMP IF EQUAL                        5  7490  B D9Z S            192  7499
 2063                B     LIHAAA            * JUMP TO END                          4  7495  B E0W              192  7506
 2064         LHHAAA MCW   LXHAAA,0&X2       * MOVE 0 IN STACK                      7  7499  M 40O 0!0          192  8406     000+2
 2065         LIHAAA MCS   0&X2,0&X2         * CLEAR WM IN STACK                    7  7506  Z 0!0 0!0          192   000+2   000+2
 2066         * POP (5)
 2067                MA    LPHAAA,X2         * ADD -5 TO STACK POINTER              7  7513  # 33P 094          192  8337     094
 2068                BCE   LKAAAA,5&X2,      * JUMP TO BOTTOM OF WHILE              8  7520  B E3S 0!5          193  7532     005+2
 2069                B     LLAAAA            * JUMP TO TOP OF WHILE                 4  7528  B B8'              193  7280
 2070         * END WHILE [WHILE ((((*(DEST++)) = (*(SRC++))) != '\0')) [] TOP:LLAAAA BOT
 2071         * POP (3)
 2072         LKAAAA MA    LSHAAA,X2         * ADD -3 TO STACK POINTER              7  7532  # 35! 094          193  8350     094
 2073         * END [BLOCK ENDING AT LKAAAA]
 2074         ***************************************
 2075                LCA   3&X3,X1           * LOAD RETURN ADDRESS IN X1            7  7539  L 0?3 089          193   003+3   089
 2076                B     0&X1              * JUMP BACK TO CALLER IN X1            4  7546  B 0'0              193   000+1
 2077         ***************************************************************************
 2078         * END FUNCTION : STRCPY
 2079         ***************************************************************************
 2080         ***************************************************************************
 2081         * FUNCTION : STRLEN
 2082         ***************************************************************************
 2083         LFAAAA SBR   3&X3              * SAVE RETURN ADDRESS IN REGISTER      4  7550  H 0?3              193   003+3
 2084         * SET THE RIGHT WM AND CLEAR THE WRONG ONES
 2085                SW    1&X3              * SET WM AT 1&X3                       4  7554  , 0?1              193   001+3
 2086                CW    2&X3              * CLEAR WM AT 2&X3                     4  7558  ) 0?2              194   002+3
 2087                CW    3&X3              * CLEAR WM AT 3&X3                     4  7562  ) 0?3              194   003+3
 2088         ***************************************
 2089         * BEGIN [BLOCK ENDING AT LGAAAA]
 2090         * LEN SIZE:5 OFFSET:3
 2091                LCA   LEJAAA,8&X3       * LOAD INT -1 INTO MEMORY 8&X3         7  7566  L 33J 0?8          194  8331     008+3
 2092         * PUSH (8)
 2093                MA    LEIAAA,X2         * ADD 8 TO STACK POINTER               7  7573  # 36O 094          194  8366     094
 2094         * WHILE [WHILE (((STR[(++LEN)]) != '\0')) [] TOP:LHAAAA BOTTOM:LIAAAA]
 2095         * NOTEQUAL (!=) ((STR[(++LEN)]) != '\0')
 2096         * SUBSCRIPT (STR[(++LEN)])
 2097         * PARAMETER VARIABLE (STR : 15997+X3)
1                                                                                                         PAGE   41
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 2098         * PUSH (15997+X3:3)
 2099         LHAAAA MA    LLHAAA,X2         * ADD 3 TO STACK POINTER               7  7580  # 43O 094          194  8436     094
 2100                LCA   15997&X3,0&X2     * LOAD MEMORY 15997&X3 IN STACK        7  7587  L IIG 0!0          194 15997+3   000+2
 2101         * PREINCREMENT((++LEN)
 2102         * PUSH (@008@:3)
 2103                MA    LLHAAA,X2         * ADD 3 TO STACK POINTER               7  7594  # 43O 094          195  8436     094
 2104                LCA   LEIAAA,0&X2       * LOAD DATA @008@ IN STACK             7  7601  L 36O 0!0          195  8366     000+2
 2105                MA    X3,0&X2           * ADD X3 TO STACK                      7  7608  # 099 0!0          195   099     000+2
 2106         * POP (X1:3)
 2107                LCA   0&X2,X1           * LOAD STACK IN X1                     7  7615  L 0!0 089          195   000+2   089
 2108                MA    LSHAAA,X2         * ADD -3 TO STACK POINTER              7  7622  # 35! 094          195  8350     094
 2109                A     LUHAAA,0&X1       * PREINCREMENT MEMORY AT X1            7  7629  A 38M 0'0          196  8384     000+1
 2110         * PUSH (0+X1:5)
 2111                MA    LMHAAA,X2         * ADD 5 TO STACK POINTER               7  7636  # 44O 094          196  8446     094
 2112                LCA   0&X1,0&X2         * LOAD MEMORY 0&X1 IN STACK            7  7643  L 0'0 0!0          196   000+1   000+2
 2113         * PUT RAW INDEX ON THE STACK
 2114         * PUSH (@00001@:5)
 2115                MA    LMHAAA,X2         * ADD 5 TO STACK POINTER               7  7650  # 44O 094          196  8446     094
 2116                LCA   LUHAAA,0&X2       * LOAD DATA @00001@ IN STACK           7  7657  L 38M 0!0          196  8384     000+2
 2117                M     15995&X2,6&X2     * MULTIPLY STACK AT -5 TO STACK AT     7  7664  @ IRE 0!6          197 15995+2   006+2
 2118                SW    2&X2              * SET WM IN STACK AT 2                 4  7671  , 0!2              197   002+2
 2119                LCA   6&X2,15995&X2     * LOAD STACK AT 6 IN STACK AT -5       7  7675  L 0!6 IRE          197   006+2 15995+2
 2120         * POP (5)
 2121                MA    LPHAAA,X2         * ADD -5 TO STACK POINTER              7  7682  # 33P 094          197  8337     094
 2122         * STACK TOP IS NOW ARRAY INDEX
 2123                B     NMNPTR            * JUMP TO SNIPPET NUMBER_TO_POINTE     4  7689  B ###              197   ###
 2124                MA    0&X2,15997&X2     * ADD STACK TO STACK AT -3             7  7693  # 0!0 IRG          197   000+2 15997+2
 2125         * POP (3)
 2126                MA    LSHAAA,X2         * ADD -3 TO STACK POINTER              7  7700  # 35! 094          198  8350     094
 2127         * STACK TOP IS LOCATION IN ARRAY NOW
 2128         * END SUBSCRIPT (STR[(++LEN)])
 2129         * POP (X1:3)
 2130                LCA   0&X2,X1           * LOAD STACK IN X1                     7  7707  L 0!0 089          198   000+2   089
 2131                MA    LSHAAA,X2         * ADD -3 TO STACK POINTER              7  7714  # 35! 094          198  8350     094
 2132         * PUSH (0+X1:1)
 2133                MA    LYHAAA,X2         * ADD 1 TO STACK POINTER               7  7721  # 43R 094          198  8439     094
 2134                LCA   0&X1,0&X2         * LOAD MEMORY 0&X1 IN STACK            7  7728  L 0'0 0!0          198   000+1   000+2
 2135         * CONSTANT ('\0' : EOS)
 2136         * PUSH (EOS:1)
 2137                MA    LYHAAA,X2         * ADD 1 TO STACK POINTER               7  7735  # 43R 094          199  8439     094
 2138                LCA   EOS,0&X2          * LOAD MEMORY EOS IN STACK             7  7742  L 345 0!0          199   345     000+2
 2139                C     0&X2,15999&X2     * COMPARE STACK TO STACK AT -1         7  7749  C 0!0 IRI          199   000+2 15999+2
 2140         * POP (1)
 2141                MA    LBIAAA,X2         * ADD -1 TO STACK POINTER              7  7756  # ### 094          199   ###     094
 2142         * POP (1)
 2143                MA    LBIAAA,X2         * ADD -1 TO STACK POINTER              7  7763  # ### 094          199   ###     094
 2144         * PUSH (@00001@:5)
 2145                MA    LMHAAA,X2         * ADD 5 TO STACK POINTER               7  7770  # 44O 094          200  8446     094
 2146                LCA   LUHAAA,0&X2       * LOAD DATA @00001@ IN STACK           7  7777  L 38M 0!0          200  8384     000+2
 2147                BE    LJHAAA            * JUMP IF EQUAL                        5  7784  B G9T S            200  7793
1                                                                                                         PAGE   42
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 2148                B     LKHAAA            * JUMP TO END                          4  7789  B H0'              200  7800
 2149         LJHAAA MCW   LXHAAA,0&X2       * MOVE 0 IN STACK                      7  7793  M 40O 0!0          200  8406     000+2
 2150         LKHAAA MCS   0&X2,0&X2         * CLEAR WM IN STACK                    7  7800  Z 0!0 0!0          200   000+2   000+2
 2151         * POP (5)
 2152                MA    LPHAAA,X2         * ADD -5 TO STACK POINTER              7  7807  # 33P 094          201  8337     094
 2153                BCE   LIAAAA,5&X2,      * JUMP TO BOTTOM OF WHILE              8  7814  B H2W 0!5          201  7826     005+2
 2154                B     LHAAAA            * JUMP TO TOP OF WHILE                 4  7822  B E8'              201  7580
 2155         * END WHILE [WHILE (((STR[(++LEN)]) != '\0')) [] TOP:LHAAAA BOTTOM:LIAAAA]
 2156         * PUT ON STACK RETURN VALUE (LEN)
 2157         * LOCAL VARIABLE (LEN : 8+X3)
 2158         * PUSH (8+X3:5)
 2159         LIAAAA MA    LMHAAA,X2         * ADD 5 TO STACK POINTER               7  7826  # 44O 094          201  8446     094
 2160                LCA   8&X3,0&X2         * LOAD MEMORY 8&X3 IN STACK            7  7833  L 0?8 0!0          201   008+3   000+2
 2161         * POP (15994+X3:5)
 2162                LCA   0&X2,15994&X3     * LOAD STACK IN 15994&X3               7  7840  L 0!0 IID          202   000+2 15994+3
 2163                MA    LPHAAA,X2         * ADD -5 TO STACK POINTER              7  7847  # 33P 094          202  8337     094
 2164         * POP (8)
 2165         LGAAAA MA    LAIAAA,X2         * ADD -8 TO STACK POINTER              7  7854  # 41M 094          202  8414     094
 2166         * END [BLOCK ENDING AT LGAAAA]
 2167         ***************************************
 2168                LCA   3&X3,X1           * LOAD RETURN ADDRESS IN X1            7  7861  L 0?3 089          202   003+3   089
 2169                B     0&X1              * JUMP BACK TO CALLER IN X1            4  7868  B 0'0              202   000+1
 2170         ***************************************************************************
 2171         * END FUNCTION : STRLEN
 2172         ***************************************************************************
 2173 ** ***  ************************************************************* CAST NUMBER T
 2174 *  CAS  TS A 5-IT NU MBER TO A 3-DIGIT ADDRESS* MAKE A COPY OF THE TOP OF                          MACRO
 2175         *  IT NU  UNKNOWN                                                                          MACRO       MACRO ERROR
 2176                LCA   0&X2,3&X2                                                7  7872  L 0!0 0!3          202   000+2   003+2
 2177                CW    15998&X2                                                 4  7879  ) IRH              203 15998+2
 2178 *  ZER  O OUT TZONE  BITS OF OUR COPY               MZ   @0@,3&X2                                  MACRO
 2179         *  ZONE   UNKNOWN                                                                          MACRO       MACRO ERROR
 2180                MZ    @0@,2&X2                                                 7  7883  Y 44R 0!2          203  8449     002+2
 2181                MZ    @0@,1&X2                                                 7  7890  Y 44R 0!1          203  8449     001+2
 2182 *  SET   THE LORDER  DIGIT'S ZONE BITS               C    @04000@,0&X2                             MACRO
 2183         *  RDER   UNKNOWN                                                                          MACRO       MACRO ERROR
 2184                BL    NPHIGH                                                   5  7897  B ### T            203   ###
 2185                C     @08000@,0&X2                                             7  7902  C 45M 0!0          203  8454     000+2
 2186                BL    NPLOZ                                                    5  7909  B I6S T            203  7962
 2187                C     @12000@,0&X2                                             7  7914  C 45R 0!0          204  8459     000+2
 2188                BL    NPLZO                                                    5  7921  B I4U T            204  7944
 2189                S     @12000@,0&X2                                             7  7926  S 46M 0!0          204  8464     000+2
 2190                MZ    @A@,3&X2                                                 7  7933  Y 46N 0!3          204  8465     003+2
 2191                B     NPHIGH                                                   4  7940  B ###              204   ###
 2192         NPLZO  S     @08000@,0&X2                                             7  7944  S 47! 0!0          204  8470     000+2
 2193                MZ    @I@,3&X2                                                 7  7951  Y 47J 0!3          205  8471     003+2
 2194                B     NPHIGH                                                   4  7958  B ###              205   ###
 2195         NPLOZ  S     @04000@,0&X2                                             7  7962  S 47O 0!0          205  8476     000+2
 2196                MZ    @S@,3&X2                                                 7  7969  Y 47P 0!3          205  8477     003+2
 2197 *  FOR   SOME RON TH E ZONE BITS GET SET - IT STILL WORKS THOUGH.     NPH                          MACRO
1                                                                                                         PAGE   43
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 2198         *  ON TH  UNKNOWN                                                                          MACRO       MACRO ERROR
 2199                BL    NMPTRE                                                   5  7976  B 03M T            205  8034
 2200                C     @02000@,0&X2                                             7  7981  C 48K 0!0          205  8482     000+2
 2201                BL    NPHOZ                                                    5  7988  B 02P T            206  8027
 2202                C     @03000@,0&X2                                             7  7993  C 48P 0!0          206  8487     000+2
 2203                BL    NPHZO                                                    5  8000  B 01O T            206  8016
 2204                MZ    @A@,1&X2                                                 7  8005  Y 46N 0!1          206  8465     001+2
 2205                B     NMPTRE                                                   4  8012  B 03M              206  8034
 2206         NPHZO  MZ    @I@,1&X2                                                 7  8016  Y 47J 0!1          206  8471     001+2
 2207                B     NMPTRE                                                   4  8023  B 03M              206  8034
 2208         NPHOZ  MZ    @S@,1&X2                                                 7  8027  Y 47P 0!1          207  8477     001+2
 2209         NMPTRE LCA   3&X2,15998&X2                                            7  8034  L 0!3 IRH          207   003+2 15998+2
 2210                SBR   X2,15998&X2                                              7  8041  H 094 IRH          207   094   15998+2
 2211                B     0&X1                                                     4  8048  B 0'0              207   000+1
 2212 ** ***  ***************************************************************************
      ** ***  ** Junk after the label, or in CC 12-15                                                    WARN 
      ** ***  ** Previous OP code not pseudo op                                                          ERROR
      ** ***  ** Previous OP code not DA                                                                 ERROR
 2214                SBR   X2,15995&X2                                              7  8052  H 094 IRE          207   094   15995+2
      ** ***  ** Junk after the label, or in CC 12-15                                                    WARN 
      ** ***  ** Previous OP code not pseudo op                                                          ERROR
      ** ***  ** Previous OP code not DA                                                                 ERROR
 2216                SBR   X2,15995&X2                                              7  8059  H 094 IRE          207   094   15995+2
 2217                B     *&17              * BRANCH 17 PLACES DOWN?               4  8066  B 08O              208  8086
 2218                DCW   @00000@                                                  5  8074                     208
 2219                DC    @00000000000@                                           11  8085                     208
 2220                ZA    CDIV2,*-7         * PUT DIVIDEND INTO WORKING BL         7  8086  ? ### 08N          208   ###    8085
 2221                D     CDIV1,*-19        * DIVIDE                               7  8093  % ### 08!          208   ###    8080
 2222                MZ    *-22,*-21         * KILL THE ZONE BIT                    7  8100  Y 08M 08N          209  8084    8085
 2223                MZ    *-29,*-34         * KILL THE ZONE BIT                    7  8107  Y 08M 07R          209  8084    8079
 2224                MCW   *-41,CDIV3        * PICK UP ANSWER                       7  8114  M 07R ###          209  8079     ###
 2225                SW    *-44              * SO I CAN PICKUP REMAINDER            4  8121  , 08!              209  8080
 2226                MCW   *-46,CDIV4        * GET REMAINDER                        7  8125  M 08N ###          209  8085     ###
 2227                CW    *-55              * CLEAR THE WM                         4  8132  ) 08!              209  8080
 2228                MZ    CDIV3-1,CDIV3     * CLEANUP QUOTIENT BITZONE             7  8136  Y ### ###          210   ###     ###
 2229                MZ    CDIV4-1,CDIV4     * CLEANUP REMAINDER BITZONE            7  8143  Y ### ###          210   ###     ###
      ** ***  ** Junk after the label, or in CC 12-15                                                    WARN 
 2230 *  PUS  H REMAIR                SBR  X2,5&X2                                  1  8150  #                  210  LABEL
 2231                SW    15996&X2                                                 4  8151  , IRF              210 15996+2
 2232                MCW   CDIV4,0&X2                                               7  8155  M ### 0!0          210   ###     000+2
      ** ***  ** Junk after the label, or in CC 12-15                                                    WARN 
      ** ***  ** Previous OP code not pseudo op                                                          ERROR
      ** ***  ** Previous OP code not DA                                                                 ERROR
 2234                SW    15996&X2                                                 4  8162  , IRF              210 15996+2
 2235                MCW   CDIV3,0&X2                                               7  8166  M ### 0!0          210   ###     000+2
 2236 *  JUM  P BACK  DIVE ND    B    000                                                                MACRO
 2237         *   DIVE  UNKNOWN                                                                          MACRO       MACRO ERROR
 2238 *  DIV  ISOR   DIV1      DCW  00000                                                                MACRO
 2239         *  DIV1   UNKNOWN                                                                          MACRO       MACRO ERROR
 2240 *  DIV  IDEND  CDIV2      DCW  00000                                                               MACRO
1                                                                                                         PAGE   44
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 2241         *  CDIV2  UNKNOWN                                                                          MACRO       MACRO ERROR
 2242 *  QUO  TIENT  CDIV3      DCW  00000                                                               MACRO
 2243         *  CDIV3  UNKNOWN                                                                          MACRO       MACRO ERROR
 2244 *  REM  AINDER  CDIV 4     DCW  00000                                                              MACRO
 2245         *   CDIV  UNKNOWN                                                                          MACRO       MACRO ERROR
 2246 ** ***  ***************************************************************************
 2247 *  CAS  TS A 3-IT AD DRESS TO A 5-DIGIT NUMBER* MAKE ROOM ON THE STACK FO                          MACRO
 2248         *  IT AD  UNKNOWN                                                                          MACRO       MACRO ERROR
 2249 *  MAK  E A COPF THE  TOP OF THE STACK               LCA  15998&X2,3&X2                            MACRO
 2250         *  F THE  UNKNOWN                                                                          MACRO       MACRO ERROR
 2251 *  NOW   ZERO OTHE T OP OF THE STACK               LCA  @00000@,0&X2                               MACRO
 2252         *  THE T  UNKNOWN                                                                          MACRO       MACRO ERROR
 2253 *  NOW   COPY B, SHI FTED OVER 2 DIGITS               MCW  3&X2,0&X2                               MACRO
 2254         *  , SHI  UNKNOWN                                                                          MACRO       MACRO ERROR
 2255 *  NOW   ZERO OTHE Z ONE BITS ON THE STACK               MZ   @0@,0&X2                             MACRO
 2256         *  THE Z  UNKNOWN                                                                          MACRO       MACRO ERROR
 2257                MZ    @0@,15999&X2                                             7  8173  Y 44R IRI          211  8449   15999+2
 2258                MZ    @0@,15998&X2                                             7  8180  Y 44R IRH          211  8449   15998+2
 2259 *  CHE  CK THE H-ORD ER DIGIT'S ZONE BITS               BWZ  PNHOZ,1&X2,S                          MACRO
 2260         *  H-ORD  UNKNOWN                                                                          MACRO       MACRO ERROR
 2261                BWZ   PNHZO,1&X2,K                                             8  8187  V 21Q 0!1 K        211  8218     001+2
 2262                BWZ   PNHOO,1&X2,B                                             8  8195  V 22R 0!1 B        211  8229     001+2
 2263                B     PNLOW                                                    4  8203  B 23O              211  8236
 2264         PNHOZ  A     @01000@,0&X2                                             7  8207  A 49K 0!0          212  8492     000+2
 2265                B     PNLOW                                                    4  8214  B 23O              212  8236
 2266         PNHZO  A     @02000@,0&X2                                             7  8218  A 49P 0!0          212  8497     000+2
 2267                B     PNLOW                                                    4  8225  B 23O              212  8236
 2268         PNHOO  A     @03000@,0&X2                                             7  8229  A 50K 0!0          212  8502     000+2
 2269         PNLOW  BWZ   PNLOZ,3&X2,S                                             8  8236  V 26M 0!3 S        212  8264     003+2
 2270                BWZ   PNLZO,3&X2,K                                             8  8244  V 27N 0!3 K        213  8275     003+2
 2271                BWZ   PNLOO,3&X2,B                                             8  8252  V 28O 0!3 B        213  8286     003+2
 2272                B     PTRNME                                                   4  8260  B 29L              213  8293
 2273         PNLOZ  A     @04000@,0&X2                                             7  8264  A 50P 0!0          213  8507     000+2
 2274                B     PTRNME                                                   4  8271  B 29L              213  8293
 2275         PNLZO  A     @08000@,0&X2                                             7  8275  A 51K 0!0          213  8512     000+2
 2276                B     PTRNME                                                   4  8282  B 29L              214  8293
 2277         PNLOO  A     @12000@,0&X2                                             7  8286  A 51P 0!0          214  8517     000+2
 2278         PTRNME B     0&X1                                                     4  8293  B 0'0              214   000+1
 2279 ** ***  ***************************************************************************
 2280 *  DO   NOTHING EITH ER NO ZONE BITS OR ONLY A B ZONE BIT               B                          MACRO
 2281         *   EITH  UNKNOWN                                                                          MACRO       MACRO ERROR
 2282                BWZ   CLNNME,0&X2,K                                            8  8297  V 30N 0!0 K        214  8305     000+2
 2283 *  ELS  E CLEARE ZON E BITS, AS IT IS POSITIVE               MZ   @,@,0&X                          MACRO
 2284         *  E ZON  UNKNOWN                                                                          MACRO       MACRO ERROR
 2285         CLNNME B     0&X1                                                     4  8305  B 0'0              214   000+1
 2286 ** ***  ***********************************************************     LBIAAA    D
 2287         LNHAAA DCW   @100000@                                                 6  8314                     214
 2288         LXIAAA DCW   @I8I@                                                    3  8317                     214
 2289         LIIAAA DCW   @'31@                                                    3  8320                     215
 2290         LLIAAA DCW   @'53@                                                    3  8323                     215
1                                                                                                         PAGE   45
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 2291         LJIAAA DCW   @'41@                                                    3  8326                     215
 2292         LEJAAA DCW   @0000J@                                                  5  8331                     215
 2293         LUIAAA DCW   @I9C@                                                    3  8334                     215
 2294         LPHAAA DCW   @I9E@                                                    3  8337                     215
 2295         LTHAAA DCW   @'05@                                                    3  8340                     215
 2296         LAJAAA DCW   @'27@                                                    3  8343                     216
 2297         LQIAAA DCW   @S@                                                      1  8344                     216
 2298         LWIAAA DCW   @010@                                                    3  8347                     216
 2299         LSHAAA DCW   @I9G@                                                    3  8350                     216
 2300         LKIAAA DCW   @'47@                                                    3  8353                     216
 2301         LCIAAA DCW   @0@                                                      1  8354                     216
 2302         LCJAAA DCW   @333@                                                    3  8357                     216
 2303         LVHAAA DCW   @014@                                                    3  8360                     217
 2304         LTIAAA DCW   @012@                                                    3  8363                     217
 2305         LEIAAA DCW   @008@                                                    3  8366                     217
 2306         LWHAAA DCW   @006@                                                    3  8369                     217
 2307         LHIAAA DCW   @00005@                                                  5  8374                     217
 2308         LQHAAA DCW   @00019@                                                  5  8379                     217
 2309         LUHAAA DCW   @00001@                                                  5  8384                     217
 2310         LFIAAA DCW   @00100@                                                  5  8389                     218
 2311         LPIAAA DCW   @C@                                                      1  8390                     218
 2312         LGIAAA DCW   @00003@                                                  5  8395                     218
 2313         LOHAAA DCW   @00042@                                                  5  8400                     218
 2314         LZIAAA DCW   @ @                                                      1  8401                     218
 2315         LXHAAA DCW   @00000@                                                  5  8406                     218
 2316         LSIAAA DCW   @00010@                                                  5  8411                     218
 2317         LAIAAA DCW   @I9B@                                                    3  8414                     219
 2318         LDJAAA DCW   @I9D@                                                    3  8417                     219
 2319         LMIAAA DCW   @011@                                                    3  8420                     219
 2320         LRHAAA DCW   @'04@                                                    3  8423                     219
 2321         LDIAAA DCW   @I8F@                                                    3  8426                     219
 2322         LYIAAA DCW   @'24@                                                    3  8429                     219
 2323         LVIAAA DCW   @P@                                                      1  8430                     219
 2324         LBJAAA DCW   @201@                                                    3  8433                     220
 2325         LLHAAA DCW   @003@                                                    3  8436                     220
 2326         LYHAAA DCW   @001@                                                    3  8439                     220
 2327         LZHAAA DCW   @-@                                                      1  8440                     220
 2328         LNIAAA DCW   @007@                                                    3  8443                     220
 2329         LMHAAA DCW   @005@                                                    3  8446                     220
 2330         LOIAAA DCW   @%@                                                      1  8447                     220
 2331         LRIAAA DCW   @D@                                                      1  8448                     221
                     DCW   @0@                                                      1  8449              LIT    221
                     DCW   @08000@                                                  5  8454              LIT    221
                     DCW   @12000@                                                  5  8459              LIT    221
                     DCW   @12000@                                                  5  8464              LIT    221
                     DCW   @A@                                                      1  8465              LIT    221
                     DCW   @08000@                                                  5  8470              LIT    221
                     DCW   @I@                                                      1  8471              LIT    222
                     DCW   @04000@                                                  5  8476              LIT    222
                     DCW   @S@                                                      1  8477              LIT    222
1                                                                                                         PAGE   46
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

                     DCW   @02000@                                                  5  8482              LIT    222
                     DCW   @03000@                                                  5  8487              LIT    222
                     DCW   @01000@                                                  5  8492              LIT    222
                     DCW   @02000@                                                  5  8497              LIT    222
                     DCW   @03000@                                                  5  8502              LIT    223
                     DCW   @04000@                                                  5  8507              LIT    223
                     DCW   @08000@                                                  5  8512              LIT    223
                     DCW   @12000@                                                  5  8517              LIT    223
 2332                END   START             * END OF PROGRAM CODE.                          / '57 080               1057
1                                                                                                         PAGE   47
0SYMBOL   ADDRESS    SYMBOL   ADDRESS    SYMBOL   ADDRESS    SYMBOL   ADDRESS    SYMBOL   ADDRESS    SYMBOL   ADDRESS

 CDIV1   UNDEF:##    CDIV2   UNDEF:##    CDIV3   UNDEF:##    CDIV4   UNDEF:##    CLNNME   8305: 0    CLNNMN  UNDEF:##   
 EOL      0346: 0    EOS      0345: 0    H REMA   8150: 0    LABAAA   1657: 0    LADAAA   6590: 0    LAEAAA   3865: 0   
 LAGAAA   2867: 0    LAHAAA   6283: 0    LAIAAA   8414: 0    LAJAAA   8343: 0    LBAAAA   1076: 0    LBDAAA   6400: 0   
 LBEAAA   6163: 0    LBGAAA   3175: 0    LBHAAA   6470: 0    LBIAAA  UNDEF:##    LBJAAA   8433: 0    LCAAAA   1275: 0   
 LCDAAA   6594: 0    LCEAAA   6159: 0    LCGAAA   3182: 0    LCHAAA   6477: 0    LCIAAA   8354: 0    LCJAAA   8357: 0   
 LDBAAA   1661: 0    LDEAAA   4374: 0    LDFAAA   2708: 0    LDGAAA   3008: 0    LDHAAA   6779: 0    LDIAAA   8426: 0   
 LDJAAA   8417: 0    LEDAAA   6707: 0    LEFAAA   3847: 0    LEGAAA   3015: 0    LEHAAA   6786: 0    LEIAAA   8366: 0   
 LEJAAA   8331: 0    LFAAAA   7550: 0    LFBAAA   2150: 0    LFEAAA   4686: 0    LFGAAA   3142: 0    LFHAAA   7062: 0   
 LFIAAA   8389: 0    LGAAAA   7854: 0    LGBAAA   1921: 0    LGEAAA   4984: 0    LGFAAA   3278: 0    LGGAAA   3149: 0   
 LGHAAA   7069: 0    LGIAAA   8395: 0    LHAAAA   7580: 0    LHDAAA   6939: 0    LHEAAA   5282: 0    LHFAAA   3490: 0   
 LHGAAA   3387: 0    LHHAAA   7499: 0    LHIAAA   8374: 0    LIAAAA   7826: 0    LIBAAA   2602: 0    LIDAAA   7239: 0   
 LIEAAA   5717: 0    LIFAAA   3702: 0    LIGAAA   3394: 0    LIHAAA   7506: 0    LIIAAA   8320: 0    LJAAAA   7257: 0   
 LJBAAA   2154: 0    LJDAAA   7235: 0    LJEAAA   6151: 0    LJGAAA   3599: 0    LJHAAA   7793: 0    LJIAAA   8326: 0   
 LKAAAA   7532: 0    LKBAAA   2606: 0    LKDAAA   6962: 0    LKFAAA   3706: 0    LKGAAA   3606: 0    LKHAAA   7800: 0   
 LKIAAA   8353: 0    LLAAAA   7280: 0    LLEAAA   6155: 0    LLGAAA   4170: 0    LLHAAA   8436: 0    LLIAAA   8323: 0   
 LMFAAA   3494: 0    LMGAAA   4177: 0    LMHAAA   8446: 0    LMIAAA   8420: 0    LNEAAA   5728: 0    LNGAAA   4271: 0   
 LNHAAA   8314: 0    LNIAAA   8443: 0    LOFAAA   3282: 0    LOGAAA   4278: 0    LOHAAA   8400: 0    LOIAAA   8447: 0   
 LPEAAA   5286: 0    LPGAAA   4583: 0    LPHAAA   8337: 0    LPIAAA   8390: 0    LQFAAA   2794: 0    LQGAAA   4590: 0   
 LQHAAA   8379: 0    LQIAAA   8344: 0    LREAAA   4988: 0    LRGAAA   4762: 0    LRHAAA   8423: 0    LRIAAA   8448: 0   
 LSFAAA   3801: 0    LSGAAA   4769: 0    LSHAAA   8350: 0    LSIAAA   8411: 0    LTEAAA   4690: 0    LTFAAA   1459: 0   
 LTGAAA   5060: 0    LTHAAA   8340: 0    LTIAAA   8363: 0    LUFAAA   1466: 0    LUGAAA   5067: 0    LUHAAA   8384: 0   
 LUIAAA   8334: 0    LVEAAA   4378: 0    LVFAAA   1741: 0    LVGAAA   5358: 0    LVHAAA   8360: 0    LVIAAA   8430: 0   
 LWCAAA   6181: 0    LWFAAA   1748: 0    LWGAAA   5365: 0    LWHAAA   8369: 0    LWIAAA   8347: 0    LXCAAA   6921: 0   
 LXEAAA   3986: 0    LXFAAA   2019: 0    LXGAAA   5800: 0    LXHAAA   8406: 0    LXIAAA   8317: 0    LYAAAA   1293: 0   
 LYCAAA   6396: 0    LYFAAA   2026: 0    LYGAAA   5807: 0    LYHAAA   8439: 0    LYIAAA   8429: 0    LZAAAA   2690: 0   
 LZFAAA   2860: 0    LZGAAA   6276: 0    LZHAAA   8440: 0    LZIAAA   8401: 0    NMNPTR  UNDEF:##    NMPTRE   8034: 0   
 NPHIGH  UNDEF:##    NPHOZ    8027: 0    NPHZO    8016: 0    NPLOZ    7962: 0    NPLZO    7944: 0    PNHOO    8229: 0   
 PNHOZ    8207: 0    PNHZO    8218: 0    PNLOO    8286: 0    PNLOW    8236: 0    PNLOZ    8264: 0    PNLZO    8275: 0   
 PRCPOS   0335: 0    PRINT    0201: 0    PRTSIZ   0344: 0    PTRNME   8293: 0    PTRNMN  UNDEF:##    PUCPOS   0338: 0   
 PUNCH    0101: 0    PUNSIZ   0341: 0    SNPDIV  UNDEF:##    START    1057: 0    X1       0089: 0    X2       0094: 0   
 X3       0099: 0   

0UNREFERENCED SYMBOLS

 H REMA LABAAA LADAAA LBAAAA LCAAAA LDEAAA LFAAAA LFBAAA LFEAAA LGAAAA LGEAAA LGFAAA LHEAAA LHFAAA LIBAAA LIEAAA LIFAAA
 LJAAAA LJDAAA LJEAAA LYCAAA PNHOZ  PRCPOS PRINT  PRTSIZ PUCPOS PUNCH  PUNSIZ
      *****  **   105 Errors                                                                             ERROR
