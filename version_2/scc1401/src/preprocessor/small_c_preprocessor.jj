/*
	small_c_preprocessor.jj

	The Small-C cross-compiler for IBM 1401
    
	December-16-2014

	By Sean Papay, Matt Pleva, Luca Severini
*/

options
{
	STATIC = false;
}

PARSER_BEGIN(SmallCPP)

package preprocessor;

import java.io.*;
import java.util.*;
import java.nio.file.Paths;
import preprocessor.SmallC_PreProcessor;

public class SmallCPP
{
	static PreProcSymTab symTable = new PreProcSymTab();
	static List<String> paths = new ArrayList<String>();
	static String tmpDir = System.getProperty("java.io.tmpdir");
	static boolean ignore = false;
	static boolean keepComments = false;
	static int verbose = 0;

	static String preprocessFile(String inFile, List<String> searchPaths, PreProcSymTab presetTable,
														boolean isHeader, boolean comments, boolean verbose_) throws Exception
	{
		if(searchPaths != null)
		{
			paths = searchPaths;
		}

		if(presetTable != null)
		{
			symTable = presetTable;
		}

		keepComments = comments;
		verbose = verbose_;

		boolean savedIgnore = ignore;
		ignore = false;

		File file = null;
		String outFile = null;

		if (isHeader)
		{
			String fileName = Paths.get(inFile).getFileName().toString();

			for(String p : paths)
			{
				if(p.charAt(p.length() - 1) != File.separatorChar)
				{
					p = p.concat(File.separator);
				}

				file = new File(p + inFile);
				if (file != null && file.exists())
				{
					inFile = p + inFile;
					outFile = p + fileName + ".preproc";

					if (verbose > 0)
					{
						System.out.println("Preprocessed file: " + outFile);
					}
					break;
				}
			}
		}
		else
		{
			outFile = inFile + ".preproc";

			file = new File(inFile);
		}

		if (file == null || !file.exists())
		{
			if (isHeader)
			{
				// throw new Exception("No header file: " + inFile);

				if(verbose > 1)
				{
					System.out.println("\n##### NO HEADER FILE " + inFile + " #####\n");
				}

				return null;
			}
			else
			{
				// throw new Exception("No source file: " + inFile);

				if(verbose > 1)
				{
					System.out.println("\n##### NO SOURCE FILE " + inFile + " #####\n");
				}

				return null;
			}
		}
		
		if (verbose > 1)
		{
			System.out.println();
			System.out.println("##### PREPROCESSING FILE " + inFile + " size:" + file.length() + " #####");
		}

		Reader sr = new FileReader(file)
		{
			private int[] lookahead = {-1, -1};

			public int read() throws IOException
			{
				if (lookahead[0] >= 0)
				{
					int ch = lookahead[0];
					lookahead[0] = lookahead[1];
					lookahead[1] = -1;
					return ch;
				}

				int ch = super.read();
				// possible line continuation
				if (ch == '\\')
				{
					lookahead[0] = super.read();
					if (lookahead[0] == '\r')
					{
						lookahead[1] = super.read();
						if (lookahead[1] != '\n')
						{
							return ch;
						}
						else
						{
							lookahead[0] = '\n';
						}
					}

					if (lookahead[0] == '\n')
					{
						lookahead[0] = lookahead[1] = -1;
						do
						{
							ch = super.read();
							if (ch < 0)
							{
								return ch;
							}
						}
						while(Character.isWhitespace((char) ch));

						return ch;
					}
				}
				else if (ch == '\r')
				{
					lookahead[0] = super.read();
					if (lookahead[0] == '\n')
					{
						lookahead[0] = lookahead[1] = -1;
						return '\n';
					}
				}

				return ch;
			}

			public int read(char[] cbuf, int offset, int length) throws IOException
			{
				int read = 0;
				while (read < length && offset + read < cbuf.length)
				{
					int ch = read();
					if (ch < 0)
					{
						break;
					}

					cbuf[offset + (read++)] = (char)ch;
				}

				if (read == 0 && read < length)
				{
					return -1;
				}

				return read;
			}
        };

		SmallCPP parser = new SmallCPP(sr);

	    parser.setTabSize(1);

		FileCopier copier = new FileCopier(inFile, outFile);

        try
		{
            parser.Tokens(copier);

			copier.copyUntilEnd();

			if (verbose > 1)
			{
				System.out.println("### FILE " + inFile + " PREPROCESSED SUCCESSFULLY ###");
				System.out.println();
			}
        }
        catch (ParseException ex)
		{
			if(verbose > 1)
			{
				System.out.println("### PREPROCESSING ERROR IN FILE " + inFile + " ###");
			}

			ex.printStackTrace();
		}

		copier.close();

		ignore = savedIgnore;

		return outFile;
	}

    // Setting the tab size makes the token locations more accurate.
    public void setTabSize(int size)
	{
        jj_input_stream.setTabSize(size);
    }

    // return the current tab size that the parser is using
    public int getTabSize()
	{
        return jj_input_stream.getTabSize();
    }
}

PARSER_END(SmallCPP)

/*
SKIP :
{
	<IGNORED: <COMMENTS>>
}
*/

TOKEN :
{
  <COMMENTS: <COMMENT> | <COMMENT_BLOCK>>
  | <COMMENT: "//"(~["\n", "\r"])*>
  | <COMMENT_BLOCK: "/*"(~["*"])* "*"(~["/"] (~["*"])* "*")* "/">
  | <STRINGS: <STRING_1> | <STRING_2>>
  | <STRING_1: "\""(~["\"", "\n"])*"\"">
  | <STRING_2: "<"(~["\"", "\n"])*">">
  |	<STATEMENTS: <RESERVED_WORDS_1> | <RESERVED_WORDS_2>>
  | <RESERVED_WORDS_1: ("#include" | "#ifdef" | "#ifndef" | "#else" | "#endif" | "#define" | "#undef")(~["\r", "\n"])*>
  | <RESERVED_WORDS_2: "#CODE" | "#STACK" | "#HEAP" | "#DATA">
  | <IDENTIFIER: (<IDENTIFIER_CHAR>)(<IDENTIFIER_CHAR> | ["0"-"9"])*>
  | <IDENTIFIER_CHAR: ["A"-"Z", "a"-"z", "_"]>
  | <ASM_BLOCK: "#asm"(~["*"] | ("*")* ~["/"])* "#endasm">
  | <VALUE: <DIGITS>>
  | <DIGITS: (["0"-"9"])+>
  | <WHITESPACE: (" " | "\t" | "\r" | "\n")+>
  | <NEWLINE: "\r\n" | "\r" | "\n">
  | <SYMBOLS: "~" | "!" | "@" | "%" | "^" | "&" | "*" | "-" | "_" | "+" | "=" | "|" | "/" | ":" | ";" |
						"?" | "<" | ">" | "." | "," | "'" | "\"" | "(" | ")" | "[" | "]" | "{" | "}" | "\\">
}

void Comment(StringBuffer buf, FileCopier copier) : {}
{
    <COMMENTS>
    {
		//System.out.println("Comment:");
		//System.out.println(token.image);

		if(!keepComments)
		{
	        if(!ignore)
            {
				int beginLine = token.beginLine;
				int endLine = token.endLine;
				int beginCol = token.beginColumn;
				int endCol = token.endColumn;
				String position = String.format("%d:%d - %d:%d", beginLine, beginCol, endLine, endCol);

				if (verbose > 1)
				{
					System.out.println("##### COMMENT REMOVED at " + position + " #####");
				}

				copier.jumpFromUntil(beginLine, beginCol, endLine, endCol);
            }
		}
		else
		{
			buf.append("Type: Comment").append(", Value: ").append(token.image).append("\n");
		}
    }
}

void Statement(StringBuffer buf, FileCopier copier) : {}
{
    <STATEMENTS>
    {
		int beginLine = token.beginLine;
		int endLine = token.endLine;
		int beginCol = token.beginColumn;
		int endCol = token.endColumn;
		String position = String.format("%d:%d - %d:%d", beginLine, beginCol, endLine, endCol);

		String statement = null, name = null, value = null;
        StringTokenizer tokenizer = new StringTokenizer(token.image);

		statement = tokenizer.nextToken(" ").trim();

		if(tokenizer.hasMoreTokens())
		{
			name = tokenizer.nextToken(" ").trim();
		}

		if(tokenizer.hasMoreTokens())
		{
			value = tokenizer.nextToken("\r\n").trim();
		}
/*
		System.out.println("position: " + position);
		System.out.println("statement: " + statement);
		System.out.println("name: " + name);
		System.out.println("value: " + value);
*/
		if(statement.equals("#include"))
		{
			if(!ignore)
			{
				while((value = symTable.getValue(name)) != null)
				{
					name = value;
				}

				name = name.replaceAll("\"", "");
				name = name.replaceAll("<", "");
				name = name.replaceAll(">", "");

				if (verbose > 1)
				{
					System.out.println("##### INCLUDE " + name + " at " + position + " #####");
				}

				copier.copyUntilLine(beginLine - 1);
				copier.jumpUntilLine(beginLine);

				try
				{
					String procFile = preprocessFile(name, paths, symTable, true, keepComments, verbose);
					if(procFile != null)
					{
						copier.copyFile(procFile);

						File file = new File(procFile);
						file.delete();
					}
				}
				catch(Exception ex)
				{
					ex.printStackTrace();
				}
			}
		}
		else if(statement.equals("#define"))
		{
			if(!ignore)
			{
				symTable.setValue(name, value);

				copier.copyUntilLine(beginLine - 1);
				copier.jumpUntilLine(beginLine);
			}
		}
		else if(statement.equals("#undef"))
		{
			if(!ignore)
			{
				symTable.remove(name);

				copier.copyUntilLine(beginLine - 1);
				copier.jumpUntilLine(beginLine);
			}
		}
		else if(statement.equals("#ifdef"))
		{
			if(!ignore)
			{
				ignore = !symTable.isDefined(name);
				if(ignore)
				{
					if (verbose > 1)
					{
						System.out.println("##### BEGIN IGNORE at " + position + " #####");
					}
				}

				copier.copyUntilLine(beginLine - 1);
				copier.jumpUntilLine(beginLine);
			}
		}
		else if(statement.equals("#ifndef"))
		{
			if(!ignore)
			{
				ignore = symTable.isDefined(name);
				if(ignore)
				{
					if (verbose > 1)
					{
						System.out.println("##### BEGIN IGNORE at " + position + " #####");
					}
				}

				copier.copyUntilLine(beginLine - 1);
				copier.jumpUntilLine(beginLine);
			}
		}
		else if(statement.equals("#else"))
		{
			if(!ignore)
			{
				ignore = true;

				if (verbose > 1)
				{
					System.out.println("##### BEGIN IGNORE at " + position + " #####");
				}

				copier.copyUntilLine(beginLine - 1);
				copier.jumpUntilLine(beginLine);
			}
			else
			{
				ignore = false;

				if (verbose > 1)
				{
					System.out.println("##### END IGNORE at " + position + " #####");
				}

				copier.jumpUntilLine(beginLine);
			}
		}
		else if(statement.equals("#endif"))
		{
			if(ignore)
			{
				ignore = false;

				if (verbose > 1)
				{
					System.out.println("##### END IGNORE at " + position + " #####");
				}

				copier.jumpUntilLine(beginLine);
			}
			else
			{
				copier.copyUntilLine(beginLine - 1);
				copier.jumpUntilLine(beginLine);
			}
		}

		buf.append("Type: Reserved word").append(", Value: ").append(token.image).append("\n");
    }
}

void Identifier(StringBuffer buf, FileCopier copier) : {}
{
    <IDENTIFIER>
    {
		int beginLine = token.beginLine;
		int endLine = token.endLine;
		int beginCol = token.beginColumn;
		int endCol = token.endColumn;
		String position = String.format("%d:%d - %d:%d", beginLine, beginCol, endLine, endCol);

		if(!ignore)
		{
			String value = symTable.getValue(token.image);
			if(value != null)
			{
				if (verbose > 1)
				{
					System.out.println("##### REPLACE \"" + token.image + "\" with \"" + value + "\" at " + position + " #####");
				}

				copier.copyUntilLineAndReplace(beginLine, token.image, value);
			}
		}

        buf.append("Type: Identifier").append(", Value: ").append(token.image).append("\n");
    }
}

void String(StringBuffer buf) : {}
{
    <STRINGS>
    {
        buf.append("Type: String").append(", Value: ").append(token.image).append("\n");
    }
}

void Asm_block(StringBuffer buf) : {}
{
    <ASM_BLOCK>
    {
        buf.append("Type: AsmBlock").append(", Value: ").append(token.image).append("\n");
    }
}

void Value(StringBuffer buf) : {}
{
    <VALUE>
    {
        buf.append("Type: Number").append(", Value: ").append(token.image).append("\n");
    }
}

void Tokens(FileCopier copier) : { StringBuffer sb = new StringBuffer(); }
{
    (Statement(sb, copier) | Identifier(sb, copier) | String(sb) | Value(sb) | Asm_block(sb) | Comment(sb, copier) | <SYMBOLS> | <WHITESPACE>)* <EOF>

	{
		// System.out.println("### Parsed tokens:\n" + sb.toString());
	}
}
